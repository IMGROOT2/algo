{
  "bronze": [
    {
      "title": "Problem 1. Promotion Counting",
      "subtitle": "USACO 2016 January Contest, Bronze",
      "id": 591,
      "year": "2016",
      "division": "bronze",
      "number": "1",
      "problem": "Bessie the cow is helping Farmer John run the USA Cow Olympiad (USACO), an\non-line contest where participants answer challenging questions to demonstrate\ntheir mastery of bovine trivia.\n\n<p>In response to a wider range of participant backgrounds, Farmer John recently\nexpanded the contest to include four divisions of difficulty: bronze, silver,\ngold, and platinum.  All new participants start in the bronze division, and any\ntime they score perfectly on a contest they are promoted to the next-higher\ndivision.  It is even possible for a participant to be promoted several times\nwithin the same contest. Farmer John keeps track of a list of all contest\nparticipants and their current divisions, so that he can start everyone out at\nthe right level any time he holds a contest.\n\n</p><p>When publishing the results from his most recent contest, Farmer John wants to\ninclude information on the number of participants who were promoted from bronze\nto silver, from silver to gold, and from gold to platinum.  However, he\nneglected to count promotions as they occurred during the contest.  Bessie,\nbeing the clever bovine she is, realizes however that Farmer John can deduce the\nnumber of promotions that occurred solely from the number of participants at\neach level before and after the contest.  Please help her perform this\ncomputation!\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file promote.in):</h4>\nInput consists of four lines, each containing two integers in the range\n0..1,000,000. The first line specifies the number of bronze participants\nregistered before and after the contest. The second line specifies the number of\nsilver participants before and after the contest. The third line specifies the\nnumber of gold participants before and after the contest. The last line\nspecifies the number of platinum participants before and after the contest.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file promote.out):</h4>\nPlease output three lines, each containing a single integer. The first line\nshould contain the number of participants who were promoted from bronze to\nsilver. The second line should contain the number of participants who were\npromoted from silver to gold. The last line should contain the number of\nparticipants who were promoted from gold to platinum.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 2\n1 1\n1 1\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n1\n1\n</pre>\n\n<p>In this example, 1 participant was registered in each division prior to the\ncontest.  At the end of the contest, 2 participants were registered in bronze\nand platinum.  One way this could have happened is that 2 new participants\njoined during the contest; one was promoted all the way to platinum, and the\nother stayed in bronze.\n\n</p><p>Problem credits: Brian Dean\n\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=591"
    },
    {
      "title": "Problem 2. Angry Cows",
      "subtitle": "USACO 2016 January Contest, Bronze",
      "id": 592,
      "year": "2016",
      "division": "bronze",
      "number": "2",
      "problem": "Bessie the cow has designed what she thinks will be the next big hit video game:\n\"Angry Cows\".  The premise, which she believes is completely original, is that\nthe player shoots a cow with a slingshot  into a one-dimensional scene\nconsisting of a set of hay bales located at various points on a number line; the\ncow lands on a hay bale with sufficient force to cause the bale to explode,\nwhich in turn might set of a chain reaction that causes  additional nearby hay\nbales to explode.  The goal is to use a single cow to start a chain reaction\nthat detonates as many hay bales as possible.\n\n<p>There are $N$ hay bales located at distinct integer positions\n$x_1, x_2, \\ldots, x_N$ on the number line.  If a cow is launched onto a hay\nbale at position $x$, this hay bale explodes with a \"blast radius\" of 1, meaning\nthat any other hay bales within 1 unit of distance are also engulfed by the\nexplosion. These neighboring bales then themselves explode (all simultaneously),\neach with a blast radius of 2, so these explosions may engulf additional\nyet-unexploded bales up to 2 units of distance away.  In the next time step,\nthese bales also  explode (all simultaneously) with blast radius 3.  In general,\nat time $t$ a  set of hay bales will explode, each with blast radius $t$.  Bales\nengulfed by these explosions will themselves explode at time $t+1$ with blast\nradius $t+1$, and so on.\n\n</p><p>Please determine the maximum number of hay bales that can explode if a single\ncow is launched onto the best possible hay bale to start a chain reaction.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file angry.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100$).  The remaining $N$\nlines all  contain integers $x_1 \\ldots x_N$ (each in the range\n$0 \\ldots 1,000,000,000$).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file angry.out):</h4>\nPlease output the maximum number of hay bales that a single cow can cause to\nexplode.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n8\n5\n6\n13\n3\n4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>In this example, launching a cow onto the hay bale at position 5 will cause the\nbales at positions 4 and 6 to explode, each with blast radius 2.  These\nexplosions in turn cause the bales at positions 3 and 8 to explode, each with\nblast radius 3.   However, these final explosions are not strong enough to reach\nthe bale at position 13.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=592"
    },
    {
      "title": "Problem 3. Mowing the Field",
      "subtitle": "USACO 2016 January Contest, Bronze",
      "id": 593,
      "year": "2016",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John is quite reliable in all aspects of managing his farm, except one:\nhe is terrible at mowing the grass in a timely or logical fashion.\n\n<p>The farm is a large 2D grid of square unit cells.  FJ starts in one of these\ncells at time $t = 0$, mowing the grass in this cell so that it is initially the\nonly cell in which the grass is cut.  FJ's remaining mowing pattern is \ndescribed by a sequence of $N$ statements.  For example, if the first  statement\nis \"W 10\", then for times $t = 1$ through $t = 10$ (i.e., the next 10 units of\ntime), FJ will step one cell to his west, mowing the  grass along the way. \nAfter completing this sequence of steps, he will end up 10 cells to his west at\ntime $t = 10$, having mowed the grass in every cell along the way. \n\n</p><p>So slow is FJ's progress that some of the grass he mows might grow back before\nhe is finished with all his mowing. Any section of grass that is cut at time $t$\nwill reappear at time $t + x$. \n\n</p><p>FJ's mowing pattern might have him re-visit the same cell multiple times, but he\nremarks that he never encounters a cell in which the grass is already cut.  That\nis, every time he visits a cell, his most recent visit to that same cell must\nhave been at least $x$ units of time earlier, in order for the grass to have\ngrown back.\n\n</p><p>Please determine the maximum possible value of $x$ so that FJ's observation\nremains valid.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file mowing.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100$). Each of the\nremaining $N$ lines contains a single statement and is of the form 'D S', where\nD is a character describing a direction (N=north, E=east, S=south, W=west) and S\nis the number of steps taken in that direction ($1 \\leq S \\leq 10$).  \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file mowing.out):</h4>\nPlease determine the maximum value of $x$ such that FJ never steps on a cell\nwith cut grass.  If FJ never visits any cell more than once, please\noutput -1.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\nN 10\nE 2\nS 3\nW 4\nS 5\nE 8\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>In this example, FJ steps on a cell at time 17 that he stepped on earlier at\ntime 7; therefore, $x$ must be at most 10 or else the grass from his first visit\nwould not yet have grown back.  He also steps on a cell at time 26 that he also\nvisited at time 2; hence $x$ must also be at most 24.  Since the first of these\ntwo constraints is tighter, we see that $x$ can be at most 10.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=593"
    },
    {
      "title": "Problem 1. Milk Pails",
      "subtitle": "USACO 2016 February Contest, Bronze",
      "id": 615,
      "year": "2016",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John has received an order for exactly $M$ units of milk\n($1 \\leq M \\leq 1,000$) that he needs to fill right away.  Unfortunately, his\nfancy milking machine has just become broken, and all he has are three milk\npails of integer sizes $X$, $Y$, and $M$ ($1 \\leq X &lt; Y &lt; M$). All three pails\nare initially empty.  Using these three pails, he can perform any number of the\nfollowing two types of operations:\n\n<p>- He can fill the smallest pail (of size $X$) completely to the top with $X$\nunits of milk and pour it into the size-$M$ pail, as long as this will not cause\nthe size-$M$ pail to overflow.\n\n</p><p>- He can fill the medium-sized pail (of size $Y$) completely to the top with $Y$\nunits of milk and pour it into the size-$M$ pail, as long as this will not cause\nthe size-$M$ pail to overflow.\n\n</p><p>Although FJ realizes he may not be able to completely fill the size-$M$ pail,\nplease help him determine the maximum amount of milk he can possibly add to this\npail.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file pails.in):</h4>\nThe first, and only line of input, contains $X$, $Y$, and $M$, separated by spaces.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file pails.out):</h4>\nOutput the maximum amount of milk FJ can possibly add to the size-$M$ pail.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">17 25 77\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">76\n</pre>\n\n<p>In this example, FJ fills the pail of size 17 three times and the pail of size\n25 once, accumulating a total of 76 units of milk.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=615"
    },
    {
      "title": "Problem 2. Circular Barn",
      "subtitle": "USACO 2016 February Contest, Bronze",
      "id": 616,
      "year": "2016",
      "division": "bronze",
      "number": "2",
      "problem": "Being a fan of contemporary architecture, Farmer John has built a new barn in\nthe shape of a perfect circle.  Inside, the barn consists of a ring of $n$\nrooms,  numbered clockwise from $1 \\ldots n$ around the perimeter of the barn\n($3 \\leq n \\leq 1,000$).  Each room  has doors to its two neighboring rooms, and\nalso a door opening to the exterior of the barn.\n\n<p>Farmer John wants exactly $r_i$ cows to end up in each room $i$\n($1 \\leq r_i \\leq 100$). To herd the cows into the barn in an orderly fashion,\nhe plans to unlock the exterior door of a single room, allowing the cows to\nenter through that door. Each cow then walks clockwise through the rooms until\nshe reaches a suitable destination.  Farmer John wants to unlock the exterior\ndoor that will cause his cows to collectively walk a minimum total amount of\ndistance.  Please determine the minimum total distance his cows will need to\nwalk, if he chooses the best such door to unlock.  The distance walked by a\nsingle cow is the number of interior doors through which she passes.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cbarn.in):</h4>\nThe first line of input contains $n$.  Each of the remaining $n$ lines contain\n$r_1 \\ldots r_n$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cbarn.out):</h4>\nPlease write out the minimum total amount of distance the cows collectively need\nto travel.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n4\n7\n8\n6\n4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">48\n</pre>\n\n<p>In this example, the best solution is to let the cows enter through the\ndoor of the room that requires 7 cows.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=616"
    },
    {
      "title": "Problem 3. Load Balancing",
      "subtitle": "USACO 2016 February Contest, Bronze",
      "id": 617,
      "year": "2016",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John's $N$ cows are each standing at distinct locations\n$(x_1, y_1) \\ldots (x_n, y_n)$ on his two-dimensional farm ($1 \\leq N \\leq 100$,\nand the $x_i$'s and $y_i$'s are positive odd integers of size at most $B$).  FJ\nwants to partition his field by building a  long (effectively infinite-length)\nnorth-south fence with equation $x=a$ ($a$ will be an even integer, thus\nensuring that he does not build the fence through the position of any cow). He\nalso wants to build a long (effectively infinite-length) east-west fence with\nequation $y=b$, where $b$ is an even integer.  These two fences cross at the\npoint $(a,b)$, and together they partition his field into four regions.  \n\n<p>FJ wants to choose $a$ and $b$ so that the cows appearing in the four resulting\nregions are reasonably \"balanced\", with no region containing too many cows. \nLetting $M$ be the maximum number of cows appearing in one of the four regions,\nFJ wants to make $M$ as small as possible.  Please help him determine this\nsmallest possible value for $M$.\n\n</p><p>For the first five test cases, $B$ is guaranteed to be at most 100.  In all test\ncases, $B$ is guaranteed to be at most 1,000,000.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file balancing.in):</h4>\nThe first line of the input contains two integers, $N$ and $B$. The next $n$\nlines each contain the location of a single cow, specifying its $x$ and $y$\ncoordinates.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file balancing.out):</h4>\nYou should output the smallest possible value of $M$ that FJ can achieve by\npositioning his fences optimally.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 10\n7 3\n5 5\n9 7\n3 1\n7 7\n5 3\n9 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=617"
    },
    {
      "title": "Problem 1. Diamond Collector",
      "subtitle": "USACO 2016 US Open Contest, Bronze",
      "id": 639,
      "year": "2016",
      "division": "bronze",
      "number": "1",
      "problem": "Bessie the cow, always a fan of shiny objects, has taken up a hobby of mining\ndiamonds in her spare time!  She has collected $N$ diamonds ($N \\leq 1000$) of\nvarying sizes, and she wants to arrange some of them in a display case in the\nbarn.  \n\n<p>Since Bessie wants the diamonds in the case to be relatively similar in size,\nshe decides that she will not include two diamonds in the case if their sizes\ndiffer by more than $K$ (two diamonds can be displayed together in the case\nif their sizes differ by exactly $K$).  Given $K$, please help Bessie determine\nthe maximum number of diamonds she can display in the case.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file diamond.in):</h4>\nThe first line of the input file contains $N$ and $K$ ($0 \\leq K \\leq 10,000$).\nThe next $N$ lines each contain an integer giving the size of one of the \ndiamonds.  All sizes will be positive and will not exceed $10,000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file diamond.out):</h4>\nOutput a single positive integer, telling the maximum number of diamonds that \nBessie can showcase.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 3\n1\n6\n4\n3\n1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=639"
    },
    {
      "title": "Problem 2. Bull in a China Shop",
      "subtitle": "USACO 2016 US Open Contest, Bronze",
      "id": 640,
      "year": "2016",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John has decided his home needs more decoration.  Visiting the local\nchina shop, he finds a delicate glass cow figurine that he decides to purchase,\nknowing that it will fit perfectly on the mantel above his fireplace.\n\n<p>The shape of the cow figurine is described by an $N \\times N$ grid of characters\nlike the one below ($3 \\leq N \\leq 8$), where '#' characters are part of the\nfigurine and '.' characters are not.\n\n</p><p></p><pre>...............\n...............\n...............\n#..#...........\n####...........\n############...\n.##.#########..\n....#######.##.\n....##...##....\n....##...##....\n...............\n...............\n...............\n...............\n...............\n</pre>\n\n<p>Unfortunately, right before FJ can make his purchase, a bull runs through the\nshop  and breaks not only FJ's figurine, but many of the other glass objects on\nthe shelves as well!  FJ's figurine breaks into 2 pieces, which quickly become\nlost among $K$ total pieces lying on the ground ($3 \\leq K \\leq 10$).  Each of\nthe $K$  pieces is described by an $N \\times N$ grid of characters, just like\nthe original figurine.\n\n</p><p>Please help FJ determine which of the $K$ pieces are the two that he needs to\nglue back together to mend his broken figurine.  Fortunately, when the two\npieces of his figurine fell to the ground they were not rotated or flipped, so\nto reassemble them, FJ only needs to possibly shift the pieces horizontally\nand/or vertically and then super-impose them.  If he has the correct two pieces,\nhe should be able to do this in a way that exactly reconstructs the original\nfigurine, with each '#' in the original figurine represented in exactly one of\nthe two pieces (that is, the two pieces, when shifted and superimposed, should\nnot share any '#'  characters in common, and together they should form the\noriginal shape exactly).\n\n</p><p>FJ can shift a piece both vertically and/or horizontally by any number of\ncharacters, but it cannot be shifted so far that any of its '#' characters fall\noutside the original $N \\times N$ grid. The shape of each piece does not\nnecessarily consist of a single \"connected\" region of '#' characters;\nnonetheless, if a piece consists of multiple disjoint clumps of '#' characters,\nthey must all be shifted the same amount if the entire piece is to be shifted.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file bcs.in):</h4>\nThe first line of input contains $N$ followed by $K$.  The next $N$ lines\nprovide the grid of characters describing FJ's original figurine.  The next $KN$\nlines give the $K$ grids of characters specifying the $K$ pieces FJ finds on the\nground.  \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file bcs.out):</h4>\nPlease print out one line containing two space-separated integers, each in the\nrange $1 \\ldots K$, specifying the indices of the two pieces of FJ's figurine. \nA solution will always exist, and it will be unique.  The two numbers you print \nmust be in sorted order.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3\n####\n#..#\n#.##\n....\n.#..\n.#..\n##..\n....\n####\n##..\n#..#\n####\n....\n.###\n.#..\n.#..\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 3\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=640"
    },
    {
      "title": "Problem 3. Field Reduction",
      "subtitle": "USACO 2016 US Open Contest, Bronze",
      "id": 641,
      "year": "2016",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John's $N$ cows ($3 \\leq N \\leq 50,000$) are all located at distinct\npositions in his two-dimensional field.  FJ wants to enclose all of the cows\nwith a rectangular fence whose sides are parallel to the x and y axes, and he\nwants this fence to be as small as possible so that it contains every cow (cows\non the boundary are allowed).  \n\n<p>FJ is unfortunately on a tight budget due to low milk production last quarter.\nHe would therefore like to build an even smaller fenced enclosure if possible,\nand he is willing to sell one cow from his herd to make this possible.  \n\n</p><p>Please help FJ compute the smallest possible area he can enclose with his fence\nafter removing one cow from his herd (and thereafter building the tightest \nenclosing fence for the remaining $N-1$ cows).\n\n</p><p>For this problem, please treat cows as points and the fence as a collection of\nfour line segments (i.e., don't think of the cows as \"unit squares\").  Note that\nthe answer can be zero, for example if all remaining cows end up standing  in a\ncommon vertical or horizontal line.  Finally, note that since $N$ can be quite\nlarge, you may need to be careful in how you solve this problem to make sure\nyour program runs quickly enough!\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file reduce.in):</h4>\nThe first line of input contains $N$.  The next $N$ lines each contain two\nintegers specifying the location of a cow.  Cow locations are positive integers\nin the range $1 \\ldots 40,000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file reduce.out):</h4>\nWrite a single integer specifying the minimum area FJ can enclose with his fence\nafter removing one carefully-chosen cow from his herd.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n2 4\n1 1\n5 2\n17 25\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=641"
    },
    {
      "title": "Problem 1. Square Pasture",
      "subtitle": "USACO 2016 December Contest, Bronze",
      "id": 663,
      "year": "2016",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John has decided to update his farm to simplify its geometry. \nPreviously, his cows grazed in two rectangular fenced-in pastures.  Farmer John\nwould like to replace these with a single square fenced-in pasture of minimum\nsize that still covers all the regions of his farm that were previously enclosed\nby the former two fences.\n\n<p>Please help Farmer John figure out the minimum area he needs to make his new\nsquare pasture so that if he places it appropriately, it can still cover all the\narea formerly covered by the two older rectangular pastures.  The square\npasture should have its sides parallel to the x and y axes.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file square.in):</h4>\nThe first line in the input file specifies one of the original rectangular\npastures with four space-separated integers $x_1$ $y_1$ $x_2$ $y_2$,  each in\nthe range $0 \\ldots 10$.  The lower-left corner of the pasture is at the point\n$(x_1, y_1)$, and the upper-right corner is at the point $(x_2, y_2)$, where \n$x_2 &gt; x_1$ and $y_2 &gt; y_1$.\n\n<p>The second line of input has the same 4-integer format as the first line, and\nspecifies the second original rectangular pasture.  This pasture will not\noverlap or touch the first pasture.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file square.out):</h4>\nThe output should consist of one line containing the minimum area required of a\nsquare pasture that would cover all the regions originally enclosed by the two\nrectangular pastures.  \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 6 8 8\n1 8 4 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">49\n</pre>\n\n<p>In the example above, the first original rectangle has corners $(6,6)$ and\n$(8,8)$. The second has corners at $(1,8)$ and $(4,9)$.  By drawing a square fence\nof side length 7 with corners $(1,6)$ and $(8,13)$, the original areas can still be enclosed; moreover, this is the best possible, since it is impossible to enclose the original areas with a square of side length only 6.  Note that there are several different possible valid placements for the square of side length 7, as it could have been shifted vertically a bit.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=663"
    },
    {
      "title": "Problem 2. Block Game",
      "subtitle": "USACO 2016 December Contest, Bronze",
      "id": 664,
      "year": "2016",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John is trying to teach his cows to read by giving them a set of $N$\nspelling boards typically used with preschoolers ($1 \\leq N \\leq 100$). Each\nboard has a word and an image on each side.  For example, one side might have\nthe word 'cat' along with a picture of a cat, and the other side might have the\nword 'dog' along with a picture of a dog.  When the boards are lying on the\nground, $N$ words are therefore shown.  By flipping over some of the boards, a\ndifferent set of $N$ words can be exposed.\n\n<p>To help the cows with their spelling, Farmer John wants to fashion a number of\nwooden blocks, each embossed with a single letter of the alphabet. He wants to\nmake sufficiently many blocks of each letter so that no matter which set of $N$\nwords is exposed on the upward-facing boards, the cows will be able to spell all\nof these words using the blocks.  For example, if $N=3$ and the words 'box',\n'cat', and 'car' were facing upward, the cows would need at least one 'b' block,\none 'o' block, one 'x' block, two 'c' blocks, two 'a' blocks, one 't' block, and\none 'r' block.\n\n</p><p>Please help the Farmer John determine the minimum number of blocks for each\nletter of the alphabet that he needs to provide, so that irrespective of which\nface of each board is showing, the cows can spell all $N$ visible words.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file blocks.in):</h4>\nLine 1 contains the integer $N$. \n\n<p>The next $N$ lines each contain 2 words separated by a space, giving the two\nwords on opposite sides of a board.  Each word is a string of at most 10\nlowercase letters.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file blocks.out):</h4>\nPlease output 26 lines. The first output line should contain a number specifying\nthe number of copies of 'a' blocks needed.  The next line should specify the\nnumber of 'b' blocks needed, and so on.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\nfox box\ndog cat\ncar bus\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n2\n2\n1\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n1\n1\n1\n1\n0\n0\n1\n0\n0\n</pre>\n\n<p>In this example, there are $N = 3$ boards, giving $2^3 = 8$ possibilities for\nthe set of upward-facing words:\n</p><pre>fox dog car\nfox dog bus\nfox cat car\nfox cat bus\nbox dog car\nbox dog bus\nbox cat car\nbox cat bus\n</pre>\nWe need enough blocks for each letter of the alphabet so that we can spell all\nthree words, irrespective of which of these eight scenarios occurs.\n\n<p>\n</p><p>Problem credits: Viktoriia Schwartz\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=664"
    },
    {
      "title": "Problem 3. The Cow-Signal",
      "subtitle": "USACO 2016 December Contest, Bronze",
      "id": 665,
      "year": "2016",
      "division": "bronze",
      "number": "3",
      "problem": "Bessie and her cow friends are playing as their favorite cow superheroes.  Of\ncourse, everyone knows that any self-respecting superhero needs a signal to call\nthem to action. Bessie has drawn a special signal on a sheet of $M \\times N$\npaper ($1 \\leq M \\leq 10, 1 \\leq N \\leq 10$), but this is too small, much too\nsmall! Bessie wants to amplify the signal so it is exactly $K$ times bigger\n($1 \\leq K \\leq 10$) in each direction.\n\n<p>The signal will consist only of the '.' and 'X' characters.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowsignal.in):</h4>\nThe first line of input contains $M$, $N$, and $K$, separated by spaces.  \n\n<p>The next $M$ lines each contain a length-$N$ string, collectively describing the\npicture of the signal.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowsignal.out):</h4>\nYou should output $KM$ lines, each with $KN$ characters, giving a picture of the\nenlarged signal.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 4 2\nXXX.\nX..X\nXXX.\nX..X\nXXX.\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">XXXXXX..\nXXXXXX..\nXX....XX\nXX....XX\nXXXXXX..\nXXXXXX..\nXX....XX\nXX....XX\nXXXXXX..\nXXXXXX..\n</pre>\n\n<p>\n</p><p>Problem credits: Nathan Pinsker\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=665"
    },
    {
      "title": "Problem 1. Don't Be Last!",
      "subtitle": "USACO 2017 January Contest, Bronze",
      "id": 687,
      "year": "2017",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John owns 7 dairy cows: Bessie, Elsie, Daisy, Gertie, Annabelle, Maggie,\nand Henrietta. He milks them every day and keeps detailed records on the amount\nof milk provided by each cow during each milking session.  Not surprisingly,\nFarmer John highly prizes cows that provide large amounts of milk.\n\n<p>Cows, being lazy creatures, don't necessarily want to be responsible for\nproducing too much milk.  If it were up to them, they would each be perfectly\ncontent to be the lowest-producing cow in the entire herd.  However, they keep\nhearing Farmer John mentioning the phrase \"farm to table\" with his human\nfriends, and while they don't quite understand what this means, they have a\nsuspicion that it actually may not be the best idea to be the cow producing the\nleast amount of milk.  Instead, they figure it's safer to be in the position of\nproducing the second-smallest amount of milk in the herd.  Please help the cows\nfigure out which of them currently occupies this desirable position.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file notlast.in):</h4>\nThe input file for this task starts with a line containing the integer $N$\n($1 \\leq N \\leq 100$), giving the number of entries in Farmer John's milking\nlog.  \n\n<p>Each of the $N$ following lines contains the name of a cow (one of the seven\nabove) followed by a positive integer (at most 100), indicating the amount of\nmilk produced by the cow during one of its milking sessions.  \n\n</p><p>Any cow that does not appear in the log at all is assumed to have produced no\nmilk.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file notlast.out):</h4>\nOn a single line of output, please print the name of the cow that produces the \nsecond-smallest amount of milk.  More precisely, if $M$ is the minimum total\namount of milk produced by any cow, please output the name of the cow whose\ntotal production is minimal among all cows that produce more than $M$ units of\nmilk.  If several cows tie for this designation, or if no cow has this\ndesignation (i.e., if all cows have production equal to $M$), please output the\nword \"Tie\". Don't forget to add a newline character at the end of your line of\noutput. Note that $M=0$ if one of the seven cows is completely absent from the\nmilking log, since this cow would have produced no milk.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10\nBessie 1\nMaggie 13\nElsie 3\nElsie 4\nHenrietta 4\nGertie 12\nDaisy 7\nAnnabelle 10\nBessie 6\nHenrietta 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">Henrietta\n</pre>\n\n<p>In this example, Bessie, Elsie, and Daisy all tie for the minimum by each\nproducing 7 units of milk.  The next-largest production, 9 units, is due to\nHenrietta.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=687"
    },
    {
      "title": "Problem 2. Hoof, Paper, Scissors",
      "subtitle": "USACO 2017 January Contest, Bronze",
      "id": 688,
      "year": "2017",
      "division": "bronze",
      "number": "2",
      "problem": "You have probably heard of the game \"Rock, Paper, Scissors\".  The cows like to\nplay a similar game they call \"Hoof, Paper, Scissors\". \n\n<p>The rules of \"Hoof, Paper, Scissors\" are simple.  Two cows play against\neach-other.  They both count to three and then each simultaneously makes a\ngesture that represents either a hoof, a piece of paper, or a pair of scissors. \nHoof beats scissors (since a hoof can smash a pair of scissors), scissors beats\npaper (since scissors can cut paper), and paper beats hoof (since the hoof can\nget a papercut).   For example, if the first cow makes a \"hoof\" gesture and the\nsecond a \"paper\" gesture, then the second cow wins.  Of course, it is also\npossible to tie, if both cows make the same gesture.\n\n</p><p>Farmer John watches in fascination as two of his cows play a series of $N$\ngames of \"Hoof, Paper,  Scissors\" ($1 \\leq N \\leq 100$).  Unfortunately, while\nhe can see that the cows are making three distinct types of gestures, he can't\ntell which one represents \"hoof\", which one represents \"paper\" and which one\nrepresents \"scissors\" (to Farmer John's untrained eye, they all seem to be\nvariations on \"hoof\"...)\n\n</p><p>Not knowing the meaning of the three gestures, Farmer John assigns them numbers\n1, 2, and 3. Perhaps gesture 1 stands for \"hoof\", or maybe it stands for\n\"paper\"; the meaning is not clear to him.  Given the gestures made by both cows\nover all $N$ games, please help Farmer John determine the maximum possible\nnumber of games the first cow could have possibly won, given an appropriate\nmapping between numbers and their respective gestures.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file hps.in):</h4>\nThe first line of the input file contains $N$. \n\n<p>Each of the remaining $N$ lines contain two integers (each 1, 2, or 3),\ndescribing a game from Farmer John's perspective.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file hps.out):</h4>\nPrint the maximum number of games the first of the two cows could possibly have\nwon.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1 2\n2 2\n1 3\n1 1\n3 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>One solution (of several) for this sample case is to have 1 represent\n\"scissors\", 2 represent \"hoof\", and 3 represent \"paper\".  This assignment gives\n2 victories to the first cow (\"1 3\" and \"3 2\"). No other assignment leads to\nmore victories.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=688"
    },
    {
      "title": "Problem 3. Cow Tipping",
      "subtitle": "USACO 2017 January Contest, Bronze",
      "id": 689,
      "year": "2017",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John occasionally has trouble with bored teenagers who visit his farm at\nnight and tip over his cows.  One morning, he wakes up to find it has happened\nagain -- his $N^2$ cows  began the night grazing in a perfect $N \\times N$\nsquare grid arrangement ($1 \\leq N \\leq 10$), but he finds that some of them are\nnow tipped over.  \n\n<p>Fortunately, Farmer John has used parts from his tractor and forklift to build a\nglorious machine, the Cow-Untipperator 3000, that can flip over large groups of\ncows all at once, helping him put all his cows back on their feet as quickly as\npossible.  He can apply the machine to any \"upper-left rectangle\" in his grid of\ncows -- a rectangular sub-grid that contains the upper-left cow.  When he does\nso, the machine flips over every cow in this rectangle,  placing tipped cows\nback on their feet, but unfortunately also tipping over cows that were already\non their feet!  In other words, the machine \"toggles\" the state of each cow in\nthe rectangle.\n\n</p><p>Farmer John figures that by applying his machine sufficiently many times to the\nappropriate collection of rectangles, he can eventually restore all the cows to\ntheir rightful, un-tipped states.  Please help him determine the minimum number\nof applications of his machine needed to do this.  \n\n</p><p>Note that applying the machine to the same rectangle twice would be pointless,\nsince this would have no net impact on the cows in the rectangle.  Therefore,\nyou should only consider applying the machine to each upper-left rectangle\npossibly only once.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowtip.in):</h4>\nThe first line of the input is the integer $N$.\n\n<p>Each of the $N$ subsequent lines contains a string of $N$ characters, each\neither 0 (representing an up-tipped cow) or 1 (representing a tipped cow).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowtip.out):</h4>\nPlease output the minimum number of times Farmer John needs to apply the\nCow-Untipperator 3000 to restore all his cows to their feet.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n001\n111\n111\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this example, if FJ applies his machine to the entire herd of cows (which is\na valid upper-left rectangle), he will\ntoggle their state to the following:\n\n</p><p></p><pre>110\n000\n000\n</pre>\n\n<p>All that remains is to apply the machine to the upper-left rectangle containing\nthe two 1s, and he is finished.  In total, this is just 2 applications.\n\n</p><p>\n</p><p>Problem credits: Nathan Pinsker\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=689"
    },
    {
      "title": "Problem 1. Why Did the Cow Cross the Road",
      "subtitle": "USACO 2017 February Contest, Bronze",
      "id": 711,
      "year": "2017",
      "division": "bronze",
      "number": "1",
      "problem": "While the age-old question of why chickens cross roads has been addressed in\ngreat depth by the scientific community, surprisingly little has been published\nin the research literature on the related subject of cow crossings.  Farmer\nJohn, well-aware of the importance of this issue, is thrilled when he is\ncontacted by a local university asking for his assistance in conducting a\nscientific study of why cows cross roads.  He eagerly volunteers to help.\n\n<p>As part of the study, Farmer John has been asked to document the number of times\neach of his cows crosses the road.  He carefully logs data about his cows'\nlocations, making a series of $N$ observations over the course of a single day. \nEach observation records the ID number of a cow (an integer in the range\n$1 \\ldots 10$, since Farmer John has 10 cows), as well as which side of the road\nthe cow is on.  \n\n</p><p>Based on the data recorded by Farmer John, please help him count the total\nnumber of confirmed crossings.  A confirmed crossing occurs when a consecutive\nsightings of a cow place it on different sides of the road.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file crossroad.in):</h4>\nThe first line of input contains the number of observations, $N$, a positive\ninteger at most 100. Each of the next $N$ lines contains one observation, and\nconsists of a cow ID number followed by its position indicated by either zero or\none (zero for one side of the road, one for the other side).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file crossroad.out):</h4>\nPlease compute the total number of confirmed crossings.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8\n3 1\n3 0\n6 0\n2 1\n4 1\n3 0\n4 0\n3 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example, cow 3 crosses twice -- she first appears on side 1, then later appears\non side 0, and then later still appears back on side 1. Cow 4 definitely crosses\nonce.  Cows 2 and 6 do not appear to cross.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=711"
    },
    {
      "title": "Problem 2. Why Did the Cow Cross the Road II",
      "subtitle": "USACO 2017 February Contest, Bronze",
      "id": 712,
      "year": "2017",
      "division": "bronze",
      "number": "2",
      "problem": "The layout of Farmer John's farm is quite peculiar, with a large circular road\nrunning around the perimeter of the main field on which his cows graze during\nthe day. Every morning, the cows cross this road on their way towards the field,\nand every evening they all cross again as they leave the field and return to the\nbarn.\n\n<p>As we know, cows are creatures of habit, and they each cross the road the same\nway every day.  Each cow crosses into the field at a different point from where\nshe crosses out of the field, and all of these crossing points are distinct from\neach-other. Farmer John owns exactly 26 cows, which he has lazily named A\nthrough Z (he is not sure what he will do if he ever acquires a  27th cow...),\nso there are precisely 52 crossing points around the road.  Farmer John records\nthese crossing points concisely by scanning around the circle clockwise, writing\ndown the name of the cow for each crossing point, ultimately forming a string\nwith 52 characters in which each letter of the alphabet appears exactly twice. \nHe does not record which crossing points are entry points and which are\nexit points.\n\n</p><p>Looking at his map of crossing points, Farmer John is curious how many times\nvarious pairs of cows might cross paths during the day.  He calls a pair of cows\n$(a,b)$ a \"crossing\" pair if cow $a$'s path from entry to exit must cross cow\n$b$'s path from entry to exit.  Please help Farmer John count the total number\nof crossing pairs.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file circlecross.in):</h4>\nThe input consists of a single line containing a string of 52 upper-case\ncharacters.  Each letter of the alphabet appears exactly twice.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file circlecross.out):</h4>\nPlease print the total number of crossing pairs.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">ABCCABDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYYZZ\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>In this example, only cows A and B are a crossing pair.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=712"
    },
    {
      "title": "Problem 3. Why Did the Cow Cross the Road III",
      "subtitle": "USACO 2017 February Contest, Bronze",
      "id": 713,
      "year": "2017",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John, in his old age, has unfortunately become increasingly grumpy and\nparanoid.  Forgetting the extent to which bovine diversity helped his farm truly\nflourish over the years, he has recently decided to build a huge fence around\nthe farm, discouraging cows from neighboring farms from visiting, and completely\nprohibiting entry from  a handful of neighboring farms.  The cows are quite\nupset by this state of affairs, not only since they can no longer visit with\ntheir friends, but since it has caused them to cancel participation in the\nInternational Milking Olympiad, an event to which they look forward all year.\n\n<p>Neighboring cows that still have the ability to enter Farmer John's property\nfind the process has become more arduous, as they can enter only through a\nsingle gate where each cow is subject to intense questioning, often causing the\ncows to queue up in a long line.\n\n</p><p>For each of the $N$ cows visiting the farm, you are told the time she arrives \nat the gate and the duration of time required for her to answer her entry\nquestions. Only one cow can be undergoing questioning at any given time, so if\nmany cows arrive near the same time, they will likely need to wait in line to be\nprocessed one by one.  For example, if a cow arrives at time 5 and answers\nquestions for 7 units of time, another cow arriving at time 8 would need to wait\nuntil time 12 to start answering questions herself.\n\n</p><p>Please determine the earliest possible time by which all cows are able to enter\nthe farm.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowqueue.in):</h4>\nThe first line of input contains $N$, a positive integer at most 100. Each of\nthe next $N$ lines describes one cow, giving the time it arrives and the time it\nrequires for questioning; each of these numbers are positive integers at most\n1,000,000.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowqueue.out):</h4>\nPlease determine the minimum possible time at which all the cows could have\ncompleted processing.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n2 1\n8 3\n5 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">15\n</pre>\n\n<p>Here, first cow arrives at time 2 and is quickly processed.  The gate remains\nbriefly idle until the third cow arrives at time 5, and begins processing.  The\nsecond cow then arrives at time 8 and waits until time 5+7=12 to start answering\nquestions, finishing at time 12+3 = 15.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=713"
    },
    {
      "title": "Problem 1. The Lost Cow",
      "subtitle": "USACO 2017 US Open Contest, Bronze",
      "id": 735,
      "year": "2017",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John has lost his prize cow Bessie, and he needs to find her!\n\n<p>Fortunately, there is only one long path running across the farm, and Farmer\nJohn knows that Bessie has to be at some location on this path.  If we think of\nthe path as a number line, then Farmer John is currently at position $x$ and\nBessie is currently at position $y$ (unknown to Farmer John).  If Farmer John\nonly knew where Bessie was located, he could walk directly to her, traveling a\ndistance of $|x - y|$.  Unfortunately, it is dark outside and Farmer John can't\nsee anything.  The only way he can find Bessie is to walk back and forth until\nhe eventually reaches her position.\n\n</p><p>Trying to figure out the best strategy for walking back and forth in his search,\nFarmer John consults the computer science research literature and is\nsomewhat amused to find that this exact problem has not only been studied by\ncomputer scientists in the past, but that it is actually called the \"Lost Cow\nProblem\" (this is actually true!).\n\n</p><p>The recommended solution for Farmer John to find Bessie is to move to position\n$x+1$, then reverse direction and move to position $x-2$, then to position\n$x+4$, and so on, in a  \"zig zag\" pattern, each step moving twice as far from\nhis initial starting position as before.  As he has read during his study of algorithms\nfor solving the lost cow problem, this approach guarantees that he will at worst\ntravel 9 times the direct distance $|x-y|$ between himself and Bessie before he\nfinds her (this is also true, and the factor of 9 is actually the smallest such\nworst case guarantee any strategy can achieve).\n\n</p><p>Farmer John is curious to verify this result.  Given $x$ and $y$, please compute\nthe  total distance he will travel according to the zig-zag search strategy above\nuntil he finds Bessie.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file lostcow.in):</h4>\nThe single line of input contains two distinct space-separated integers $x$ and\n$y$.  Both are in the range $0 \\ldots 1,000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file lostcow.out):</h4>\nPrint one line of output, containing the distance Farmer John will travel to\nreach Bessie.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=735"
    },
    {
      "title": "Problem 2. Bovine Genomics",
      "subtitle": "USACO 2017 US Open Contest, Bronze",
      "id": 736,
      "year": "2017",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John owns $N$ cows with spots and $N$ cows without spots.  Having just\ncompleted a course in bovine genetics, he is convinced that the spots on his\ncows are caused by mutations at a single location in the bovine genome.\n\n<p>At great expense, Farmer John sequences the genomes of his cows.  Each genome is\na  string of length $M$ built from the four characters A, C, G, and T.  When he\nlines up the genomes of his cows, he gets a table like the following, shown here\nfor $N=3$:\n\n</p><p></p><pre>Positions:    1 2 3 4 5 6 7 ... M\n\nSpotty Cow 1: A A T C C C A ... T\nSpotty Cow 2: G A T T G C A ... A\nSpotty Cow 3: G G T C G C A ... A\n\nPlain Cow 1:  A C T C C C A ... G\nPlain Cow 2:  A C T C G C A ... T\nPlain Cow 3:  A C T T C C A ... T\n</pre>\n\n<p>Looking carefully at this table, he surmises that position 2 is a potential\nlocation in the genome that could explain spottiness.  That is, by looking at\nthe character in just this position, Farmer John can predict which of his cows\nare spotty and which are not (here, A or G means spotty and C means plain; T is\nirrelevant since it does not appear in any of Farmer John's cows at position 2).\nPosition 1 is not sufficient by itself to explain spottiness, since an A in this\nposition might indicate a spotty cow or a plain cow.\n\n</p><p>Given the genomes of Farmer John's cows, please count the number of locations\nthat could potentially, by themselves, explain spottiness.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cownomics.in):</h4>\nThe first line of input contains $N$ and $M$, both positive integers of size at\nmost 100. The next $N$ lines each contain a string of $M$ characters; these\ndescribe the genomes of the spotty cows.  The final $N$ lines describe the\ngenomes of the plain cows.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cownomics.out):</h4>\nPlease count the number of positions (an integer in the range $0 \\ldots M$) in\nthe genome that could potentially explain spottiness.  A location potentially\nexplains spottiness if the spottiness trait can be predicted with perfect\naccuracy among Farmer John's population of cows by looking at just this one\nlocation in the genome.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 8\nAATCCCAT\nGATTGCAA\nGGTCGCAA\nACTCCCAG\nACTCGCAT\nACTTCCAT\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=736"
    },
    {
      "title": "Problem 3. Modern Art",
      "subtitle": "USACO 2017 US Open Contest, Bronze",
      "id": 737,
      "year": "2017",
      "division": "bronze",
      "number": "3",
      "problem": "Art critics worldwide have only recently begun to recognize the creative genius\nbehind the  great bovine painter, Picowso.\n\n<p>Picowso paints in a very particular way.  She starts with an $N \\times N$ blank\ncanvas, represented by an $N \\times N$ grid of zeros, where a zero indicates an\nempty cell of the canvas.  She then draws 9 rectangles on the canvas, one in\neach of 9 colors (conveniently numbered $1 \\ldots 9$).  For example, she might\nstart by painting a rectangle in color 2, giving this intermediate canvas:\n\n</p><p></p><pre>2220 \n2220 \n2220 \n0000\n</pre>\n\n<p>She might then paint a rectangle in color 7:\n\n</p><p></p><pre>2220 \n2777 \n2777 \n0000\n</pre>\n\n<p>And then she might paint a small rectangle in color 3:\n\n</p><p></p><pre>2230 \n2737 \n2777 \n0000\n</pre>\n\n<p>Each rectangle has sides parallel to the edges of the canvas, and a rectangle\ncould be as large as the entire canvas or as small as a single cell.  Each color\nfrom $1 \\ldots 9$ is used exactly once, although later colors might completely\ncover up some of the earlier colors.\n\n</p><p>Given the final state of the canvas, please count how many of the colors still\nvisible on the canvas could have possibly been the first to be painted.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file art.in):</h4>\nThe first line of input contains $N$, the size of the canvas\n($1 \\leq N \\leq 10$).  The next $N$ lines describe the final picture of the\ncanvas, each containing $N$ numbers that are in the range $0 \\ldots 9$.  The\ninput is guaranteed to have been drawn as described above, by painting\nsuccessive rectangles in different colors.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file art.out):</h4>\nPlease output a count of the number of colors that could have been drawn first,\nfrom among all colors visible in the final canvas. \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n2230\n2737\n2777\n0000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>In this example, only color 2 could have been the first to be painted.  Color 3 clearly had to have been painted after color 7, and\ncolor 7 clearly had to have been painted after color 2.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=737"
    },
    {
      "title": "Problem 1. Blocked Billboard",
      "subtitle": "USACO 2017 December Contest, Bronze",
      "id": 759,
      "year": "2017",
      "division": "bronze",
      "number": "1",
      "problem": "During long milking sessions, Bessie the cow likes to stare out the window of\nher barn  at two huge rectangular billboards across the street advertising\n\"Farmer Alex's Amazingly Appetizing Alfalfa\" and \"Farmer Greg's Great Grain\". \nPictures of these two cow feed products on the billboards look much tastier to\nBessie than the grass from her farm.\n\n<p>One day, as Bessie is staring out the window, she is alarmed to see a huge\nrectangular  truck parking across the street.  The side of the truck has an\nadvertisement for \"Farmer Smith's Superb Steaks\", which Bessie doesn't quite\nunderstand, but she is mostly concerned about the truck potentially blocking the\nview of her two favorite billboards.\n\n</p><p>Given the locations of the two billboards and the location of the truck, please\ncalculate the  total combined area of both billboards that is still visible.  It\nis possible that the truck obscures neither, both, or only one of the\nbillboards.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file billboard.in):</h4>\nThe first line of input contains four space-separated integers: $x_1$ $y_1$\n$x_2$ $y_2$, where $(x_1, y_1)$ and $(x_2, y_2)$ are the coordinates of the\nlower-left and upper-right corners of the first billboard in Bessie's 2D field\nof view.  The next line contains four more integers, similarly specifying the\nlower-left and upper-right corners of the second billboard.  The third and final\nline of input contains four integers specifying the lower-left and upper-right\ncorners of the truck.  All coordinates are in the range -1000 to +1000.  The two\nbillboards are guaranteed not to have any positive area of overlap between\nthemselves.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file billboard.out):</h4>\nPlease output the total combined area of both billboards that remains visible.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 2 3 5\n6 0 10 4\n2 1 8 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">17\n</pre>\n\n<p>Here, 5 units of area from the first billboard and 12 units of area from the \nsecond billboard remain visible.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=759"
    },
    {
      "title": "Problem 2. The Bovine Shuffle",
      "subtitle": "USACO 2017 December Contest, Bronze",
      "id": 760,
      "year": "2017",
      "division": "bronze",
      "number": "2",
      "problem": "Convinced that happy cows generate more milk, Farmer John has installed a giant\ndisco ball in his barn and plans to teach his cows to dance!\n\n<p>Looking up popular cow dances, Farmer John decides to teach his cows the \"Bovine\nShuffle\". The Bovine Shuffle consists of his $N$ cows ($1 \\leq N \\leq 100$)\nlining up in a row in some order, then  performing three \"shuffles\" in a row,\nafter which they will be lined up in some possibly different order.  To make it\neasier for his cows to locate themselves, Farmer  John marks the locations for\nhis line of cows with positions $1 \\ldots N$, so the  first cow in the lineup\nwill be in position 1, the next in position 2, and so on, up to position $N$.\n\n</p><p>A shuffle is described with N numbers, $a_1 \\ldots a_N$, where the cow in\nposition $i$ moves to position $a_i$ during the shuffle (and so, each $a_i$ is\nin the range $1 \\ldots N$).  Every cow moves to its new location during the\nshuffle.  Fortunately, all the $a_i$'s are distinct, so no  two cows try to move\nto the same position during a shuffle.  \n\n</p><p>Farmer John's cows are each assigned distinct 7-digit integer ID numbers. If you\nare given the ordering of the cows after three shuffles, please determine their\ninitial order.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file shuffle.in):</h4>\nThe first line of input contains $N$, the number of cows.  The next line\ncontains  the $N$ integers $a_1 \\ldots a_N$.  The final line contains the order\nof the $N$ cows after three shuffles, with each cow specified by its ID number.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file shuffle.out):</h4>\nYou should write $N$ lines of output, with a single cow ID per line, specifying\nthe  order of the cows before the three shuffles.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1 3 4 5 2\n1234567 2222222 3333333 4444444 5555555\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1234567\n5555555\n2222222\n3333333\n4444444\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=760"
    },
    {
      "title": "Problem 3. Milk Measurement",
      "subtitle": "USACO 2017 December Contest, Bronze",
      "id": 761,
      "year": "2017",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John purchases three cows: Bessie, Elsie, and Mildred, each of whom\ninitially produces 7 gallons of milk per day.  Since the milk output of a cow is\nknown to potentially change over time, Farmer John takes periodic measurements\nover the next 100 days and scribbles them down in a log book.  Entries in his\nlog look like this:\n\n<p></p><pre>35 Bessie -2\n14 Mildred +3\n</pre>\n\n<p>The first entry indicates that on day 35, Bessie's milk output was 2 gallons\nlower than it was when last measured.  The next entry indicates that on day 14,\nMildred's  milk output increased by 3 gallons from when it was last measured. \nFarmer John has only enough time to make at most one measurement on any given\nday.  Unfortunately, he is a bit disorganized, and doesn't necessarily write\ndown his measurements in chronological order.  \n\n</p><p>To keep his cows motivated, Farmer John proudly displays on the wall of his barn\nthe picture of whichever cow currently has the highest milk output (if several\ncows tie for the highest milk output, he displays all of their pictures). \nPlease determine the number of days on which Farmer John would have needed to\nchange this display.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file measurement.in):</h4>\nThe first line of input contains $N$, the number of measurements Farmer John\nmakes. Each of the next $N$ lines contains one measurement, in the format above,\nspecifying  a day (an integer in the range 1..100), the name of a cow, and the\nchange in her  milk output since it was last measured (a nonzero integer).  Each\ncow's milk output will always be in the  range 0..1000.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file measurement.out):</h4>\nPlease output the number of days (an integer in the range 0..100) on which\nFarmer John needs to adjust his motivational display.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n7 Mildred +3\n4 Elsie -1\n9 Mildred -1\n1 Bessie +2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>Initially, all cows have milk output 7.  On day 1, Bessie's milk output\nincreases to 9, making her the unique cow with highest milk output and causing\nFarmer John to change his display.  On day 4, Elsie's milk output decreases to\n6, but this does not change the fact that Bessie is the sole cow in the lead. \nOn day 7, Mildred jumps into the  lead, changing the display, and on day 9,\nMildred drops in production to be tied with Bessie, again changing the display.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=761"
    },
    {
      "title": "Problem 1. Blocked Billboard II",
      "subtitle": "USACO 2018 January Contest, Bronze",
      "id": 783,
      "year": "2018",
      "division": "bronze",
      "number": "1",
      "problem": "Bessie the cow used to have such a nice view from her barn, looking across road\nat a set of two billboards advertising delicious looking cow feed.  \nUnfortunately, one of these billboards has recently been updated so it\nnow advertises \"Farmer Larry's Lawnmowers\".  Bessie is not a fan of\nlawnmowers since their only purpose, as far as she can tell, is cutting back the\ngrass in her field that she finds so tasty (if you haven't noticed, much of\nBessie's thought process revolves around food).\n\n<p>Fortunately, the remaining cow feed billboard is situated in front of the \nlawnmower billboard, potentially obscuring it.\n\n</p><p>Bessie, determined to remove the offensive lawnmower billboard completely from\nher view, hatches a risky plan. She plans to steal a large rectangular tarp from\nthe barn and sneak out late at night to cover the remaining portion of the\nlawnmower billboard, so that she can no longer see any part of it.\n\n</p><p>Given the locations of the two billboards, please help Bessie compute the\nminimum area of the tarp she will need.  Since the only tarps available in the\nbarn are rectangular in size, Bessie observes that she may conceivably need a\ntarp whose area is slightly larger than the exposed area of the lawnmower\nbillboard, as illustrated in the example below.  The tarp may only be placed\nsuch that its sides are parallel to those of the other billboards (i.e., it\ncannot be \"tilted\").\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file billboard.in):</h4>\nThe first line of input contains four space-separated integers: $x_1$ $y_1$\n$x_2$ $y_2$, where $(x_1, y_1)$ and $(x_2, y_2)$ are the coordinates of the\nlower-left and upper-right corners of the lawnmower billboard in Bessie's 2D\nfield of view.  The next line contains four more integers, similarly specifying\nthe lower-left and upper-right corners of the cow feed billboard.  The cow feed\nbillboard may obscure all, some, or none of the lawnmower billboard. All\ncoordinates are in the range -1000 to +1000. \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file billboard.out):</h4>\nPlease output the minimum area of the tarp Bessie needs to use to cover part of\nthe lawnmower billboard so that it becomes completely obscured.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 1 7 4\n5 -1 10 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">15\n</pre>\n\n<p>Here, the cow feed billboard obscures the lower right corner of the lawnmower\nbillboard, but this doesn't really help, since Bessie still needs to use a tarp\nwhose size is as large as the entire lawnmower billboard.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=783"
    },
    {
      "title": "Problem 2. Lifeguards",
      "subtitle": "USACO 2018 January Contest, Bronze",
      "id": 784,
      "year": "2018",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John has opened a swimming pool for his cows, figuring it will help them\nrelax and produce more milk.  \n\n<p>To ensure safety, he hires $N$ cows as lifeguards, each of which has a shift\nthat covers some contiguous interval of time during the day.  For simplicity,\nthe pool is open from time $t=0$ until time $t=1000$ on a daily basis, so each shift can\nbe described by two integers, giving the time at which a cow starts and ends her\nshift.  For example, a lifeguard starting at time $t = 4$ and ending at  time\n$t = 7$ covers three units of time (note that the endpoints are \"points\" in\ntime).\n\n</p><p>Unfortunately, Farmer John hired 1 more lifeguard than he has the funds to\nsupport.  Given that he must fire exactly one lifeguard, what is the maximum\namount of time that can still be covered by the shifts of the remaining\nlifeguards?  An interval of time is covered if at least one lifeguard is\npresent.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file lifeguards.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100$). Each of the next $N$ lines describes a lifeguard in\nterms of two integers in the  range $0 \\ldots 1000$, giving the starting and ending\npoint of a lifeguard's shift. All such endpoints are distinct.  Shifts of\ndifferent lifeguards might overlap.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file lifeguards.out):</h4>\nPlease write a single number, giving the maximum amount of time that can still\nbe covered if Farmer John fires 1 lifeguard.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n5 9\n1 4\n3 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">7\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=784"
    },
    {
      "title": "Problem 3. Out of Place",
      "subtitle": "USACO 2018 January Contest, Bronze",
      "id": 785,
      "year": "2018",
      "division": "bronze",
      "number": "3",
      "problem": "Feeling ambitious, Farmer John plans to attempt something that never seems to go\nquite right: he wants to take a photograph of his entire herd of cows.\n\n<p>To make the photograph look nice, he wants the cows to line up in a single row\nfrom shortest to tallest. Unfortunately, right after he has the cows line up\nthis way, Bessie the cow, always the troublemaker, steps out of line and\nre-inserts herself at some other location in the lineup!\n\n</p><p>Farmer John would like to swap pairs of cows so the entire herd is again lined\nup properly. Please help him determine the minimum number of swaps he needs to\nmake between pairs of cows in order to achieve this goal.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file outofplace.in):</h4>\nThe first line of input contains $N$ ($2 \\leq N \\leq 100$).  The next $N$ lines\ndescribe the heights of the cows as they are lined up after Bessie makes her\nmove. Each cow height is an integer in the range $1 \\ldots 1,000,000$.  Cows may\nhave the same height.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file outofplace.out):</h4>\nPlease output the minimum number of times Farmer John needs to swap pairs of\ncows in order to achieve a proper ordering.  Swaps do not necessarily need to\ninvolve adjacent cows in the ordering.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n2\n4\n7\n7\n9\n3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example, Bessie is clearly the cow of height 3. FJ return the cows to sorted order\nusing three swaps as described below:\n\n</p><p></p><pre>2 4 7 7 9 3 - Original Lineup\n2 4 7 7 3 9 - Swap the last two cows\n2 4 3 7 7 9 - Swap the first 7 and 3\n2 3 4 7 7 9 - Swap 4 and 3\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=785"
    },
    {
      "title": "Problem 1. Teleportation",
      "subtitle": "USACO 2018 February Contest, Bronze",
      "id": 807,
      "year": "2018",
      "division": "bronze",
      "number": "1",
      "problem": "One of the farming chores Farmer John dislikes the most is hauling around lots\nof cow manure.  In order to streamline this process, he comes up with a\nbrilliant invention: the manure teleporter!  Instead of hauling manure between\ntwo points in a cart behind his tractor, he can use the manure teleporter to\ninstantly transport manure from  one location to another.\n\n<p>Farmer John's farm is built along a single long straight road, so any location\non his farm can be described simply using its position along this road\n(effectively a point on the number line).  A teleporter is described by two\nnumbers $x$ and $y$, where manure brought to location $x$ can be instantly\ntransported to location $y$, or vice versa. \n\n</p><p>Farmer John wants to transport manure from location $a$ to location $b$, and he\nhas built a teleporter that might be helpful during this process (of course, he\ndoesn't need to use the teleporter if it doesn't help).  Please help him\ndetermine the minimum amount of total distance he needs to haul the manure using\nhis tractor.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file teleport.in):</h4>\nThe first and only line of input contains four space-separated integers: $a$ and $b$, describing the start and end locations, followed by $x$ and $y$, describing the teleporter. All positions are integers in the range\n$0 \\ldots 100$, and they are not necessarily distinct from each-other.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file teleport.out):</h4>\nPrint a single integer giving the minimum distance Farmer John needs to haul\nmanure in his tractor.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 10 8 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example, the best strategy is to haul the manure from position 3 to\nposition 2, teleport it to position 8, then haul it to position 10.   The total\ndistance requiring the tractor is therefore 1 + 2 = 3.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=807"
    },
    {
      "title": "Problem 2. Hoofball",
      "subtitle": "USACO 2018 February Contest, Bronze",
      "id": 808,
      "year": "2018",
      "division": "bronze",
      "number": "2",
      "problem": "In preparation for the upcoming hoofball tournament, Farmer John is drilling his\n$N$ cows (conveniently numbered $1\\dots N$, where $1 \\leq N \\leq 100$) in\npassing the ball. The cows are all standing along a very long line on one side\nof the barn, with cow $i$ standing $x_i$ units away from the barn\n($1 \\leq x_i \\leq 1000$).  Each cow is standing at a distinct location.\n\n<p>At the beginning of the drill, Farmer John will pass several balls to different\ncows. When cow $i$ receives a ball, either from Farmer John or from another cow,\nshe will pass the ball to the cow nearest her (and if multiple cows are the same\ndistance from her, she will pass the ball to the cow farthest to the left among\nthese).  So that all cows get at least a little bit of practice passing, Farmer\nJohn wants to make sure that every cow will hold a ball at least once. Help him\nfigure out the minimum number of balls he needs to distribute initially to\nensure this can happen, assuming he hands the balls to an appropriate initial\nset of cows.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file hoofball.in):</h4>\nThe first line of input contains $N$. The second line contains $N$\nspace-separated integers, where the $i$th integer is $x_i$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file hoofball.out):</h4>\nPlease output the minimum number of balls Farmer John must initially pass to the\ncows, so that every cow can hold a ball at least once.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n7 1 3 11 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In the above example, Farmer John should pass a ball to the cow at $x=1$ and\npass a ball to the cow at $x=11$. The cow at $x=1$ will pass her ball to the cow\nat $x=3$, after which this ball will oscillate between the cow at $x=3$ and the\ncow at $x=4$. The cow at $x=11$ will pass her ball to the cow at $x=7$, who will\npass the ball to the cow at $x=4$, after which this ball will also cycle between\nthe cow at $x=3$ and the cow at $x=4$. In this way, all cows will be passed a\nball at least once (possibly by Farmer John, possibly by another cow).\n\n</p><p>It can be seen that there is no single cow to whom Farmer John could initially pass a ball\nso that every cow would eventually be passed a ball.\n\n</p><p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=808"
    },
    {
      "title": "Problem 3. Taming the Herd",
      "subtitle": "USACO 2018 February Contest, Bronze",
      "id": 809,
      "year": "2018",
      "division": "bronze",
      "number": "3",
      "problem": "Early in the morning, Farmer John woke up to the sound of splintering wood. It\nwas the cows, and they were breaking out of the barn again!\n\n<p>Farmer John was sick and tired of the cows' morning breakouts, and he decided\nenough was enough: it was time to get tough. He nailed to the barn wall a\ncounter tracking the number of days since the last breakout. So if a breakout\noccurred in the morning, the counter would be $0$ that day; if the most recent\nbreakout was $3$ days ago, the counter would read $3$. Farmer John meticulously\nlogged the counter every day.\n\n</p><p>The end of the year has come, and Farmer John is ready to do some accounting.\nThe cows will pay, he says! But lo and behold, some entries of his log are\nmissing!  \n\n</p><p>Farmer John is confident that the he started his log on the day of a breakout. \nPlease help him determine, out of all sequences of events consistent with the\nlog entries that remain, the minimum and maximum number of breakouts that may\nhave take place over the course of the logged time. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file taming.in):</h4>\nThe first line contains a single integer $N$ ($1 \\leq N \\leq 100$), denoting the\nnumber of days since Farmer John started logging the cow breakout counter.\n\n<p>The second line contains $N$ space-separated integers. The $i$th integer is\neither $-1$, indicating that the log entry for day $i$ is missing, or a\nnon-negative integer $a_i$ (at most $100$), indicating that on day $i$ the counter\nwas at\n$a_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file taming.out):</h4>\nIf there is no sequence of events consistent with Farmer John's partial log and\nhis knowledge that the cows definitely broke out of the barn on the morning of\nday $1$, output a single integer $-1$.  Otherwise, output two space-separated\nintegers $m$ followed by $M$, where $m$ is the minimum number of breakouts of\nany consistent sequence of events, and $M$ is the maximum.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n-1 -1 -1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2 3\n</pre>\n\n<p>In this example, we can deduce that a breakout had to occur on day 3.  Knowing\nthat  a breakout also occurred on day 1, the only remaining bit of uncertainty\nis whether a breakout occurred on day 2.  Hence, there were between 2 and 3\nbreakouts in total.\n\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=809"
    },
    {
      "title": "Problem 1. Team Tic Tac Toe",
      "subtitle": "USACO 2018 US Open Contest, Bronze",
      "id": 831,
      "year": "2018",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John owns 26 cows, which by happenstance all have names starting with\ndifferent letters of the alphabet, so Farmer John typically refers to each cow\nusing her first initial -- a character in the range $A \\ldots Z$.   \n\n<p>The cows have recently become fascinated by the game of tic-tac-toe, but since\nthey don't like the fact that only two cows can play at a time, they have\ninvented a variant where multiple cows can play at once!  Just like with regular\ntic-tac-toe, the game is played on a $3 \\times 3$ board, only instead of just Xs\nand Os, each square is marked with a single  character in the range $A \\ldots Z$\nto indicate the initial of the cow who  claims that square.  \n\n</p><p>An example of a gameboard might be:\n\n</p><p></p><pre>COW\nXXO\nABC\n</pre>\n\n<p>The cows fill in each of the nine squares before they become confused about how\nto figure out who has won the game.  Clearly, just like with regular\ntic-tac-toe, if any single cow has claimed an entire row, column, or diagonal,\nthat cow could claim victory by herself.  However, since the cows think this\nmight not be likely given the larger number of players, they decide to allow\ncows to form teams of  two, where a team of two cows can claim victory if any\nrow, column, or diagonal consists only of characters belonging to the two cows\non the team, and moreover if characters from both cows (not just one) are used\nin this row, column, or diagonal.\n\n</p><p>Please help the cows figure out how many individuals or two-cow teams can claim\nvictory.  Note that the same square on the game board might possibly be usable\nin several different claims to victory.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file tttt.in):</h4>\nThe input consists of three lines, each of which is three characters in the\nrange $A \\ldots Z$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file tttt.out):</h4>\nOutput should consist of two lines.  On the first line, output the number of\nindividual cows who can claim victory.  On the second line, output the number\nof two-cow teams that could claim victory.  \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">COW\nXXO\nABC\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n2\n</pre>\n\n<p>In this example, no single cow can claim victory.  However, if cows C and X team\nup, they can win via the C-X-C diagonal.  Also, if cows X and O team up, they\ncan win via the middle row.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=831"
    },
    {
      "title": "Problem 2. Milking Order",
      "subtitle": "USACO 2018 US Open Contest, Bronze",
      "id": 832,
      "year": "2018",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John's $N$ cows ($2 \\leq N \\leq 100$), conveniently numbered $1 \\ldots N$\nas always, happen to have too much time on their hooves.  As a result, they have\nworked out a complex social structure related to the order in which Farmer John\nmilks them every morning.  After weeks of study, Farmer John has discovered that\nthis structure is based on two key properties.\n\n<p>First, due to the cows' social hierarchy, some cows insist on being milked\nbefore other cows, based on the social status level of each cow.  For example, \nif cow 3 has the highest status, cow 2 has average status, and cow 5 has low\nstatus, then cow 3 would need to be milked earliest, followed later by cow 2 and\nfinally  by cow 5.\n\n</p><p>Second, some cows only allow themselves to be milked at a certain position\nwithin the ordering.  For example, cow 4 might insist on being milked second\namong all the cows.\n\n</p><p>Luckily, Farmer John will always be able to milk his cows in an order satisfying\nall of these conditions.\n\n</p><p>Unfortunately, cow 1 has recently fallen ill, so Farmer John wants to milk this\ncow as early in the order as possible so that she can return to the barn and get\nsome much-needed rest.  Please help Farmer John determine the earliest position\ncow 1 can appear in the milking order.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file milkorder.in):</h4>\nThe first line contains $N$, $M$ ($1 \\leq M &lt; N$), and $K$ ($1 \\leq K &lt; N$),\nindicating that Farmer John has $N$ cows, $M$ of his cows have arranged\nthemselves into a social hierarchy, and $K$ of his cows demand that they be\nmilked in a specific position in the order.  The next line contains $M$ distinct\nintegers $m_i$ ($1 \\leq m_i \\leq N$). The cows present on this line must be\nmilked in the same order in which they appear in this line.  The next $K$ lines\ncontain two integers $c_i$ ($1 \\leq c_i \\leq N$) and $p_i$\n($1 \\leq p_i \\leq N$), indicating that cow $c_i$ must be milked in position\n$p_i$.  \n\n<p>It is guaranteed that under these constraints, Farmer John will be able to\nconstruct a valid milking order.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file milkorder.out):</h4>\nPlease output the earliest position cow 1 can take in the milking order.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 3 2\n4 5 6\n5 3\n3 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>In this example, Farmer John has six cows, with cow 1 being sick.  He needs  to\nmilk cow 4 before cow 5 and cow 5 before cow 6.  Moreover, Farmer John has to\nmilk cow 3 first and cow 5 third.  \n\n</p><p>FJ has to milk cow 3 first, and since cow 4 has to come before cow 5, cow 4 must\nbe milked second, and cow 5 third.  Thus, cow 1 can be fourth at earliest in the\norder.  \n\n</p><p>\n</p><p>Problem credits: Jay Leeds\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=832"
    },
    {
      "title": "Problem 3. Family Tree",
      "subtitle": "USACO 2018 US Open Contest, Bronze",
      "id": 833,
      "year": "2018",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John owns a family-run farm that has been passed down over several\ngenerations, with a herd of cows whose familial roots can similarly be traced\nback several generations on the same farm.  By examining old records, Farmer\nJohn is curious how the cows in his current herd are related to each-other.\nPlease help him in this endeavor!\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file family.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100$) followed by the names\nof two cows.  Cow names are each strings of at most 10 uppercase letters\n($A \\ldots Z$). Farmer John is curious about the relationship between the two\ncows on this line of input.  \n\n<p>The next $N$ lines each contain two cow names $X$ and $Y$, indicating that $X$\nis the mother of $Y$.  \n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file family.out):</h4>\nYou should print one line of output indicating the relationship between the two\ncows specified on the first line of input (for simplicity, let's call these two\ncows BESSIE and ELSIE for the examples below).  Here are the different types of\nrelationships that are possible:\n<ul><li>You should output \"SIBLINGS\" if BESSIE and ELSIE have the same mother.</li><li>BESSIE might be a direct descendant of ELSIE, meaning that ELSIE is either\nthe mother, grand-mother, great-grand-mother, great-great-grand-mother, etc., of\nBESSIE. If this is the case, you should print \"ELSIE is the (relation) of\nBESSIE\", where (relation) is the appropriate relationship, for example\n\"great-great-grand-mother\".</li><li>If ELSIE is a child of an ancestor of\nBESSIE (and ELSIE is not herself an ancestor or sister of BESSIE), then ELSIE is BESSIE's aunt.\nYou should output \"ELSIE is the aunt of\nBESSIE\" if ELSIE is a child of BESSIE's grand-mother, \"ELSIE is the great-aunt\nof BESSIE\" if ELSIE is a child of BESSIE's great-grand-mother, \"ELSIE is the\ngreat-great-aunt of BESSIE\" if ELSIE is a child of BESSIE's\ngreat-great-grand-mother, and so on.</li><li>If BESSIE and ELSIE are related by\nany other means (i.e., if they share a common ancestor), they are cousins, and\nyou should simply output \"COUSINS\".</li><li>You should output \"NOT RELATED\" if\nBESSIE and ELSIE have no common ancestor, or neither is directly descended from\nthe other.</li></ul>\n</div>\n\n<p>The following diagram helps illustrate the relationships above, which are the\nonly relationship types you need to consider.  Observe that \nsome relationships like \"niece\" (daughter of sister) are not necessary since if\nBESSIE is the niece of ELSIE, then ELSIE is BESSIE's aunt.\n\n</p><p></p><figure><img src=\"https://usaco.org/current/data/fig_familytree_bronze_open18.png\"><figcaption></figcaption></figure>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 AA BB\nMOTHER AA\nGGMOTHER BB\nMOTHER SISTER\nGMOTHER MOTHER\nGMOTHER AUNT\nAUNT COUSIN\nGGMOTHER GMOTHER\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">BB is the great-aunt of AA\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=833"
    },
    {
      "title": "Problem 1. Mixing Milk",
      "subtitle": "USACO 2018 December Contest, Bronze",
      "id": 855,
      "year": "2018",
      "division": "bronze",
      "number": "1",
      "problem": "Farming is competitive business -- particularly milk production.  Farmer John\nfigures that if he doesn't innovate in his milk production methods, his dairy\nbusiness could get creamed!\n\n<p>Fortunately, Farmer John has a good idea.  His three prize dairy cows Bessie,\nElsie, and Mildred each produce milk with a slightly different taste, and he\nplans to mix these together to get the perfect blend of flavors. \n\n</p><p>To mix the three different milks, he takes three buckets containing milk from\nthe three cows.  The buckets may have different sizes, and may not be completely\nfull.  He then pours bucket 1 into bucket 2, then bucket 2 into bucket 3, then\nbucket 3  into bucket 1, then bucket 1 into bucket 2, and so on in a cyclic\nfashion, for a total of 100 pour operations (so the 100th pour would be from\nbucket 1 into bucket 2).  When Farmer John pours from bucket $a$ into bucket\n$b$, he pours as much milk as possible until either bucket $a$ becomes empty or\nbucket $b$ becomes full.\n\n</p><p>Please tell Farmer John how much milk will be in each bucket after he finishes\nall 100 pours.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file mixmilk.in):</h4>\nThe first line of the input file contains two space-separated integers: the\ncapacity $c_1$ of the first bucket, and the amount of milk $m_1$ in the first\nbucket. Both $c_1$ and $m_1$ are positive and at most 1 billion, with\n$c_1 \\geq m_1$. The second and third lines are similar, containing capacities\nand milk amounts for the  second and third buckets.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file mixmilk.out):</h4>\nPlease print three lines of output, giving the final amount of milk in each\nbucket, after  100 pour operations.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 3\n11 4\n12 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n10\n2\n</pre>\n\n<p>In this example, the milk in each bucket is as follows during the sequence of\npours:\n\n</p><p></p><pre>Initial State: 3  4  5\n1. Pour 1-&gt;2:  0  7  5\n2. Pour 2-&gt;3:  0  0  12\n3. Pour 3-&gt;1:  10 0  2\n4. Pour 1-&gt;2:  0  10 2\n5. Pour 2-&gt;3:  0  0  12\n(The last three states then repeat in a cycle ...)\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=855"
    },
    {
      "title": "Problem 2. The Bucket List",
      "subtitle": "USACO 2018 December Contest, Bronze",
      "id": 856,
      "year": "2018",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John is considering a change in how he allocates buckets for milking his\ncows. He thinks this will ultimately allow him to use a small number of total\nbuckets, but he is not sure how many exactly.  Please help him out!\n\n<p>Farmer John has $N$ cows ($1 \\leq N \\leq 100$), conveniently numbered $1 \\ldots N$.  The\n$i$th cow needs to be milked from time $s_i$ to time $t_i$, and requires $b_i$\nbuckets to be used during the milking process.  Several cows might end up being\nmilked at the same time; if so, they cannot use the same buckets.  That is, a\nbucket assigned to cow $i$'s milking cannot be used for any other cow's milking\nbetween time $s_i$ and time $t_i$.  The bucket can be used for other cows\noutside this window of time, of course.  To simplify his job, FJ has made sure\nthat at any given moment in time, there is at most one cow whose milking is\nstarting or ending (that is, the $s_i$'s and $t_i$'s are all distinct).  \n\n</p><p>FJ has a storage room containing buckets that are sequentially numbered with\nlabels 1, 2, 3, and so on.  In his current milking strategy, whenever some cow (say, cow $i$)\nstarts milking (at time $s_i$), FJ runs to the storage room and collects the\n$b_i$ buckets with the smallest available labels and allocates these for milking cow $i$.\n\n</p><p>Please determine how many total buckets FJ would need to keep in his\nstorage room in order to milk all the cows successfully.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file blist.in):</h4>\nThe first line of input contains $N$.  The next $N$ lines each describe one cow,\ncontaining the numbers $s_i$, $t_i$, and $b_i$, separated by spaces.  Both $s_i$\nand $t_i$ are integers in the range $1 \\ldots 1000$, and $b_i$ is an  integer in\nthe range $1 \\ldots 10$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file blist.out):</h4>\nOutput a single integer telling how many total buckets FJ needs.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n4 10 1\n8 13 3\n2 6 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>In this example, FJ needs 4 buckets: He uses buckets 1\nand 2 for milking cow 3 (starting at time 2).  He uses bucket 3 for milking cow\n1 (starting at time 4).  When cow 2 arrives at time 8, buckets 1 and 2 are now\navailable, but not bucket 3, so he uses buckets 1, 2, and 4.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=856"
    },
    {
      "title": "Problem 3. Back and Forth",
      "subtitle": "USACO 2018 December Contest, Bronze",
      "id": 857,
      "year": "2018",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John has two milking barns, each of which has a large milk tank as well\nas  a storage closet containing $10$ buckets of various sizes.  He likes to carry\nmilk back and forth between the two barns as a means of exercise.\n\n<p>On Monday, Farmer John measures exactly $1000$ gallons of milk in the tank of the\nfirst barn, and exactly $1000$ gallons of milk in the tank of the second barn.\n\n</p><p>On Tuesday, he takes a bucket from the first barn, fills it, and carries the\nmilk to the second barn, where he pours it into the storage tank.  He leaves the\nbucket at the second barn.\n\n</p><p>On Wednesday, he takes a bucket from the second barn (possibly the one he left\non Tuesday), fills it, and carries the milk to the first barn, where he pours it\ninto the storage tank.  He leaves the bucket at the first barn.\n\n</p><p>On Thursday, he takes a bucket from the first barn (possibly the one he left on\nWednesday), fills it, and carries the milk to the second barn, where he pours it\ninto the tank. He leaves the bucket at the second barn.\n\n</p><p>On Friday, he takes a bucket from the second barn (possibly the one he left on\nTuesday or Thursday), fills it, and carries the milk to the first barn, where\nhe pours it into the tank. He leaves the bucket at the first barn.  \n\n</p><p>Farmer John then measures the milk in the tank of the first barn.  How many\npossible different readings could he see?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file backforth.in):</h4>\nThe first line of input contains $10$ integers, giving the sizes of the buckets\ninitially at the first barn.  The second line of input contains $10$ more\nintegers, giving the sizes of the buckets initially at the second barn.  All\nbucket sizes are in the range $1 \\dots 100$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file backforth.out):</h4>\nPlease print the number of possible readings Farmer John could get from\nmeasuring the milk in the tank of the first barn after Friday.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 1 1 1 1 1 1 1 1 2\n5 5 5 5 5 5 5 5 5 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>In this example, there are $5$ possible results for the final amount of milk in\nthe first barn's tank:\n</p><ul><li>$1000$: FJ could carry the same bucket back and forth in each trip, leaving\nthe total amount in the first barn's tank unchanged.</li><li>$1003$: FJ could carry $2$ units on Tuesday, then $5$ units on Wednesday, then $1$\nunit on Thursday, and $1$ unit on Friday.</li><li>$1004$: FJ could carry $1$ unit on Tuesday, then $5$ units on Wednesday, then $1$\nunit on Thursday, and $1$ unit on Friday.</li><li>$1007$: FJ could carry $1$ unit on Tuesday, then $5$ units on Wednesday, then $2$\nunits on Thursday, and $5$ units on Friday.</li><li>$1008$: FJ could carry $1$ unit on Tuesday, then $5$ units on Wednesday, then $1$\nunit on Thursday, and $5$ units on Friday.</li></ul>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=857"
    },
    {
      "title": "Problem 1. Shell Game",
      "subtitle": "USACO 2019 January Contest, Bronze",
      "id": 891,
      "year": "2019",
      "division": "bronze",
      "number": "1",
      "problem": "To pass the time, Bessie the cow and her friend Elsie like to play a version of\na game they saw at the county fair.  \n\n<p>To start, Bessie puts three inverted shells on a table and places a small round\npebble under one of them (at least she hopes it is a pebble -- she found it on\nthe ground in one of the  pastures).  Bessie then proceeds to swap pairs of\nshells,  while Elsie tries to guess the location of the pebble.\n\n</p><p>The standard version of the game the cows saw being played at the county fair\nallowed the player to see the initial location of the pebble, and then required\nguessing its final location after all the swaps were complete.\n\n</p><p>However, the cows like to play a version where Elsie does not know the initial\nlocation of the pebble, and where she can guess the pebble location after every\nswap.  Bessie, knowing the right answer, gives Elsie a score at the end equal to\nthe number of correct guesses she made.\n\n</p><p>Given the swaps and the guesses, but not the initial pebble location, please\ndetermine the highest possible score Elsie could have earned.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file shell.in):</h4>\nThe first line of the input file contains an integer $N$ giving the number of\nswaps ($1 \\leq N \\leq 100$).  Each of the next $N$ lines describes a step of the\ngame and contains three integers $a$, $b$, and $g$, indicating that shells $a$\nand $b$ were swapped by Bessie, and then Elsie guessed shell $g$ after the swap\nwas made.  All three of these integers are either 1, 2, or 3, and $a \\neq b$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file shell.out):</h4>\nPlease output the maximum number of points Elsie could have earned.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 2 1\n3 2 1\n1 3 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this example, Elsie could have earned at most 2 points.  If the pebble\nstarted under shell 1, then she guesses right exactly once (her final guess). If\nthe pebble started under shell 2, then she guesses right twice (the first two\nguesses).  If the pebble started under shell 3, then she doesn't make any\ncorrect guesses.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=891"
    },
    {
      "title": "Problem 2. Sleepy Cow Sorting",
      "subtitle": "USACO 2019 January Contest, Bronze",
      "id": 892,
      "year": "2019",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John is attempting to sort his $N$ cows ($1 \\leq N \\leq 100$),\nconveniently numbered $1 \\dots N$, before they head out to the pastures for\nbreakfast.\n\n<p>Currently, the cows are standing in a line in the order\n$p_1, p_2, p_3,\n\\dots, p_N$, and Farmer John is standing in front of cow $p_1$.\nHe wants to reorder the cows so that they are in the order $1, 2, 3, \\dots, N$,\nwith cow $1$ next to Farmer John.\n\n</p><p>The cows are a bit sleepy today, so at any point in time the only cow who is\npaying attention to Farmer John's instructions is the cow directly facing Farmer\nJohn. In one time step, he can instruct this cow to move $k$ paces down the\nline, for any $k$ in the range $1 \\ldots N-1$. The $k$ cows whom she passes will\namble forward, making room for her to insert herself in the line after them.\n\n</p><p>For example, suppose that $N=4$ and the cows start off in the following order:\n\n</p><p></p><pre> FJ: 4, 3, 2, 1 </pre>\n\n<p>The only cow paying attention to FJ is cow $4$. If he instructs her to move $2$\npaces down the line, the order will subsequently look like this:\n\n</p><p></p><pre> FJ: 3, 2, 4, 1 </pre>\n\n<p>Now the only cow paying attention to FJ is cow $3$, so in the second time step\nhe may give cow $3$ an instruction, and so forth until the cows are sorted.\n\n</p><p>Farmer John is eager to complete the sorting, so he can go back to the farmhouse\nfor his own breakfast. Help him find the minimum number of time steps required\nto sort the cows.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file sleepy.in):</h4>\nThe first line of input contains $N$.  \n\n<p>The second line contains $N$ space-separated integers, \n$p_1, p_2, p_3, \\dots, p_N$, indicating the starting order of the cows.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file sleepy.out):</h4>\nA single integer: the number of time steps before the $N$ cows are in sorted\norder, if Farmer John acts optimally.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 2 4 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=892"
    },
    {
      "title": "Problem 3. Guess the Animal",
      "subtitle": "USACO 2019 January Contest, Bronze",
      "id": 893,
      "year": "2019",
      "division": "bronze",
      "number": "3",
      "problem": "When bored of playing their usual shell game, Bessie the cow and her friend\nElsie like to play another common game called \"guess the animal\".\n\n<p>Initially, Bessie thinks of some animal (most of the time, this animal is a cow,\nmaking the game rather boring, but occasionally Bessie is  creative and thinks\nof something else).  Then Elsie proceeds to ask a series of questions to figure\nout what animal Bessie has selected.  Each question asks whether the animal has\nsome specific characteristic, and Bessie answers each question with \"yes\" or\n\"no\". For example:\n\n</p><p></p><pre>Elsie: \"Does the animal fly?\" \nBessie: \"No\" \nElsie: \"Does the animal eat grass?\" \nBessie: \"Yes\" \nElsie: \"Does the animal make milk?\"\nBessie: \"Yes\" \nElsie: \"Does the animal go moo?\"\nBessie: \"Yes\" \nElsie: \"In that case I think the animal is a cow.\" \nBessie: \"Correct!\"\n</pre>\n\n<p>If we call the \"feasible set\" the set of all animals with characteristics\nconsistent with Elsie's questions so far, then Elsie keeps asking questions\nuntil the feasible set contains only one animal, after which she announces this\nanimal as her answer.  In each question, Elsie picks a characteristic of some\nanimal in the feasible set to ask about (even if this characteristic might not\nhelp her narrow down the feasible set any further).  She never asks about the\nsame  characteristic twice.\n\n</p><p>Given all of the animals that Bessie and Elsie know as well as their \ncharacteristics, please determine the maximum number of \"yes\" answers  Elsie\ncould possibly receive before she knows the right animal.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file guess.in):</h4>\nThe first line of input contains the number of animals, $N$\n($2 \\leq N \\leq 100$).   Each of the next $N$ lines describes an animal.  The\nline starts with the animal name,  then an integer $K$ ($1 \\leq K \\leq 100$),\nthen $K$ characteristics of that animal. Animal names and characteristics are\nstrings of up to 20 lowercase characters (a..z).  No two animals have  exactly\nthe same characteristics.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file guess.out):</h4>\nPlease output the maximum number of \"yes\" answers Elsie could receive before the\ngame ends.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\nbird 2 flies eatsworms\ncow 4 eatsgrass isawesome makesmilk goesmoo\nsheep 1 eatsgrass\ngoat 2 makesmilk eatsgrass\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example, it is possible for Elsie to generate a transcript with  3 \"yes\"\nanswers (the one above), and it is not possible to generate a transcript with\nmore than 3 \"yes\" answers.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=893"
    },
    {
      "title": "Problem 1. Sleepy Cow Herding",
      "subtitle": "USACO 2019 February Contest, Bronze",
      "id": 915,
      "year": "2019",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John's 3 prize cows, Bessie, Elsie, and Mildred, are always wandering off\nto  the far reaches of the farm!  He needs your help herding them back together.\n\n<p>The main field in the farm is long and skinny -- we can think of it as a number\nline, on which a cow can occupy any integer location.  The 3 cows are currently\nsituated at different integer locations, and Farmer John wants to move\nthem so they occupy three consecutive locations (e.g., positions 6, 7, and 8).\n\n</p><p>Unfortunately, the cows are rather sleepy, and Farmer John has trouble getting\ntheir attention to make them move.  At any point in time, he can only make a cow\nmove if she is an \"endpoint\" (either the minimum or maximum position among all\nthe cows).  When he moves a cow, he can instruct her to move to any unoccupied\ninteger location as long as in this new location she is no longer an endpoint. \nObserve that over time, these types of moves tend to push the cows closer and\ncloser together.\n\n</p><p>Please determine the minimum and maximum number of moves possible before the\ncows become grouped in three consecutive locations.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file herding.in):</h4>\nThe input file contains one line with three space-separated integers, giving the\nlocations of Bessie, Elsie, and Mildred.  Each location is an integer in the\nrange $1 \\ldots 10^9$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file herding.out):</h4>\nThe first line of output should contain the minimum number of moves Farmer John\nneeds to make to group the cows together.  The second line of output should\ncontain the maximum number of such moves he could conceivably make before the\ncows become grouped together.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 7 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n2\n</pre>\n\n<p>The minimum number of moves is 1 --- if Farmer John moves the cow in position 4\nto position 8, then the cows are at consecutive locations 7, 8, 9.  The maximum\nnumber of  moves is 2.  For example, the cow at position 9 could be moved to\nposition 6, then the cow at position 7 could be moved to position 5.\n\n</p><p>\n</p><p>Problem credits: Matthew Fahrbach\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=915"
    },
    {
      "title": "Problem 2. The Great Revegetation",
      "subtitle": "USACO 2019 February Contest, Bronze",
      "id": 916,
      "year": "2019",
      "division": "bronze",
      "number": "2",
      "problem": "A lengthy drought has left Farmer John's $N$ pastures devoid of grass.  However,\nwith the rainy season arriving soon, the time has come to \"revegetate\".\n\n<p>In Farmer John's shed, he has four buckets, each with a different type of grass \nseed. He wishes to sow each pasture with one of these types of seeds.    Being a\ndairy farmer, Farmer John wants to make sure each of his cows has a varied diet.\nEach of his $M$ cows has two favorite pastures, and he wants to be sure\ndifferent types of grass are planted in each, so every cow can choose between\ntwo types of grass.  Farmer John knows that no pasture is a favorite of more\nthan $3$ cows.\n\n</p><p>Please help Farmer John choose a grass type for each pasture so that  the\nnutritional needs of all cows are satisfied.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file revegetate.in):</h4>\nThe first line of input contains $N$ ($2 \\leq N \\leq 100$) and $M$\n($1 \\leq M \\leq 150$). Each of the next $M$ lines contains two integers in the\nrange $1 \\ldots N$, describing the pair of pastures that are the two favorites\nfor one of Farmer John's cows.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file revegetate.out):</h4>\nOutput an $N$-digit number, with each digit in the range $1 \\ldots 4$,\ndescribing the grass type to be planted in each field.  The first digit\ncorresponds to the  grass type for field $1$, the second digit to field $2$, and\nso on.  If there are multiple valid solutions, print only the $N$-digit number\nthat is smallest among all of them.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 6\n4 1\n4 2\n4 3\n2 5\n1 2\n1 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12133\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=916"
    },
    {
      "title": "Problem 3. Measuring Traffic",
      "subtitle": "USACO 2019 February Contest, Bronze",
      "id": 917,
      "year": "2019",
      "division": "bronze",
      "number": "3",
      "problem": "The highway adjacent to Farmer John's farm has recently seen a dramatic increase\nin traffic, or at least so it seems to Farmer John.  To be sure, he wants to\nmeasure the traffic flow on the highway with a set of  sensors, each capable of\nmeasuring the rate of flow of traffic on a  segment of road.  \n\n<p>Unfortunately, while walking through the barn one day, Farmer John trips and\ndrops his box of sensors into a large vat of milk, after which they no longer\nwork as well.  Instead of producing a single exact reading of traffic flow rate,\neach sensor now outputs a range of possible values. For example, a sensor might\noutput the range $[7, 13]$, indicating that the rate of traffic flow on a\nsegment of road is no less than 7, and no greater than 13.\n\n</p><p>The highway runs for $N$ miles next to the farm, and traffic on the highway only\nflows in one direction, from mile 1 towards mile $N$.  Farmer John wants to\ninstall $N$ sensors -- one for each 1-mile segment of the highway. In some of\nthese segments, there are on-ramps that allow traffic to enter the highway; in each of\nthese cases, Farmer John will install his sensor on the on-ramp to measure\n(approximately) the amount of incoming traffic.  In some segments there are \noff-ramps that allows traffic to exit the highway; in each of these cases, Farmer John will\ninstall his sensor on the off-ramp.  Each segment contains at most one ramp.  \nIf there is no on-ramp or off-ramp in a segment of highway, Farmer John installs\na sensor on the main highway itself.  \n\n</p><p>Given the readings from Farmer John's $N$ sensors, please determine the most\nspecific possible ranges that describe the rate of traffic flow initially on\nthe highway prior to mile 1 and for traffic continuing on the highway past mile\n$N$.  These ranges should be consistent with all $N$ sensor readings.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file traffic.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100$).  Each of the\nremaining $N$ lines describes a 1-mile segment of the road, in order from mile\n$1$ to mile $N$.  Each line contains a string that is either \"on\" (if there is\nan on-ramp on this segment), \"off\" (if there is an off-ramp), or \"none\" (if\nthere is no ramp), followed by two integers  in the range $0 \\ldots 1000$,\nindicating the lower and upper endpoints of the sensor range from this segment.\nIf the segment contains a ramp, the sensor reading is from the ramp.  Otherwise,\nit is from the main highway.  At least one of the highway segments will be\ndesignated as \"none\".\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file traffic.out):</h4>\nThe first line of output should contain two integers giving the most specific\nrange possible for the rate of traffic flow prior to mile 1.  The second line of\noutput should contain two integers giving the most specific range possible for\nthe rate of traffic flow after mile $N$.  A valid solution is always guaranteed\nto exist.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\non 1 1\nnone 10 14\nnone 11 15\noff 2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10 13\n8 12\n</pre>\n\n<p>In this example, the combination of readings from segments 2 and 3 tell us that\nthe flow rate through these segments is somewhere in the range $[11, 14]$, since\nonly this range is consistent with both the readings $[10,14]$ and $[11,15]$. In\nmile 1, exactly 1 unit of flow enters on an on-ramp, so prior to mile 1, the\nflow rate must be in the range $[10, 13]$.  In mile 4, between 2 and 3 units\nexits on an off-ramp, so the range of possible flow rates after this is\n$[8,12]$.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=917"
    },
    {
      "title": "Problem 1. Bucket Brigade",
      "subtitle": "USACO 2019 US Open Contest, Bronze",
      "id": 939,
      "year": "2019",
      "division": "bronze",
      "number": "1",
      "problem": "A fire has broken out on the farm, and the cows are rushing to try and put it out!\n\n<p>The farm is described by a $10 \\times 10$ grid of characters like this:\n\n</p><p></p><pre>..........\n..........\n..........\n..B.......\n..........\n.....R....\n..........\n..........\n.....L....\n..........\n</pre>\n\n<p>The character 'B' represents the barn, which has just caught on fire.  The 'L'\ncharacter represents a lake, and 'R' represents the location of a large rock.\n\n</p><p>The cows want to form a \"bucket brigade\" by placing themselves along a path \nbetween the lake and the barn so that they can pass buckets of water along the\npath to help extinguish the fire.  A bucket can move between cows if they are\nimmediately adjacent in the north, south, east, or west directions.  The same\nis true for a cow next to the lake --- the cow can only extract a bucket of \nwater from the lake if she is immediately adjacent to the lake.  Similarly, a \ncow can only throw a bucket of water on the barn if she is immediately \nadjacent to the barn.\n\n</p><p>Please help determine the minimum number of '.' squares that should be occupied \nby cows to form a successful bucket brigade.  \n\n</p><p>A cow cannot be placed on the square containing the large rock, and the barn and\nlake are guaranteed not to be immediately adjacent to each-other.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file buckets.in):</h4>\nThe input file contains 10 rows each with 10 characters, describing the layout of the farm.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file buckets.out):</h4>\nOutput a single integer giving the minimum number of cows needed to form a \nviable bucket brigade.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">..........\n..........\n..........\n..B.......\n..........\n.....R....\n..........\n..........\n.....L....\n..........\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">7\n</pre>\n\n<p>In this example, here is one possible solution, which involves the optimal number\nof cows (7):\n\n</p><p></p><pre>..........\n..........\n..........\n..B.......\n..C.......\n..CC.R....\n...CCC....\n.....C....\n.....L....\n..........\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=939"
    },
    {
      "title": "Problem 2. Milk Factory",
      "subtitle": "USACO 2019 US Open Contest, Bronze",
      "id": 940,
      "year": "2019",
      "division": "bronze",
      "number": "2",
      "problem": "The milk business is booming! Farmer John's milk processing factory consists of\n$N$ processing stations, conveniently numbered $1 \\ldots N$\n($1 \\leq N \\leq 100$), and $N-1$ walkways,  each connecting some pair of\nstations. (Walkways are expensive, so Farmer John has elected to use the minimum\nnumber of walkways so that one can eventually reach any station starting from\nany other station).\n\n<p>To try and improve efficiency, Farmer John installs a conveyor belt in each of\nits walkways.  Unfortunately, he realizes too late that each conveyor belt only\nmoves one way, so now travel along each walkway is only possible in a single\ndirection!  Now, it is no longer the case that one can travel from  any station\nto any other station.  \n\n</p><p>However, Farmer John thinks that all may not be lost, so long as there is at \nleast one station $i$ such that one can eventually travel to station $i$ from\nevery other station. Note that traveling to station $i$ from another arbitrary\nstation $j$ may involve traveling through intermediate stations between $i$ and\n$j$. Please help\nFarmer John figure out if such a station $i$ exists.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file factory.in):</h4>\nThe first line contains an integer $N$, the number of processing stations. Each\nof the next $N-1$ lines contains two space-separated integers $a_i$ and $b_i$\nwith $1 \\leq a_i, b_i \\leq N$ and $a_i \\neq b_i$. This indicates that there is a\nconveyor belt that moves from station $a_i$ to station $b_i$, allowing travel\nonly in the direction from $a_i$ to $b_i$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file factory.out):</h4>\nIf there exists a station $i$ such that one can walk to station $i$ from any\nother station, then output the minimal such $i$. Otherwise, output $-1$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 2\n3 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=940"
    },
    {
      "title": "Problem 3. Cow Evolution",
      "subtitle": "USACO 2019 US Open Contest, Bronze",
      "id": 941,
      "year": "2019",
      "division": "bronze",
      "number": "3",
      "problem": "It is the year 3019, and a surprising amount of bovine evolution has transpired\nin the past thousand years, resulting in cows with all sorts of interesting\nfeatures.\n\n<p>The bovine evolutionary record can be described as a tree, starting with a basic\nancestral cow at the root with no special features. At each descendant level in\nthe tree, either all cows evolve a new feature (such as fire breathing, below,\nwhere all cows with spots ended up breathing fire), or there is a divergent\nsplit in the bovine population where some of the cows evolve a new feature\n(e.g., flying) and some do not. \n</p><figure><img src=\"http://www.usaco.org/current/data/fig_evolution_bronze_open19.png\"><figcaption></figcaption></figure>\n\n<p>The leaves at the bottom of the tree indicate all the resulting sub-populations\nof cows in the year 3019. No  leaves (sub-populations) contain identical sets of\nfeatures. For example, sub-population #1 contains cows with no special features,\nwhile sub-population #3 contains telepathic flying cows. Sub-population #2, by\ncontrast, has flying cows that are not telepathic. Sub-population #3 is unique\nin its combination of flying and telepathic cows.\n\n</p><p>An evolutionary tree like the one above is called \"proper\" if each newly evolved\nfeature originates in exactly one edge of the tree (e.g., it evolved into being\nat a single point in history).  For example, a tree would not be proper if spots\nevolved into being in two separate branches.  Given a  description of the\nsub-populations of cows in the year 3019, please  determine if these can be\ndescribed by a proper evolutionary tree.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file evolution.in):</h4>\nThe first line of input contains the number of sub-populations, $N$\n($2 \\leq N \\leq 25$).   Each of the next $N$ lines describes a sub-population. \nThe line starts with an integer $K$ ($0 \\leq K \\leq 25$), then $K$\ncharacteristics  of all the cows in that sub-population.  Characteristics are\nstrings of up to 20 lowercase characters (a..z).  No two sub-populations have\nexactly the same characteristics.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file evolution.out):</h4>\nPlease output \"yes\" if it is possible to form a proper evolutionary tree\nexplaining the origin of these sub-populations, and \"no\" otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n2 spots firebreathing\n0\n1 flying\n2 telepathic flying\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">yes\n</pre>\n\n<p>This example input corresponds to the proper tree shown in the diagram above.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=941"
    },
    {
      "title": "Problem 1. Cow Gymnastics",
      "subtitle": "USACO 2019 December Contest, Bronze",
      "id": 963,
      "year": "2019",
      "division": "bronze",
      "number": "1",
      "problem": "In order to improve their physical fitness, the cows have taken up gymnastics!\nFarmer John designates his favorite cow Bessie to coach the $N$ other cows and\nto assess their progress as they learn various gymnastic skills.\n\n<p>In each of $K$ practice sessions ($1 \\leq K \\leq 10$), Bessie ranks the $N$ cows according to their \nperformance ($1 \\leq N \\leq 20$).  Afterward, she is curious about the consistency in these rankings.\nA pair of two distinct cows is <em>consistent</em> if one cow did better than the\nother one in every practice session.\n\n</p><p>Help Bessie compute the total number of consistent pairs.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file gymnastics.in):</h4>\nThe first line of the input file contains two positive integers $K$ and $N$. The next $K$ lines will each contain the\nintegers $1 \\ldots N$ in some order, indicating the rankings of the cows (cows\nare identified by the numbers $1 \\ldots N$). If $A$ appears before $B$ in one of\nthese lines, that means cow $A$ did better than cow $B$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file gymnastics.out):</h4>\nOutput, on a single line, the number of consistent pairs.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 4\n4 1 2 3\n4 1 3 2\n4 2 1 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>The consistent pairs of cows are $(1,4)$, $(2,4)$, $(3,4)$, and $(1,3)$.\n\n</p><p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=963"
    },
    {
      "title": "Problem 2. Where Am I?",
      "subtitle": "USACO 2019 December Contest, Bronze",
      "id": 964,
      "year": "2019",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John has gone out for a walk down the road and thinks he may now be lost!\n\n<p>Along the road there are $N$ farms ($1 \\leq N \\leq 100$) in a row.  Farms unfortunately \ndo not have house numbers, making it hard for Farmer John to figure out his location\nalong the road.  However, each farm does have a colorful mailbox along the side of the\nroad, so Farmer John hopes that if he looks at the colors of the mailboxes\nnearest to him, he can uniquely determine where he is.\n\n</p><p>Each mailbox color is specified by a letter in the range A..Z, so the sequence of $N$\nmailboxes down the road can be represented by a string of length $N$ containing \nletters in the range A..Z.  Some mailboxes may have the same colors as other mailboxes.\nFarmer John wants to know what is the smallest value of $K$ such that if he looks at\nany sequence of $K$ consecutive mailboxes, he can uniquely determine the location\nof that sequence along the road.\n\n</p><p>For example, suppose the sequence of mailboxes along the road is 'ABCDABC'.  Farmer \nJohn cannot set $K=3$, since if he sees 'ABC', there are two possible locations along\nthe road where this consecutive set of colors might be.  The smallest value of $K$\nthat works is $K=4$, since if he looks at any consecutive set of 4 mailboxes,\nthis sequence of colors uniquely determines his position along the road.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file whereami.in):</h4>\nThe first line of input contains $N$, and the second line contains a string of $N$ characters, each in the range A..Z.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file whereami.out):</h4>\nPrint a line containing a single integer, specifying the smallest value of $K$ that\nsolves Farmer John's problem.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\nABCDABC\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=964"
    },
    {
      "title": "Problem 3. Livestock Lineup",
      "subtitle": "USACO 2019 December Contest, Bronze",
      "id": 965,
      "year": "2019",
      "division": "bronze",
      "number": "3",
      "problem": "Every day, Farmer John milks his 8 dairy cows, named Bessie, Buttercup, Belinda,\nBeatrice, Bella, Blue, Betsy, and Sue.\n\n<p>The cows are rather picky, unfortunately, and require that Farmer John milks\nthem in an order that respects $N$ constraints ($1 \\leq N \\leq 7$).  Each\nconstraint is of the form \"$X$ must be milked beside $Y$\", stipulating that cow\n$X$ must appear in the milking order either directly after cow $Y$ or directly\nbefore cow $Y$.\n\n</p><p>Please help Farmer John determine an ordering of his cows that satisfies all of\nthese required constraints.  It is guaranteed that an ordering is always\npossible.  If several orderings work, then please output the one that is\nalphabetically first.  That is, the first cow should have the alphabetically\nlowest name of all possible cows that could appear first in any valid ordering. \nAmong all orderings starting with this same alphabetically-first cow, the second\ncow should be alphabetically lowest among all possible valid orderings, and so\non.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file lineup.in):</h4>\nThe first line of input contains $N$.  The next $N$ lines each contain a\nsentence describing a constraint in the form \"$X$ must be milked beside $Y$\",\nwhere $X$ and $Y$ are names of some of Farmer John's cows (the eight possible\nnames are listed above).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file lineup.out):</h4>\nPlease output, using 8 lines, an ordering of cows, one cow per line, satisfying all constraints.\nIf multiple orderings work, output the one that is alphabetically earliest.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\nButtercup must be milked beside Bella\nBlue must be milked beside Bella\nSue must be milked beside Beatrice\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">Beatrice\nSue\nBelinda\nBessie\nBetsy\nBlue\nBella\nButtercup\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=965"
    },
    {
      "title": "Problem 1. Word Processor",
      "subtitle": "USACO 2020 January Contest, Bronze",
      "id": 987,
      "year": "2020",
      "division": "bronze",
      "number": "1",
      "problem": "Bessie the cow is working on an essay for her writing class.  Since her\nhandwriting is quite bad, she decides to type the essay using a word processor.\n\n<p>The essay contains $N$ words ($1\\le N\\le 100$), separated by spaces. Each word\nis  between 1 and 15 characters long, inclusive, and consists only of uppercase\nor lowercase letters.  According to the instructions for the assignment, the\nessay has to be  formatted in a very specific way: each line should contain no\nmore than $K$ ($1\\le K\\le 80$) characters, not counting spaces.  Fortunately,\nBessie's word processor can handle this requirement, using the following\nstrategy:\n\n</p><p></p><ul><li>If Bessie types a word, and that word can fit on the current line, put it on\nthat line.</li><li>Otherwise, put the word on the next line and continue adding to that\nline.</li></ul>\n\n<p>Of course, consecutive words on the same line should still be separated by a\nsingle space.  There should be no space at the end of any line.\n\n</p><p>Unfortunately, Bessie's word processor just broke.  Please help her format her\nessay properly!\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file word.in):</h4>\nThe first line of input contains two space-separated integers $N$ and $K.$\n\n<p>The next line contains $N$ words separated by single spaces. No word will ever\nbe larger than $K$ characters, the maximum number of characters on a line. \n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file word.out):</h4>\nBessie's essay formatted correctly.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 7\nhello my name is Bessie and this is my essay\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">hello my\nname is\nBessie\nand this\nis my\nessay\n</pre>\n\n<p>Including \"hello\" and \"my\", the first line contains 7 non-space characters.\nAdding \"name\" would cause the first line to contain $11&gt;7$ non-space characters,\nso it is placed on a new line.\n\n</p><p>\n</p><p>Problem credits: Nathan Pinsker\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=987"
    },
    {
      "title": "Problem 2. Photoshoot",
      "subtitle": "USACO 2020 January Contest, Bronze",
      "id": 988,
      "year": "2020",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John is lining up his $N$ cows ($2\\le N\\le 10^3$), numbered $1\\ldots N$, \nfor a photoshoot. FJ initially planned for the $i$-th cow from the left to be\nthe cow numbered $a_i,$ and wrote down the permutation $a_1,a_2,\\ldots,a_N$ on a\nsheet of paper. Unfortunately, that paper was recently stolen by Farmer Nhoj!\n\n<p>Luckily, it might still be possible for FJ to recover the permutation that he\noriginally wrote down. Before the sheet was stolen, Bessie recorded the sequence\n$b_1,b_2,\\ldots,b_{N-1}$ that satisfies $b_i=a_i+a_{i+1}$ for each\n$1\\le i&lt;N.$\n\n</p><p>Based on Bessie's information, help FJ restore the \"lexicographically minimum\"\npermutation $a$ that could have produced $b$. A permutation $x$ is\nlexicographically smaller than a permutation $y$  if for some $j$, $x_i=y_i$ for\nall $i&lt;j$ and $x_j&lt;y_j$ (in other words, the two permutations are identical up\nto a certain point, at which $x$ is smaller than $y$). It is guaranteed that at\nleast one such $a$ exists.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $N\\le 8.$</li><li>Test cases 5-10 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file photo.in):</h4>\nThe first line of input contains a single integer $N.$\n\n<p>The second line contains $N-1$ space-separated integers\n$b_1,b_2,\\ldots,b_{N-1}.$\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file photo.out):</h4>\nA single line with $N$ space-separated integers $a_1,a_2,\\ldots,a_{N}.$\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n4 6 7 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3 1 5 2 4\n</pre>\n\n<p>$a$ produces $b$ because $3+1=4$, $1+5=6$, $5+2=7$, and $2+4=6.$\n\n</p><p>\n</p><p>Problem credits: Benjamin Qi and Chris Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=988"
    },
    {
      "title": "Problem 3. Race",
      "subtitle": "USACO 2020 January Contest, Bronze",
      "id": 989,
      "year": "2020",
      "division": "bronze",
      "number": "3",
      "problem": "Bessie is running a race of length $K$ ($1\\le K\\le 10^9$) meters. She starts\nrunning at a speed of 0 meters per second. In a given second, she can either\nincrease her speed by 1 meter per second, keep it unchanged, or decrease it by 1\nmeter per second. For example, in the first second, she can increase her speed\nto 1 meter per second and run 1 meter, or keep it at 0 meters per second and run 0\nmeters. Bessie's speed can never drop below zero.\n\n<p>Bessie will always run toward the finish line, and she wants to finish after an\ninteger amount of seconds (ending either at or past the goal line at this integer\npoint in time). Furthermore, she doesn’t want to be running too\nquickly at the finish line: at the instant in time when Bessie finishes running\n$K$ meters, she wants the speed she has just been traveling to be no\nmore than $X$ ($1 \\leq X \\leq 10^5$) meters per second. Bessie wants to know how\nquickly she can finish the race for $N$ ($1 \\leq N \\leq 1000$) different values\nof $X$. \n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $N=X=1.$</li><li>Test cases 5-10 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file race.in):</h4>\nThe first line will contain two integers $K$ and $N$.\n\n<p>The next $N$ lines each contain a single integer $X$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file race.out):</h4>\nOutput $N$ lines, each containing a single integer for the minimum\ntime Bessie needs to run $K$ meters so that she finishes with a speed\nless than or equal to $X$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 5\n1\n2\n3\n4\n5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n5\n5\n4\n4\n</pre>\n\n<p>When $X = 1$, an optimal solution is:\n</p><ol><li> Increase speed to 1 m/s, travel 1 meter </li><li> Increase speed to 2 m/s,\ntravel 2 meters, for a total of 3 meters </li><li> Keep speed at 2 m/s, travel\n5 meters total </li><li> Keep speed at 2 m/s, travel 7 meters total </li><li>\nKeep speed at 2 m/s, travel 9 meters total </li><li> Decrease speed to 1 m/s,\ntravel 10 meters total </li></ol>\n\n<p>When $X = 3$, an optimal solution is:\n</p><ol><li> Increase speed to 1 m/s, travel 1 meter </li><li> Increase speed to 2 m/s,\ntravel 3 meters total </li><li> Increase speed to 3 m/s, travel 6 meters total\n</li><li> Keep speed at 3 m/s, travel 9 meters total </li><li> Keep speed at 3\nm/s, travel 12 meters total </li></ol>\n\n<p>Note that the following is illegal when $X = 3$:\n</p><ol><li> Increase speed to 1 m/s, travel 1 meter </li><li> Increase speed to 2 m/s,\ntravel 3 meters total </li><li> Increase speed to 3 m/s, travel 6 meters total\n</li><li> Increase speed to 4 m/s, travel 10 meters total </li></ol>\n\n<p>This is because at the instant when Bessie has finished running 10 meters, her\nspeed is 4 m/s.\n\n</p><p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=989"
    },
    {
      "title": "Problem 1. Triangles",
      "subtitle": "USACO 2020 February Contest, Bronze",
      "id": 1011,
      "year": "2020",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John would like to create a triangular pasture for his cows. \n\n<p>There are $N$ fence posts ($3\\le N\\le 100$) at distinct points\n$(X_1, Y_1) \\ldots (X_N, Y_N)$ on the 2D map of his farm.  He can choose three\nof them to form the vertices of the triangular pasture as long as one of the\nsides of the triangle is parallel to the $x$-axis and another side is\nparallel to the\n$y$-axis.\n\n</p><p>What is the maximum area of a pasture that Farmer John can form? It is\nguaranteed that at least one valid triangular pasture exists.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file triangles.in):</h4>\nThe first line of the input contains the integer $N$.  Each of the next $N$\nlines contains two integers $X_i$ and $Y_i$, each in the range\n$-10^4 \\ldots 10^4$ inclusive, describing the location of a fence post.  \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file triangles.out):</h4>\nAs the area itself is not necessarily an integer, output <strong>two times</strong> the\nmaximum area of a valid triangle formed by the fence posts.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n0 0\n0 1\n1 0\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>Posts at $(0,0)$, $(1,0)$, and $(1,2)$ form a triangle of area $1$. Thus, the\nanswer is $2\\cdot 1=2$. There is only one other triangle, with area $0.5$.\n\n</p><p>\n</p><p>Problem credits: Travis Hance\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1011"
    },
    {
      "title": "Problem 2. Mad Scientist",
      "subtitle": "USACO 2020 February Contest, Bronze",
      "id": 1012,
      "year": "2020",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John's cousin Ben happens to be a mad scientist.  Normally, this creates \na good bit of friction at family gatherings, but it can occasionally be helpful,\nespecially when Farmer John finds himself facing unique and unusual problems\nwith his cows.\n\n<p>Farmer John is currently facing a unique and unusual problem with his cows. He\nrecently ordered $N$ cows ($1 \\leq N \\leq 1000$) consisting of two different\nbreeds: Holsteins and Guernseys.  He specified the cows in his order in terms of\na string of $N$ characters, each either H (for Holstein) or G (for Guernsey).\nUnfortunately, when the cows arrived at his farm and he lined them up, their\nbreeds formed a different string from this original string.\n\n</p><p>Let us call these two strings $A$ and $B$, where $A$ is the string of breed\nidentifiers Farmer John originally wanted, and $B$ is the string he sees when\nhis cows arrive.  Rather than simply check if re-arranging the cows  in $B$ is\nsufficient to obtain $A$, Farmer John asks his cousin Ben to help him solve the\nproblem with his scientific ingenuity.  \n\n</p><p>After several months of work, Ben creates a remarkable machine, the\nmulti-cow-breed-flipinator 3000, that is capable of taking any\nsubstring of cows and toggling their breeds: all Hs become Gs and all\nGs become Hs in the substring.  Farmer John wants to figure out the\nminimum number of times he needs to apply this machine to transform\nhis current ordering $B$ into his original desired ordering $A$.\nSadly, Ben's mad scientist skills don't extend beyond creating\ningenious devices, so you need to help Farmer John solve this\ncomputational conundrum.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file breedflip.in):</h4>\nThe first line of input contains $N$, and the next two lines contain the\nstrings $A$ and $B$.  Each string has $N$ characters that are either H or G.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file breedflip.out):</h4>\nPrint the minimum number of times the machine needs to be applied to transform\n$B$ into $A$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\nGHHHGHH\nHHGGGHH\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>First, FJ can transform the substring that corresponds to the first character\nalone,  transforming $B$ into GHGGGHH.  Next, he can transform the substring\nconsisting  of the third and fourth characters, giving $A$.  Of course, there\nare other combinations of two applications of the machine that also work.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1012"
    },
    {
      "title": "Problem 3. Swapity Swap",
      "subtitle": "USACO 2020 February Contest, Bronze",
      "id": 1013,
      "year": "2020",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John's $N$ cows ($1\\le N\\le 100$) are standing in a line.  The $i$th cow\nfrom the left has label $i$, for each $1\\le i\\le N$.\n\n<p>Farmer John has come up with a new morning exercise routine for the cows.  He\ntells them to repeat the following two-step process exactly $K$\n($1\\le K\\le 10^9$) times:\n\n</p><p></p><ol><li>The sequence of cows currently in positions $A_1 \\ldots A_2$ from the left\nreverse their order ($1\\le A_1&lt;A_2\\le N$).</li><li>Then, the sequence of cows currently in positions $B_1 \\ldots B_2$ from the\nleft reverse their order ($1\\le B_1&lt;B_2\\le N$).</li></ol>\n\n<p>After the cows have repeated this process exactly $K$ times, please output the\nlabel of the $i$th cow from the left for each $1\\le i\\le N$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 2-3 satisfy $K\\le 100$.</li><li>Test cases 4-13 satisfy no additional constraints.</li></ul>\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file swap.in):</h4>\nThe first line of input contains $N$ and $K$.  The second line contains $A_1$\nand $A_2$, and the third contains $B_1$ and $B_2$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file swap.out):</h4>\nOn the $i$th line of output, print the label of the $i$th cow from the left at\nthe end of the exercise routine.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 2\n2 5\n3 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n2\n4\n3\n5\n7\n6\n</pre>\n\n<p>Initially, the order of the cows is $[1,2,3,4,5,6,7]$ from left to right. After\nthe first step of the process, the order is $[1,5,4,3,2,6,7].$ After the second\nstep of  the process, the order is $[1,5,7,6,2,3,4]$. Repeating both steps a\nsecond time yields the output of the sample.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1013"
    },
    {
      "title": "Problem 1. Social Distancing I",
      "subtitle": "USACO 2020 US Open Contest, Bronze",
      "id": 1035,
      "year": "2020",
      "division": "bronze",
      "number": "1",
      "problem": "A terrible new disease, COWVID-19, has begun to spread among cows worldwide.\nFarmer John is trying to take as many precautions as possible to protect his\nherd from infection.\n\n<p>Farmer John's barn is a long narrow building containing $N$ stalls in a row\n($2 \\leq N \\leq 10^5$).  Some of these stalls are currently occupied by cows,\nand some are vacant.  Having read about the importance of \"social distancing\",\nFarmer John wants to maximize $D$, where $D$ is the distance between the closest\ntwo occupied stalls.  For example, if stalls 3 and 8 are the closest that are\noccupied, then $D = 5$.  \n\n</p><p>Two new cows recently joined Farmer John's herd and he needs to decide to which\nformerly-unoccupied stalls they should be assigned.  Please determine how he can\nplace his two new cows so that the resulting value of $D$ is still as large as\npossible.  Farmer John cannot move any of his existing cows; he only wants to\nassign stalls to the new cows.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file socdist1.in):</h4>\nThe first line of input contains $N$.  The next line contains a string of length\n$N$ of 0s and 1s describing the sequence of stalls in the barn.  0s indicate\nempty stalls and 1s indicate occupied stalls.  The string has at least two 0s, \nso there is at least enough room for two new cows.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file socdist1.out):</h4>\nPlease print the largest value of $D$ (the closest distance between two occupied\nstalls) that Farmer John can achieve after adding his two new cows in an optimal\nfashion.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">14\n10001001000010\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this example, Farmer John could add cows to make the occupancy string look\nlike 10x010010x0010, where x's indicate the new cows.  In this case $D = 2$.  It\nis impossible to add the new cows to achieve any higher value of $D$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-6 satisfy $N\\le 10$.</li><li>Test cases 7-8 satisfy $N\\le 100$. </li><li>Test cases 9-11 satisfy $N \\le 5000$. </li><li>Test cases 12-15 satisfy no additional constraints. </li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1035"
    },
    {
      "title": "Problem 2. Social Distancing II",
      "subtitle": "USACO 2020 US Open Contest, Bronze",
      "id": 1036,
      "year": "2020",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John is worried for the health of his cows after an outbreak of the \nhighly contagious bovine disease COWVID-19.  \n\n<p>Despite his best attempt at making his $N$ cows ($1 \\leq N \\leq 1000$)  practice\n\"social distancing\", many of them still unfortunately contracted  the disease. \nThe cows, conveniently numbered $1 \\ldots N$, are each standing at distinct\npoints along a long path (essentially a one-dimensional number line), with cow\n$i$ standing at position $x_i$.  Farmer John knows that there is a radius $R$\nsuch that any cow standing up to and including $R$ units away from an infected\ncow will also become infected (and will then pass the infection along to\nadditional cows within $R$ units away, and so on).\n\n</p><p>Unfortunately, Farmer John doesn't know $R$ exactly.  He does however know which\nof his cows are infected.  Given this data, please determine the minimum\npossible number of cows that were initially infected with the disease.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file socdist2.in):</h4>\nThe first line of input contains $N$.  The next $N$ lines each describe one cow\nin terms of two integers, $x$ and $s$, where $x$ is the position\n($0 \\leq x \\leq 10^6$), and $s$ is 0 for a healthy cow or 1 for a sick cow. At\nleast one cow is sick, and all cows that could possibly have become sick from\nspread of the disease have now become sick.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file socdist2.out):</h4>\nPlease output the minimum number of cows that could have initially been sick,\nprior to any spread of the disease.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n7 1\n1 1\n15 1\n3 1\n10 0\n6 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example, we know that $R &lt; 3$ since otherwise the cow at position 7\nwould have infected the cow at position 10.  Therefore, at least 3 cows must\nhave started out infected -- one of the two cows at positions 1 and 3, one of\nthe two cows at positions 6 and 7, and the cow at position 15.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1036"
    },
    {
      "title": "Problem 3. Cowntact Tracing",
      "subtitle": "USACO 2020 US Open Contest, Bronze",
      "id": 1037,
      "year": "2020",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John is worried for the health of his cows (conveniently numbered\n$1 \\ldots N$ as always) after an outbreak of the  highly contagious bovine\ndisease COWVID-19.  \n\n<p>Recently, Farmer John tested all of his cows and found some of them to be \npositive for the disease.  Using video footage from inside his barn, he is able\nto review recent interactions between pairs of cows --- it turns out that when\ncows greet each-other, they shake hooves, a gesture that can unfortunately\nspread the infection from one cow to another.  Farmer John assembles a\ntime-stamped list of interacting pairs of cows, with entries of the form\n$(t, x, y)$, meaning that at time $t$, cow $x$ shook hooves with cow $y$. \nFarmer John also knows the following:\n\n</p><p>(i) Exactly one cow on his farm could have started out carrying the disease\n(we'll call this cow \"patient zero\").\n\n</p><p>(ii) Once a cow is infected, she passes the infection along with her next $K$\nhoof shakes (possibly including the same partner cow several times).  After \nshaking hooves $K$ times, she no longer passes the infection along with \nsubsequent hoof shakes (since at this point she realizes she is spreading the\ninfection and washes her hooves carefully).\n\n</p><p>(iii) Once a cow is infected, she stays infected.\n\n</p><p>Unfortunately, Farmer John doesn't know which of his $N$ cows is patient zero,\nnor does he know the value of $K$!  Please help him narrow down the\npossibilities for these unknowns based on his data. It is guaranteed that at\nleast one possibility is valid.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file tracing.in):</h4>\nThe first line of the input file contains $N$ ($2 \\leq N \\leq 100$) and $T$\n($1 \\leq T \\leq 250$).  The next line contains a string of length $N$ whose\nentries are 0s and 1s,  describing the current state of Farmer John's $N$ cows\n--- 0 represents a healthy cow and 1 represents a cow presently with the\ndisease.  Each of the next $T$ lines describes a record in Farmer John's list of\ninteractions and consists of three integers $t$, $x$, and $y$, where $t$ is a\npositive integer time of the interaction ($t \\leq 250$) and $x$ and $y$ are\ndistinct integers in the range $1 \\ldots N$, indicating which cows shook hands\nat time $t$. At most one interaction happens at each point in time. \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file tracing.out):</h4>\nPrint a single line with three integers $x$, $y$, and $z$, where $x$ is the\nnumber of possible cows who could have been patient zero, $y$ is the smallest\npossible value of $K$ consistent with the data, and $z$ is the largest possible\nvalue of $K$ consistent with the data (if there is no upper bound on $K$ that\ncan be deduced from the data, print \"Infinity\" for $z$). Note that it might be\npossible to have $K=0$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3\n1100\n7 1 2\n5 2 3\n6 2 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 1 Infinity\n</pre>\n\n<p>The only candidate for patient zero is cow 1. For all $K&gt;0$, cow 1 infects cow 2\nat time 7, while cows 3 and 4 remain uninfected.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1037"
    },
    {
      "title": "Problem 1. Do You Know Your ABCs?",
      "subtitle": "USACO 2020 December Contest, Bronze",
      "id": 1059,
      "year": "2020",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John's cows have been holding a daily online gathering on the \"mooZ\"  video\nmeeting platform.  For fun, they have invented a simple number game to play\nduring the meeting to keep themselves entertained.\n\n<p>Elsie has three positive integers $A$, $B$, and $C$ ($A\\le B\\le C$). These\nintegers are supposed to be secret, so she will not directly reveal them to her\nsister Bessie. Instead, she gives Bessie seven (not necessarily distinct)\nintegers in the range $1 \\ldots 10^9$, claiming that they are $A$, $B$, $C$,\n$A+B$, $B+C$, $C+A$, and $A+B+C$ in some order.\n\n</p><p>Given a list of these seven numbers, please help Bessie determine  $A$, $B$, and\n$C$. It can be shown that the answer is unique.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe only line of input consists of seven space-separated integers.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint $A$, $B$, and $C$ separated by spaces.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 2 11 4 9 7 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2 2 7\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $C\\le 50$.</li><li>Test cases 4-10 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1059"
    },
    {
      "title": "Problem 2. Daisy Chains",
      "subtitle": "USACO 2020 December Contest, Bronze",
      "id": 1060,
      "year": "2020",
      "division": "bronze",
      "number": "2",
      "problem": "Every day, as part of her walk around the farm, Bessie the cow visits  her\nfavorite pasture, which has $N$ flowers (all colorful daisies)  labeled\n$1\\ldots N$ lined up in a row $(1\\le N \\le 100)$. Flower $i$ has $p_i$ petals\n$(1 \\le p_i \\le 1000)$.\n\n<p>As a budding photographer, Bessie decides to take several photos of these\nflowers. In particular, for every pair of flowers $(i,j)$ satisfying\n$1\\le i\\le j\\le N$, Bessie takes a photo of all flowers from flower $i$ to\nflower $j$ (including $i$ and $j$).\n\n</p><p>Bessie later looks at these photos and notices that some of these photos have an\n\"average flower\" -- a flower that has $P$ petals, where $P$ is the exact average\nnumber of petals among all flowers in the photo. \n\n</p><p>How many of Bessie's photos have an average flower?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$.  The second line contains  $N$\nspace-separated integers $p_1 \\dots p_N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease print out the number of photos that have an average flower.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 1 2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\n\n<p>Every picture containing just a single flower contributes to the count (there are\nfour of these in the example).  Also, the $(i,j)$ ranges $(1,2)$ and $(2,4)$ in\nthis example correspond to pictures that have an average flower.\n\n</p><p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1060"
    },
    {
      "title": "Problem 3. Stuck in a Rut",
      "subtitle": "USACO 2020 December Contest, Bronze",
      "id": 1061,
      "year": "2020",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John has recently expanded the size of his farm, so from the perspective\nof his cows it is effectively now infinite in size!  The cows think of the\ngrazing area of the farm as an infinite 2D grid of square \"cells\", each filled\nwith  delicious grass (think of each cell as a square in an infinite\nchessboard).   Each of Farmer John's $N$ cows ($1\\le N\\le 50$) starts out in a\ndifferent cell; some  start facing north, and some start facing east.\n\n<p>Every hour, every cow either\n\n</p><p></p><ul><li>Stops if the grass in her current cell was already eaten by another\ncow.</li><li>Eats all the grass in her current cell and moves one cell forward according\nto the direction she faces.</li></ul>\n\n<p>Over time, each cow therefore leaves a barren \"rut\" of empty cells behind her.\n\n</p><p>If two cows move onto the same grassy cell in the same move, they share the cell\nand continue moving in their respective directions in the next hour.\n\n</p><p>Please determine the amount of grass eaten by each cow.  Some cows never stop,\nand therefore eat an infinite amount of grass.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$.  Each of the next $N$ lines describes the\nstarting location of a cow, in terms of a character that is either N (for\nnorth-facing) or E (for east-facing) and two nonnegative integers $x$ and $y$ \n($0\\le x\\le 10^9$, $0\\le y\\le 10^9$) giving the coordinates of a cell.  All\n$x$-coordinates are distinct from each-other, and similarly for the\n$y$-coordinates. \n</div>\n\n<p>To be as clear as possible regarding directions and coordinates, if a cow is in cell $(x,y)$ and moves north,\nshe ends up in cell $(x,y+1)$.  If she instead had moved east, she would end up\nin cell $(x+1, y)$.\n\n</p><p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint $N$ lines of output.  Line $i$ in the output should describe the number of\ncells worth of grass that the $i$th cow in the input eats.  If a cow eats an\ninfinite amount of grass, output \"Infinity\" for that cow.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\nE 3 5\nN 5 3\nE 4 6\nE 10 4\nN 11 2\nN 8 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n3\nInfinity\nInfinity\n2\n5\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 2-5, all coordinates are at most $100$.</li><li>In test cases 6-10, there are no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1061"
    },
    {
      "title": "Problem 1. Uddered but not Herd",
      "subtitle": "USACO 2021 January Contest, Bronze",
      "id": 1083,
      "year": "2021",
      "division": "bronze",
      "number": "1",
      "problem": "A little known fact about cows is that they have their own version of the\nalphabet, the \"cowphabet\".  It consists of the 26 letters 'a' through 'z', but\nwhen a cow speaks the cowphabet, she lists these letters in a specific ordering\nthat might be different from the order 'abcdefghijklmnopqrstuvwxyz' we are used to\nhearing.\n\n<p>To pass the time, Bessie the cow has been humming the cowphabet over and  over\nagain, and Farmer John is curious how many times she's hummed it.\n\n</p><p>Given a lowercase string of letters that Farmer John has heard Bessie say,\ncompute the minimum number of times Bessie must have hummed the entire cowphabet\nin order for Farmer John to have heard the given string. Farmer John isn't\nalways paying attention to what Bessie hums, and so he might have missed some of\nthe letters that Bessie has hummed.  The string you are told consists of just\nthe letters that he remembers hearing.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains the 26 lowercase letters 'a' through 'z' in the\norder they appear in the cowphabet.  The next line contains the string  of\nlowercase letters that Farmer John heard Bessie say.  This string has length at\nleast $1$ and at most $1000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint the minimum number of times Bessie must have hummed the entire cowphabet.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">abcdefghijklmnopqrstuvwxyz\nmood\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example, the cowphabet is ordered the same as the normal alphabet.\n\n</p><p>Bessie must have hummed the cowphabet at least three times. It is possible for\nBessie to have only hummed the cowphabet three times, and for Farmer John to\nhave heard the letters in uppercase as denoted below.\n\n</p><p></p><pre>abcdefghijklMnOpqrstuvwxyz\nabcdefghijklmnOpqrstuvwxyz\nabcDefghijklmnopqrstuvwxyz\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 2-5, the cowphabet is the same as the normal alphabet.</li><li>Test cases 6-10 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1083"
    },
    {
      "title": "Problem 2. Even More Odd Photos",
      "subtitle": "USACO 2021 January Contest, Bronze",
      "id": 1084,
      "year": "2021",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John is yet again trying to take a photograph of his $N$ cows\n($2 \\leq N \\leq 1000$).\n\n<p>Each cow has an integer \"breed ID\" number in the range $1 \\ldots 100$.  Farmer\nJohn has a very peculiar idea in mind for his photo: he wants to partition all\nthe cows into disjoint groups (in other words, place each cow in exactly one group) and then\nline up the groups so the sum of the breed IDs of  the cows in the first group\nis even, the sum of the IDs in the second group is odd, and so on, alternating\nbetween even and odd.  \n\n</p><p>What is the maximum possible number of groups Farmer John can form?  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$.  The next line contains $N$ \nspace-separated integers giving the breed IDs of the $N$ cows.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe maximum possible number of groups in Farmer John's photo. It can be shown\nthat at least one feasible grouping exists.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n1 3 5 7 9 11 13\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example, one way to form the maximum number of three groups is as\nfollows. Place 1 and 3 in the first group, 5, 7, and 9 in the second group, and\n11 and 13 in the third group.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n11 2 17 13 1 15 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>In this example, one way to form the maximum number of five groups is as\nfollows. Place 2 in the first group, 11 in the second group, 13 and 1 in the\nthird group, 15 in the fourth group, and 17 and 3 in the fifth group.\n\n</p><p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1084"
    },
    {
      "title": "Problem 3. Just Stalling",
      "subtitle": "USACO 2021 January Contest, Bronze",
      "id": 1085,
      "year": "2021",
      "division": "bronze",
      "number": "3",
      "problem": "Farmer John has $N$ cows ($1\\le N \\leq 20$) of heights $a_1 \\ldots a_N$. His\nbarn has $N$ stalls with max height limits $b_1 \\ldots b_N$ (so for example, if\n$b_5 = 17$, then a cow of height at most $17$ can reside in stall $5$). In how\nmany distinct ways can Farmer John arrange his cows so that each cow is in a \ndifferent stall, and so that the height limit is satisfied for every stall? \n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.  The second line contains $N$  space-separated\nintegers $a_1,a_2,\\ldots,a_N$.  The third line contains $N$ space-separated\nintegers $b_1,b_2,\\ldots,b_N$.  All heights and limits are in the range\n$[1,10^9]$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of ways Farmer John can place each cow into a different stall such\nthat the height limit is satisfied for every stall.  Note that the  large size\nof the output might require the use of a 64-bit integer, like a \"long long\" in\nC++.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 2 3 4\n2 4 3 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n</pre>\n\n<p>In this example, we cannot place the third cow into the first stall  since\n$3=a_3&gt;b_1=2$.  Similarly, we cannot place the fourth cow into the  first or\nthird stalls.  One way to satisfy the height limits is to assign cow $1$ to stall\n$1$, cow $2$ to stall $2$, cow $3$ to stall $3$, and cow $4$ to stall $4$. \n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-5 satisfy $N\\le 8$.</li><li>Test cases 6-12 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Shreyas Thumathy\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1085"
    },
    {
      "title": "Problem 1. Year of the Cow",
      "subtitle": "USACO 2021 February Contest, Bronze",
      "id": 1107,
      "year": "2021",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John's cows are excited to learn that Chinese New Year was recently \ncelebrated, ushering in the year of the Ox, always a bovine favorite.\n\n<p>As we know, the zodiac animals for Chinese calendar years follow a 12-year\ncycle: Ox, Tiger, Rabbit, Dragon, Snake, Horse, Goat, Monkey, Rooster, Dog, Pig,\nRat, and then Ox again.  \n\n</p><p>Bessie the cow is proud to say she was born in a year of the Ox, many years ago.\nHer friend Elsie wants to know how many years apart from Bessie she was born,\nand hopes you can help her deduce this by looking at relationships between the \nbirth years of several cows on the farm.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains an integer $N$ ($1 \\leq N \\leq 100$).  Each of\nthe next $N$ lines contains an 8-word phrase specifying the relationship between\nthe birth years of two cows.  It is of the form\n\n<p>\"Mildred born in previous Dragon year from Bessie\", \n\n</p><p>or\n\n</p><p>\"Mildred born in next Dragon year from Bessie\"\n\n</p><p>The last word is the name of a cow on the farm, which is either \"Bessie\" or a\ncow that has already been mentioned in a previous line of input.\n\n</p><p>The first word is the name of a cow on the farm who is not \"Bessie\" and who  has\nnot yet been mentioned  in the input.  All cow names have at most 10 characters\nthat are in the range a..z or A..Z.\n\n</p><p>The 5th word is one of the 12 zodiac animals above.\n\n</p><p>The 4th word is either \"previous\" or \"next\".  For example, if the phrase is\n\"Mildred born in previous Dragon year from Bessie\", then Mildred's year of \nbirth was the Dragon year closest to and strictly before (not equal to) \nBessie's birth year.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease output the number of years by which Bessie and Elsie's birth years differ.\nIt is guaranteed that this number can be determined by the input given.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\nMildred born in previous Dragon year from Bessie\nGretta born in previous Monkey year from Mildred\nElsie born in next Ox year from Gretta\nPaulina born in next Dog year from Bessie\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12\n</pre>\n\n<p>In the input above,\n\n</p><p></p><ul><li>Elsie was born 12 years before Bessie.</li><li>Mildred was born 9 years\nbefore Bessie.</li><li>Gretta was born 17 years before Bessie.</li><li>Paulina\nwas born 9 years after Bessie.</li></ul>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1107"
    },
    {
      "title": "Problem 2. Comfortable Cows",
      "subtitle": "USACO 2021 February Contest, Bronze",
      "id": 1108,
      "year": "2021",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John's pasture can be regarded as a large 2D grid of square \"cells\"\n(picture a huge chessboard). Initially, the pasture is empty.\n\n<p>Farmer John will add $N$ ($1\\le N\\le 10^5$) cows to the pasture one by one. The\n$i$th cow will occupy a cell $(x_i,y_i)$ that is distinct from the cells\noccupied  by all other cows ($0\\le x_i,y_i\\le 1000$).\n\n</p><p>A cow is said to be \"comfortable\" if it is horizontally or vertically adjacent\nto exactly three other cows.  Farmer John is interested in counting the\ncomfortable cows on his farm.  For each $i$ in the range $1 \\ldots N$, output\nthe  total number of comfortable cows after the $i$th cow is added to the\npasture.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains a single integer $N$.  Each of the next $N$ lines\ncontains two space-separated integers, indicating the $(x,y)$ coordinates of a\ncow's cell. It is guaranteed that all these cells are distinct.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe $i$th line of output should contain the total number of comfortable cows \nafter the first $i$ cows are added to the pasture.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8\n0 1\n1 0\n1 1\n1 2\n2 1\n2 2\n3 1\n3 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n0\n0\n1\n0\n0\n1\n2\n</pre>\n\n<p>After the first four cows are added, the cow at $(1,1)$ is comfortable.\n\n</p><p>After the first seven cows are added, the cow at $(2,1)$ is comfortable.\n\n</p><p>After the first eight cows are added, the cows at $(2,1)$ and $(2,2)$ are\ncomfortable.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-4 satisfy $N\\le 400$.</li><li>Test cases 5-12 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1108"
    },
    {
      "title": "Problem 3. Clockwise Fence",
      "subtitle": "USACO 2021 February Contest, Bronze",
      "id": 1109,
      "year": "2021",
      "division": "bronze",
      "number": "3",
      "problem": "The fence surrounding Farmer John's largest pasture has fallen into disrepair,\nand he has finally decided to replace it with a new fence.  \n\n<p>Unfortunately, as Farmer John is laying out the new fence, a large bee ends up\nchasing him around the pasture, and as a result, the fence ends up following a\nrather irregular path.  The fence can be described by a string of characters,\neach either \"N\" (north), \"E\" (east), \"S\" (south),  or \"W\" (west).  Each\ncharacter describes a 1-meter run of the fence.  For example, if the string is\nNESW, this means the fence starts by moving north for 1 meter, then east for 1\nmeter, then south for 1 meter, then west for  1 meter, returning to its starting\npoint.  \n\n</p><p>The fence ends at the position where it started, and this is the only point\nvisited more than once by the path of the fence (and the starting point is only\nre-visited once, at the end).  As a result, the fence does indeed enclose a\nsingle connected region of the grassy pasture, even though this region could\nhave a rather strange shape.  \n\n</p><p>Farmer John is curious if the path in which he laid the fence traveled clockwise\n(with the enclosed region on the right side of the fence as one walks along the\npath of the fence in the order specified by the string) or counter-clockwise\n(with the enclosed region on the left side of the fence).  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains an integer $N$ ($1 \\leq N \\leq 20$).  Each  of\nthe next $N$ lines contains a string of length at least 4 and at most 100,\ndescribing a single fence path.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each of the $N$ fence paths described in the input, output a line containing\neither \"CW\" (clockwise) or \"CCW\" (counterclockwise).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\nNESW\nWSSSEENWNEESSENNNNWWWS\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">CW\nCCW\n</pre>\n\n<p>The two fence paths with @ denoting the starting point:\n\n</p><p></p><pre>*&gt;*\n^ v\n@&lt;*\n\n  *&lt;*&lt;*&lt;*\n  v     ^\n*&lt;@     *\nv       ^\n* *&gt;*&gt;* *\nv ^   v ^\n* *&lt;* * *\nv   ^ v ^\n*&gt;*&gt;* *&gt;*\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1109"
    },
    {
      "title": "Problem 1. Acowdemia I",
      "subtitle": "USACO 2021 US Open, Bronze",
      "id": 1131,
      "year": "2021",
      "division": "bronze",
      "number": "1",
      "problem": "Bessie the cow has enrolled in a computer science PhD program, driven by her\nlove of computer science and also the \nallure of one day becoming \"Dr. Bessie\". Having worked for some time on her\nacademic research, she has now published  $N$ papers ($1 \\leq N \\leq 10^5$), and\nher $i$-th paper has accumulated $c_i$ citations ($0 \\leq c_i \\leq 10^5$) from\nother papers in the research literature.\n\n<p>Bessie has heard that an academic's success can be measured by their $h$-index.\nThe $h$-index is the largest number $h$ such that the researcher has at least\n$h$ papers each with at least $h$ citations. For example, a researcher with $4$\npapers and respective citation counts $(1,100,2,3)$ has an $h$-index of $2$,\nwhereas if the citation counts were $(1,100,3,3)$ then the $h$-index would be\n$3$.\n\n</p><p>To up her $h$-index, Bessie is planning to write a survey article citing several\nof her past papers. Due to page limits, she can include at most $L$ citations in\nthis survey ($0 \\leq L \\leq 10^5$), and of course she can cite each of her\npapers at most once.\n\n</p><p>Help Bessie determine the maximum $h$-index she may achieve after writing this\nsurvey.\n\n</p><p>Note that Bessie's research advisor should probably inform her at some point\nthat writing a survey solely to increase one's $h$ index is ethically dubious;\nother academics are not recommended to follow Bessie's example here.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$ and $L$.\n\n<p>The second line contains $N$ space-separated integers $c_1,\\ldots, c_N$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe maximum $h$-index Bessie may achieve after writing the survey.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 0\n1 100 2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>Bessie cannot cite any of her past papers. As mentioned above, the $h$-index for\n$(1,100,2,3)$ is $2$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 1\n1 100 2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>If Bessie cites her third paper, then the citation counts become $(1,100,3,3)$.\nAs mentioned above, the $h$-index for these counts is $3$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 1-7 satisfy $N \\leq 100$.</li><li>Test cases 8-10 satisfy $N \\leq 1000$.</li><li>Test cases 11-17 satisfy $N \\leq 10^5$.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1131"
    },
    {
      "title": "Problem 2. Acowdemia II",
      "subtitle": "USACO 2021 US Open, Bronze",
      "id": 1132,
      "year": "2021",
      "division": "bronze",
      "number": "2",
      "problem": "Bessie is applying to computer science graduate school, and has secured an\ninterview at a prestigious computer science lab. However, to avoid offending\nanyone, Bessie is interested in determining the relative seniority of the $N$\ncurrent members of the lab ($1 \\leq N \\leq 100$). No two members of the lab have\nthe same seniority, but determining their seniorities may be tricky. To do so,\nBessie will look at the lab's publications.\n\n<p>Each publication contains an author list, which is an ordering of all $N$ lab\nmembers. The list is in decreasing order of the effort each lab member\ncontributed to the paper. If multiple researchers put in equivalent effort, then\nthey are ordered alphabetically. Since more senior lab members have additional\nadministrative duties, a  a more senior researcher never puts in more effort\nthan a more junior researcher. \n\n</p><p>For example, in a lab consisting of a junior student Elsie, a more senior Prof.\nMildred, and a very senior Prof. Dean, then there may be a paper\n(Elsie-Mildred-Dean) if all of them put in different amounts of effort (i.e.\nElsie puts in more effort than Mildred, and Mildred more than Dean). However,\nthey may also have a paper in the order (Elsie-Dean-Mildred) if Mildred and Dean\nput in the same amount of effort and Elsie puts in more effort.\n\n</p><p>Given $K$ publications from this lab ($1 \\leq K \\leq 100$), help Bessie\ndetermine for all pairs of researchers in this lab who is more senior, if it's\npossible to tell.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains two integers, $K$ and $N$.\n\n<p>The second line contains $N$ space-separated strings, giving the names of the\nmembers of  the lab.  Each consists of lowercase letters and is at most 10\ncharacters long.\n\n</p><p>Each of the next $K$ lines contains $N$ space-separated strings, indicating the\nauthor list for one publication.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe output should consist of $N$ lines, with $N$ characters per line. On line\n$i$, for any $j \\neq i$, character $j$ should be $1$ if the $i$th member is\ndefinitely more senior than the $j$th member, $0$ if the $i$th member is\ndefinitely more junior than the $j$th member, and $?$ if it's impossible to tell\nfrom the given publications.\n\n<p>Character $i$ on line $i$ should be $B$ because that's Bessie's favorite letter.\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 3\ndean elsie mildred\nelsie mildred dean\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">B11\n0B?\n0?B\n</pre>\n\n<p>In this first example, the single paper (elsie-mildred-dean) does not give \nenough information to determine whether Elsie is more senior than Mildred or\nvice versa.  However, one can deduce that Dean must be more senior than both, so\nthe seniority orderings Elsie&lt;Mildred&lt;Dean and Mildred&lt;Elsie&lt;Dean are both\npossible.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 3\nelsie mildred dean\nelsie mildred dean\nelsie dean mildred\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">B00\n1B0\n11B\n</pre>\n\n<p>In this second example, the only seniority ordering consistent with both papers\nis Elsie&lt;Mildred&lt;Dean, since one can second paper builds on the knowledge  from\nthe first example above and helps us deduce that Mildred is also more senior than\nElsie.\n\n</p><p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1132"
    },
    {
      "title": "Problem 3. Acowdemia III",
      "subtitle": "USACO 2021 US Open, Bronze",
      "id": 1133,
      "year": "2021",
      "division": "bronze",
      "number": "3",
      "problem": "Bessie is a busy computer science graduate student. However, even graduate\nstudents need friends. As a result, Farmer John has opened a pasture with the\nexplicit purpose of helping Bessie and other cows form lasting friendships.\n\n<p>Farmer John's pasture can be regarded as a large 2D grid of square \"cells\"\n(picture a huge chess board). Each cell is labeled with:\n\n</p><p></p><ul><li>C if the cell contains a cow.</li><li>G if the cell contains grass.</li><li>. if the cell contains neither a cow nor grass.</li></ul>\n\n<p>For two distinct cows to become friends, the cows must choose to meet at  a\ngrass-covered square that is directly horizontally or vertically adjacent  to\nboth of them.  During the process, they eat the grass in the grass-covered\nsquare, so future pairs of cows cannot use that square as a meeting point. The\nsame cow may become friends with more than one other cow,  but no pair of cows\nmay meet and become friends more than once.\n\n</p><p>Farmer John is hoping that numerous pairs of cows will meet and become friends\nover time.  Please determine the maximum number of new friendships between\ndistinct pairs of cows that can possibly be created by the end of this\nexperience.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $M$ ($N,M \\leq 1000$).\n\n<p>The next $N$ lines each contain a string of $M$ characters, describing the pasture.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nCount the maximum number of pairs of cows that can become friends by the end\nof the experience.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 5\n.CGGC\n.CGCG\nCGCG.\n.CC.C\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>If we label the cow in row $i$ and column $j$ with coordinates $(i,j)$, then in\nthis example there are cows at $(1,2)$, $(1,5)$, $(2,2)$, $(2,4)$, $(3,1)$, $(3,3)$, $(4,2)$,\n$(4,3)$, and $(4,5)$. One way for four pairs of cows to become friends is as\nfollows:\n\n</p><p></p><ul><li>The cows at $(2,2)$ and $(3,3)$ eat the grass at $(3,2)$.</li><li>The cows at $(2,2)$ and $(2,4)$ eat the grass at $(2,3)$.</li><li>The cows at $(2,4)$ and $(3,3)$ eat the grass at $(3,4)$.</li><li>The cows at $(2,4)$ and $(1,5)$ eat the grass at $(2,5)$.</li></ul>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $N=2$.</li><li>Test cases 5-12 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1133"
    },
    {
      "title": "Problem 1. Lonely Photo",
      "subtitle": "USACO 2021 December Contest, Bronze",
      "id": 1155,
      "year": "2021",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John has recently acquired $N$ new cows $(3 \\le N \\le 5 \\times 10^5)$, \neach of whose breed is either Guernsey or Holstein.  \n\n<p>The cows are currently standing in a line, and Farmer John wants take a photo\nof every sequence of three or more consecutive cows.  However, he doesn't want\nto take a photo in which there is exactly one cow whose breed is Guernsey or\nexactly one cow  whose breed is Holstein --- he reckons this singular cow would\nfeel isolated and self-conscious.  After taking a photo of every sequence of \nthree or more cows, he throws out all of these so-called \"lonely\" photos, in\nwhich there is exactly one Guernsey or exactly one Holstein.\n\n</p><p>Given the lineup of cows, please help Farmer John determine how many lonely\nphotos he will throw out.  Two photos are different if they start or end at\ndifferent cows in the lineup.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\n\n<p>The first line of input contains $N$.\n\n</p><p>The second line contains a string of $N$ characters. The $i$th character is G if\nthe $i$th cow in the line is a Guernsey. Otherwise, it will be an H and the\n$i$th cow is a Holstein.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n\n<p>Please print the number of photos Farmer John will throw out because they are\nlonely.\n\n</p><p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\nGHGHG\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>Every substring of length 3 in this example contains exactly one cow whose \nbreed is Guernsey or exactly one cow whose breed is Holstein --- so these\nsubstrings represent lonely photos and would be thrown out by Farmer John.  \nAll longer substrings (GHGH, HGHG, and GHGHG) are\nacceptable to him.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li> Test cases 2 through 4 have $N \\le 50$. </li><li> Test cases 5 through 10 have $N \\le 5000$. </li><li> For a bit more challenge, test case 11 has no other constraints.  Note that\nthe answer for this case might be too large to fit into a standard 32-bit\ninteger, and might require use of larger integer types (e.g., a 64-bit \"long\nlong int\" type in C++). </li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1155"
    },
    {
      "title": "Problem 2. Air Cownditioning",
      "subtitle": "USACO 2021 December Contest, Bronze",
      "id": 1156,
      "year": "2021",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John's cows $N$ are very particular about the room temperature in their\nbarn.  Some cows like the temperature to be on the cooler side, while others\nprefer more warmth.  \n\n<p>Farmer John's barn contains a sequence of $N$ stalls, numbered $1 \\ldots N$,\neach containing a single cow.  The $i$-th cow prefers the temperature of her stall\nto be $p_i$, and right now the temperature in her stall is $t_i$.  In order to\nmake sure every cow is comfortable, Farmer John installs a new air conditioning\nsystem that is  controlled in a somewhat interesting way.  He can send commands\nto the system telling it to either raise or lower the temperature in a\nconsecutive series of stalls by  1 unit --- for example \"raise the temperature\nin stalls $5 \\ldots 8$ by 1 unit\".   The series of stalls could be as short as\njust a single stall.\n\n</p><p>Please help Farmer John determine the minimum number of commands he needs to\nsend his new  air conditioning system so that every cow's stall is at the ideal\ntemperature for its resident cow.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$.  The next line contains the $N$\nnon-negative integers $p_1 \\ldots p_N$, separated by spaces.  The final line\ncontains the $N$ non-negative integers $t_1 \\ldots t_N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease write a single integer as output containing the minimum number of\ncommands Farmer John needs to use.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1 5 3 3 4\n1 2 2 2 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>One optimal set of commands Farmer John can use might be the following:\n\n</p><p></p><pre>Initial temperatures: 1 2 2 2 1\nIncrease stalls 2..5: 1 3 3 3 2\nIncrease stalls 2..5: 1 4 4 4 3\nIncrease stalls 2..5: 1 5 5 5 4\nDecrease stalls 3..4: 1 5 4 4 4\nDecrease stalls 3..4: 1 5 3 3 4\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-5 satisfy $N \\leq 100$.</li><li>Test cases 6-8 satisfy $N \\leq 1000$.</li><li>Test cases 9-10 satisfy $N \\leq 100,000$.</li><li>In test cases 1-6 and 9, temperature values are at most $100$.</li><li>In test cases 7-8 and 10, temperature values are at most $10,000$.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1156"
    },
    {
      "title": "Problem 3. Walking Home",
      "subtitle": "USACO 2021 December Contest, Bronze",
      "id": 1157,
      "year": "2021",
      "division": "bronze",
      "number": "3",
      "problem": "Bessie the cow is trying to walk from her favorite pasture back to her barn.\n\n<p>The pasture and farm are on an $N \\times N$ grid ($2 \\leq N \\leq 50$), with her\npasture in the top-left corner and the barn in the bottom-right corner. Bessie\nwants to get home as soon as possible, so she will only walk down and to the\nright. There are haybales in some locations that Bessie cannot walk through; she\nmust walk around them.\n\n</p><p>Bessie is feeling a little tired today, so she wants to change the direction she\nwalks at most $K$ times ($1 \\leq K \\leq 3$) .\n\n</p><p>How many distinct paths can Bessie walk from her favorite pasture to the barn?\nTwo paths are distinct if Bessie walks in a square in one path but not in the\nother.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe input for each test case contains $T$ sub-test cases, each describing a\ndifferent farm and each of which must be  answered correctly to pass the full\ntest case.  The first line of input  contains $T$ ($1 \\leq T \\leq 50$).  Each of\nthe $T$ sub-test cases follow.\n\n<p>Each sub-test case starts with a line containing $N$ and $K$. \n\n</p><p>The next $N$ lines each contain a string of $N$ characters. Each character is\neither $\\texttt{.}$ if it is empty or $\\texttt{H}$ if it has a haybale. It is\nguaranteed the top-left and bottom-right corners of the farm will not contain\nhaybales.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $T$ lines, the $i$th line containing the number of distinct paths Bessie\ncan take in the $i$th sub-test case.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n3 1\n...\n...\n...\n3 2\n...\n...\n...\n3 3\n...\n...\n...\n3 3\n...\n.H.\n...\n3 2\n.HH\nHHH\nHH.\n3 3\n.H.\nH..\n...\n4 3\n...H\n.H..\n....\nH...\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n4\n6\n2\n0\n0\n6\n</pre>\n\n<p>We'll denote Bessie's possible paths as strings of D's and R's, indicating that\nBessie moved either down or right, respectively.\n\n</p><p>In the first sub-test case, Bessie's two possible walks are DDRR and RRDD.\n\n</p><p>In the second sub-test case, Bessie's four possible walks are DDRR, DRRD, RDDR,\nand RRDD.\n\n</p><p>In the third sub-test case, Bessie's six possible walks are DDRR, DRDR, DRRD,\nRDDR, RDRD, and RRDD.\n\n</p><p>In the fourth sub-test case, Bessie's two possible walks are DDRR and RRDD.\n\n</p><p>In the fifth and sixth sub-test cases, it is impossible for Bessie to walk back\nto the barn.\n\n</p><p>In the seventh sub-test case, Bessie's six possible walks are DDRDRR, DDRRDR,\nDDRRRD, RRDDDR, RRDDRD, and RRDRDD.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test case 2 satisfies $K = 1$.</li><li>Test cases 3-5 satisfy $K = 2$.</li><li>Test cases 6-10 satisfy $K = 3$.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1157"
    },
    {
      "title": "Problem 1. Herdle",
      "subtitle": "USACO 2022 January Contest, Bronze",
      "id": 1179,
      "year": "2022",
      "division": "bronze",
      "number": "1",
      "problem": "The cows have created a new type of puzzle called Herdle that has become a viral\nsensation in the bovine world.  \n\n<p>Each day, a new puzzle is released for the cows to solve.  The puzzle takes the \nform of a 3 by 3 grid representing a field on the farm, with each square of the\nfield occupied by a cow of a certain breed.  There are only 26 possible breeds,\neach identified by a different capital letter in the range A through Z.  One is\nnot told the pattern of breeds in the field --- the goal is to figure them out\nthrough a series of guesses.  \n\n</p><p>In each guess, the cows enter a 3 by 3 grid of uppercase letters indicating a\npossible way the field could be filled with cows.  Some of the squares in the\nguess might be correct.  These are highlighted in green to let the cows know\nthat they are correct.  Other squares in the guess might be filled with a cow of\nthe right breed but in the wrong place.  These are highlighted in yellow.\n\n</p><p>The number of yellow-highlighted squares can help provide an indication of the\nnumber of cows of a certain breed.  For example, suppose the guess grid contains\n4 cows of breed A, and the answer grid contains 2 cows of breed A, where none \nof the A's line up (i.e., none of them should be colored green).  In this case,\nonly two of the A's in the guess grid should be highlighted yellow.  More \nprecisely, if there are $x$ cows of a certain breed in the guess grid and \n$y &lt; x$ cows of this breed in the answer grid (not counting cows in the right\nplace that lead to green highlights), then only $y$ of the $x$ cows in the guess\ngrid should be highlighted yellow.\n\n</p><p>Given the correct answer grid and a grid representing a guess at this answer,\nplease calculate the number of green and yellow highlighted squares.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first 3 lines of input gives the grid representing the correct answer.  The\nnext 3 lines of  input represent a guess of this answer.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint two lines of output.  On the first line of output, print the number of\nsquares that should be highlighted in green. On the second line, print the\nnumber of squares that should be highlighted in yellow.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">COW\nSAY\nMOO\nWIN\nTHE\nIOI\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n1\n</pre>\n\n<p>In this example, the O in the middle of the last row is correct, so it is \nhighlighted in green.  The letter W is in the wrong place, so it is highlighted\nin yellow.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">AAA\nBBB\nCCC\nAYY\nAAA\nZZZ\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n2\n</pre>\n\n<p>Here, one of the As is in the correct place, so it is highlighted green.  Of\nthe remaining As, none are in the right place, and since there are two of these\nremaining in the answer grid, two should be highlighted yellow.\n\n</p><p>Problem credits: Brian Dean, inspired by the 'Wordle' app\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1179"
    },
    {
      "title": "Problem 2. Non-Transitive Dice",
      "subtitle": "USACO 2022 January Contest, Bronze",
      "id": 1180,
      "year": "2022",
      "division": "bronze",
      "number": "2",
      "problem": "To pass the time in the barn, the cows enjoy playing simple dice games. One of\nthese games is played with two dice X and Y.  Both are rolled,  and the winner\nis the die with the higher number showing.  If both land on the same number,\nthey are re-rolled (they may be re-rolled several times, as long as there\ncontinues to be a tie).  We say die X beats die Y if it is more likely that X\nwill win this game than Y.\n\n<p>Consider the following 4-sided dice:\n\n</p><p>Die A has the numbers 4, 5, 6, and 7 on its sides.\n\n</p><p>Die B has the numbers 2, 4, 5, and 10 on its sides.\n\n</p><p>Die C has the numbers 1, 4, 8, and 9 on its sides.\n\n</p><p>These dice satisfy a rather intriguing property: A beats B, B beats C, and C\nalso beats A. In particular, none of the three dice is the \"best\", beating the\nother two. In this case, where no two dice tie and no single die is the best, we\ncall the set of three dice \"non-transitive\".  In a non-transitive set of three\ndice, each die beats one other die, and loses to another die.\n\n</p><p>Given the numbers on the faces of two 4-sided dice A and B, please help the cows\ndetermine whether there is a way to assign numbers to the faces of a third die C\nso the set of dice is non-transitive.  The numbers on the faces of all dices\nmust be integers in the range from 1 through 10 inclusive.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nEach input consists of several independent test cases, all of which need to be\nsolved correctly to solve the entire input case. The first line of input\ncontains $T$ ($1\\le T\\le 10$), the number of test cases you need to solve. \n\n<p>The following $T$ lines each describe one test case in terms of 8 numbers: the\nnumbers on the four sides of die A, and the numbers on the four sides of die B. \nAll numbers are in the range 1 through 10, not necessarily in sorted order. The\nsame number might appear multiple times, even on the same die.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease write $T$ lines of output.  The $k$th line should be 'yes' if it is\npossible to design a die C to make the $k$th test case into a set of\nnon-transitive dice, and 'no' otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n4 5 6 7 2 4 5 10\n2 2 2 2 1 1 1 1\n1 1 1 1 2 2 2 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">yes\nno\nno\n</pre>\n\n<p>The first test case corresponds to the example given above.  In the second test\ncase, there is no die C that can make the set of dice non-transitive.  The\nanswer is no for the same reason for the third test case.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1180"
    },
    {
      "title": "Problem 3. Drought",
      "subtitle": "USACO 2022 January Contest, Bronze",
      "id": 1181,
      "year": "2022",
      "division": "bronze",
      "number": "3",
      "problem": "The grass has dried up in Farmer John's pasture due to a drought. After hours of\ndespair and contemplation, Farmer John comes up with the brilliant idea of\npurchasing corn to feed his precious cows.\n\n<p>FJ’s $N$ cows ($1 \\leq N \\leq 10^5$) are arranged in a line such that the\n$i$th cow in line has a hunger level of $h_i$ ($0 \\leq h_i \\leq 10^9$). As cows\nare social animals and insist on eating together, the only way FJ can decrease\nthe hunger levels of his cows is to select two adjacent cows $i$ and $i+1$ and\nfeed each of them a bag of corn, causing each of their hunger levels to decrease\nby one. \n\n</p><p>FJ wants to feed his cows until all of them have the same non-negative hunger\nlevel. Please help FJ determine the minimum number of bags of corn he needs to\nfeed his cows to make this the case, or print $-1$ if it is impossible. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nEach input consists of several independent test cases, all of which need to be \nsolved correctly to solve the entire input case.  The first line contains $T$\n($1\\le T\\le 100$), giving the number of test cases to be solved. The $T$ test\ncases follow, each described by a pair of lines.  The first  line of each pair\ncontains $N$, and the second contains $h_1,h_2,\\ldots,h_N$. It is guaranteed\nthat the sum of  $N$ over all test cases is at most $10^5$.  Values of $N$ might\ndiffer in each test case.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease write $T$ lines of output, one for each test case.\n</div>\n\n<p>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n3\n8 10 5\n6\n4 6 4 4 6 4\n3\n0 1 0\n2\n1 2\n3\n10 9 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">14\n16\n-1\n-1\n-1\n</pre>\n\n<p>For the first test case, give two bags of corn to both cows $2$ and $3$, then\ngive five bags of corn to both cows $1$ and $2$, resulting in each cow having a\nhunger level of $3$.\n\n</p><p>For the second test case, give two bags to both cows $1$ and $2$, two bags to\nboth cows $2$ and $3$, two bags to both cows $4$ and $5$, and two bags to both\ncows $5$ and $6$, resulting in each cow having a hunger level of $2$. \n\n</p><p>For the remaining test cases, it is impossible to make the hunger levels of the\ncows equal.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>All test cases in input 2 satisfy $N \\leq 3$ and $h_i\\le 100$.</li><li>All test cases in inputs 3-8 satisfy $N\\le 100$ and $h_i\\le 100$.</li><li>All test cases in inputs 9-14 satisfy $N\\le 100$.</li><li>Input 15 satisfies no additional constraints.</li></ul>\n\n<p>Additionally, $N$ is always even in inputs 3-5 and 9-11, and $N$ is always odd\nin inputs 6-8 and 12-14.\n\n</p><p></p></div>\n\n<p>\n</p><p>Problem credits: Arpan Banerjee\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1181"
    },
    {
      "title": "Problem 1. Sleeping in Class",
      "subtitle": "USACO 2022 February Contest, Bronze",
      "id": 1203,
      "year": "2022",
      "division": "bronze",
      "number": "1",
      "problem": "Bessie the cow was excited to recently return to in-person learning!\nUnfortunately, her instructor, Farmer John, is a very boring lecturer, and so\nshe ends up falling asleep in class often.\n\n<p>Farmer John has noticed that Bessie has not been paying attention in class. He\nhas asked another student in class, Elsie, to keep track of the number of times\nBessie falls asleep in a given class. There are $N$ class periods\n($1\\le N\\le 10^5$), and Elsie logs that Bessie fell asleep $a_i$ times\n($0\\le a_i\\le 10^6$) in the $i$-th class period. The total number of times Bessie fell\nasleep across all class periods is at most $10^6$.\n\n</p><p>Elsie, feeling very competitive with Bessie, wants to make Farmer John feel like\nBessie is consistently falling asleep the same number of times in every class --\nmaking it appear that the issue is entirely Bessie's fault, with no dependence\non Farmer John's sometimes-boring lectures. The only way Elsie may modify the\nlog is by combining two adjacent class periods.  For example, if\n$a=[1,2,3,4,5],$ then if Elsie combines the second and third class periods the\nlog will become $[1,5,4,5]$.\n\n</p><p>Help Elsie compute the minimum number of modifications to the log that she needs\nto make so that she can make all the numbers in the log equal.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nEach input will contain $T$ ($1\\le T\\le 10$) test cases that should be solved\nindependently.\n\n<p>The first line contains $T$, the number of test cases to be solved. The $T$ test\ncases follow, each described by a pair of lines. The first line of each pair\ncontains $N$, and the second contains $a_1,a_2,\\ldots,a_N$. \n\n</p><p>It is guaranteed that within each test case, the sum of all values in $a$ is at\nmost $10^6$. It is also guaranteed that the sum of $N$ over all test cases is at\nmost\n$10^5$.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n\n<p>Please write $T$ lines of output, giving the minimum number of modifications\nElsie could perform to make all the log entries equal for each case.\n\n</p><p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n6\n1 2 3 1 1 1\n3\n2 2 3\n5\n0 0 0 0 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n2\n0\n</pre>\n\n<p>For the first test case in this example, Elsie can change her log to consist\nsolely of 3s with 3 modifications.\n\n</p><p></p><pre>   1 2 3 1 1 1\n-&gt; 3 3 1 1 1\n-&gt; 3 3 2 1\n-&gt; 3 3 3\n</pre>\n\n<p>For the second test case, Elsie can change her log to 7 with 2 modifications.\n\n</p><p></p><pre>   2 2 3\n-&gt; 2 5\n-&gt; 7\n</pre>\n\n<p>For the last test case, Elsie doesn’t need to perform any operations; the log\nalready consists of equal entries.\n\n</p><p>\n</p><p>Problem credits: Jesse Choe\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1203"
    },
    {
      "title": "Problem 2. Photoshoot 2",
      "subtitle": "USACO 2022 February Contest, Bronze",
      "id": 1204,
      "year": "2022",
      "division": "bronze",
      "number": "2",
      "problem": "In what seems to be a familiar occurrence, Farmer John is lining up his $N$ cows \n($1\\le N\\le 10^5$), conveniently numbered $1\\ldots N$, for a photograph. \n\n<p>Initially, the cows are lined up in the order $a_1,a_2,\\ldots,a_N$ from left to right.\nFarmer John's goal is to line up the cows in the order $b_1,\\ldots,b_N$ from\nleft to right. To accomplish this, he may perform a series of modifications to\nthe ordering.  Each modification consists of choosing a single cow and moving \nit some number of positions to the left. \n\n</p><p>Please count the minimum number of modifications required in order for Farmer John\nto line up his cows in the desired order.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$.  The second line contains $a_1,a_2,\\ldots,a_N$.\nThe third line contains $b_1,b_2,\\ldots,b_N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint the minimum number of modifications required to produce Farmer John's desired ordering.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1 2 3 4 5\n1 2 3 4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n</pre>\n\n<p>In this example, the cows are already in the desired order, so no modifications are required.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n5 1 3 2 4\n4 5 2 1 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this example, two modifications suffice. Here is one way Farmer John can rearrange his cows:\n\n</p><p></p><ol><li>Choose cow $4$ and move it four positions to the left.</li><li>Choose cow $2$ and move it two positions to the left.</li></ol>\n\n<p></p><pre>   5 1 3 2 4\n-&gt; 4 5 1 3 2\n-&gt; 4 5 2 1 3\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 3-6 satisfy $N\\le 100$.</li><li>Test cases 7-10 satisfy $N\\le 5000$.</li><li>Test cases 11-14 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1204"
    },
    {
      "title": "Problem 3. Blocks",
      "subtitle": "USACO 2022 February Contest, Bronze",
      "id": 1205,
      "year": "2022",
      "division": "bronze",
      "number": "3",
      "problem": "In an effort to improve her vocabulary, Bessie the cow has obtained a set of\nfour wooden blocks, each one a cube with a letter of the alphabet written on\neach of its six sides.  She is learning how to spell by arranging the blocks in\na row so the letters on top of the blocks spell words.\n\n<p>Given the letters on each of Bessie's four blocks, and a list of words she would\nlike to spell, please determine which of words on her list she will be able to\nspell successfully using the blocks.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$ ($1\\le N\\le 10$), the number of words that\nBessie would like to spell.  The next four lines each contain a string with six\nuppercase letters, representing the letters on the six sides of one of Bessie's\nblocks.  The next $N$ lines contain the $N$ words Bessie would like to spell. \nEach of these is between 1 and 4 uppercase letters long.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each word on Bessie's list, output YES if she is able to spell it using the\nblocks and NO otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\nMOOOOO\nOOOOOO\nABCDEF\nUVWXYZ\nCOW\nMOO\nZOO\nMOVE\nCODE\nFARM\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YES\nNO\nYES\nYES\nNO\nNO\n</pre>\n\n<p>In this example, Bessie can spell COW, ZOO, and MOVE.  Sadly, she cannot spell\nMOO, since the only block with an M cannot also be used for an O. She cannot\nspell FARM since there is no block with a letter R.  She  cannot spell CODE\nsince the C, D, and E all belong to the same block.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1205"
    },
    {
      "title": "Problem 1. Photoshoot",
      "subtitle": "USACO 2022 US Open Contest, Bronze",
      "id": 1227,
      "year": "2022",
      "division": "bronze",
      "number": "1",
      "problem": "<p>Farmer John, desperate to win the award for best cow photographer at the county\nfair, is trying to take the perfect photograph of his $N$ cows\n($2 \\leq N \\leq 2\\cdot 10^5$, $N$ even).\n\n</p><p>Farmer John owns cows of two potential breeds: Guernseys and Holsteins.  \nTo make his photo as aesthetic as possible, he wants to line up his \ncows so that as many Guernseys are in even-numbered positions in the line \nas possible (the first position in the line is an odd position, the next is\nan even position, and so on). Due to his lack of strong\ncommunication with his cows, the only way he can achieve his goal is by asking\neven length \"prefixes\" of his cows to reverse themselves (a prefix \nconsists of the range of cows from the first cow up to the $j$th cow\nfor some position $j$).\n\n</p><p>Please count the minimum number of reversals required for Farmer John to achieve\nhis goal.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains the value of $N$.\n\n<p>The second line contains a string of length $N,$ specifying the initial ordering\nof the cows from left to right. Each 'H' represents a Holstein, while each 'G'\nrepresents a Guernsey. \n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the minimum number of reversals needed on a single line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">14\nGGGHGHHGHHHGHG\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>In this example, it suffices to reverse the prefix consisting of the first six\ncows. \n\n</p><p></p><pre>   GGGHGHHGHHHGHG (Before)\n-&gt; HGHGGGHGHHHGHG (After)\n</pre>\n\n<p>Before the reversal, four Guernseys were at even positions. After the reversal,\nsix Guernseys are at even positions. It is impossible for there to be more than\nsix Guernseys at even positions.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-6 satisfy $N\\le 1000$.</li><li>Test cases 7-11 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Aryansh Shrivastava\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1227"
    },
    {
      "title": "Problem 2. Counting Liars",
      "subtitle": "USACO 2022 US Open Contest, Bronze",
      "id": 1228,
      "year": "2022",
      "division": "bronze",
      "number": "2",
      "problem": "<p>Bessie the cow is hiding somewhere along the number line. Each of Farmer John's\n$N$ other cows ($1\\le N\\le 1000$) have a piece of information to share: the\n$i$-th cow either says that Bessie is hiding at some location less than or equal\nto $p_i$, or that Bessie is hiding at some location greater than or equal to\n$p_i$\n($0\\le p_i\\le 10^9$).\n\n</p><p>Unfortunately, it is possible that no hiding location is consistent with the\nanswers of all of the cows, meaning that not all of the cows are telling the\ntruth.  Count the minimum number of cows that must be lying.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The next $N$ lines each contain either L or G, followed by an integer $p_i$. L\nmeans that the $i$-th cow says that Bessie's hiding location is less than  or\nequal to $p_i$, and G means that $i$-th cow says that Bessie's hiding location \nis greater than or equal to $p_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe minimum number of cows that must be lying.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\nG 3\nL 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n</pre>\n\n<p>It is possible that no cow is lying.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\nG 3\nL 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>At least one of the cows must be lying.\n\n</p><p>\n</p><p>Problem credits: Jesse Choe\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1228"
    },
    {
      "title": "Problem 3. Alchemy",
      "subtitle": "USACO 2022 US Open Contest, Bronze",
      "id": 1229,
      "year": "2022",
      "division": "bronze",
      "number": "3",
      "problem": "<p>Always keen to learn new hobbies, Bessie the cow is learning how to transform\nmetals. She has $a_i$ ($0 \\le a_i \\le 10^4$) units of metal $i$ for\n$1 \\le i \\le N \\le 100$. Furthermore, she knows $K$ ($1\\le K&lt;N$) recipes where\nshe can combine one unit each of several metals to make one unit of a metal with\na higher number than all constituent metals. It is additionally guaranteed that\nfor each metal, Bessie knows at most one recipe to make it.\n\n</p><p>Compute the maximum number of units of metal $N$ Bessie can possibly have after\nsome series of transformations.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\n\n<p>The first line contains $N$.\n\n</p><p>The second line contains $N$ integers, $a_i$.\n\n</p><p>The third line contains $K$.\n\n</p><p>The next $K$ lines start with two integers $L$ and $M$ ($M\\ge 1$), followed by\n$M$ integers. The last $M$ integers represent the constituent metals in the\nrecipe that are used to form one unit of metal $L$. It is guaranteed that $L$ is\nlarger than the $M$ last integers.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n\n<p>Output the maximum number of units of metal $N$ Bessie can possibly have after\napplying some series of zero or more transformations.\n\n</p><p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n2 0 0 1 0\n3\n5 2 3 4\n2 1 1\n3 1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>In this example, the following is an optimal series of transformations:\n</p><ol><li>Transform one unit of metal 1 into metal 2.</li><li>Transform one unit of\nmetal 2 into metal 3.</li><li>Transform one unit of metal 3 and metal 4 into\nmetal 5.</li></ol>\n\n<p>Now Bessie is left with one unit of metal 1 and one unit of metal 5. She cannot\nform any additional units of metal 5.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test case 2, for $1 \\le i &lt; N$, one unit of metal $i$ can be transformed\ninto one unit of metal $i+1$.</li><li>In test cases 3 and 4, each recipe\ntransforms one unit of one metal into another.</li><li>Test cases 5 through 11\nsatisfy no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1229"
    },
    {
      "title": "Problem 1. Cow College",
      "subtitle": "USACO 2022 December Contest, Bronze",
      "id": 1251,
      "year": "2022",
      "division": "bronze",
      "number": "1",
      "problem": "Farmer John is planning to open a new university for cows!   \n\n<p></p><figure><img src=\"current/data/fig_1_college_bronze_dec22.png\" width=\"400px/\"><figcaption></figcaption></figure>\n\n<p>There are $N$ ($1 \\le N \\le 10^5$) cows who could potentially attend this\nuniversity. Each cow is willing to pay a maximum tuition of $c_i$\n($1 \\le c_i \\le 10^6$). Farmer John can set the tuition that all cows must pay\nto enroll. If this tuition is greater than the maximum a cow is\nwilling to pay, then the cow will not attend the university. Farmer John wants\nto make the most possible money so he can pay his instructors a fair wage. \nPlease  determine how much money he can make, and how much tuition he should\ncharge.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$. The second line contains $N$ integers\n$c_1, c_2, \\dots, c_N$, where $c_i$ is the maximum tuition cow $i$ is willing to\npay.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease output the maximum amount of money Farmer John can make and the optimal\ntuition he should charge. If there are multiple solutions, output the solution\nwith the smallest optimal tuition.\n\n<p><strong>Note that the large size of integers involved in this problem may require the\nuse  of 64-bit integer data types (e.g., a \"long\" in Java, a \"long long\" in\nC/C++).</strong>\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 6 4 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12 4\n</pre>\n\n<p>If Farmer John charges $4$, then $3$ cows will attend, allowing him to make\n$3 \\cdot 4 = 12$.\n\n</p><p>\n\n</p><p>\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li> Test cases 2 through 4 have $c_i \\le 1{,}000$. </li><li> Test cases 5 through 8 have $N \\le 5{,}000$. </li><li> Test cases 9 through 12 have no additional constraints. </li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Freddie Tang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1251"
    },
    {
      "title": "Problem 2. Feeding the Cows",
      "subtitle": "USACO 2022 December Contest, Bronze",
      "id": 1252,
      "year": "2022",
      "division": "bronze",
      "number": "2",
      "problem": "Farmer John has $N$ ($1 \\le {N} \\le {10^5}$) cows, the breed of each being\neither a Guernsey or a Holstein. They have lined up horizontally with the cows occupying positions \nlabeled from\n$1\\dots N$.\n\n<p>Since all the cows are hungry, FJ decides to plant grassy patches on some\nof the positions $1\\dots N$. Guernseys and Holsteins prefer different types of\ngrass, so if Farmer John decides to plant grass at some location, he must choose\nto planting either Guernsey-preferred grass or Holstein-preferred grass --- he\ncannot plant both at the same location. Each patch of grass planted can feed an\nunlimited number of cows of the appropriate breed. \n\n</p><p>Each cow is willing to move a maximum of $K$ ($0 \\le {K} \\le N-1$) positions to\nreach a patch. Find the minimum number of patches needed to feed all the cows.\nAlso, print a configuration of patches that uses the minimum amount of patches\nneeded to feed the cows. Any configuration that satisfies the above conditions\nwill be considered correct.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nEach input contains $T$ test cases, each describing an arrangement of cows. The\nfirst line of input contains $T$ ($1 \\le T \\le 10$). Each of the $T$ test cases\nfollow.\n\n<p>Each test case starts with a line containing $N$ and $K$. The next line will\ncontain a string of length $N$, where each character denotes the breed of the\n$i$th cow (G meaning Guernsey and H meaning Holstein).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each of the $T$ test cases, please write two lines of output. For the first\nline, print the minimum number of patches needed to feed the cows. For the\nsecond line, print a string of length $N$ that describes a configuration  that\nfeeds all the cows with the minimum number of patches. The $i$th character,\ndescribing the $i$th position, should be a '.' if there is no patch, a 'G' if\nthere is a patch that feeds Guernseys, and a 'H' if it feeds Holsteins. Any\nvalid configuration will be accepted.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n5 0\nGHHGG\n5 1\nGHHGG\n5 2\nGHHGG\n5 3\nGHHGG\n5 4\nGHHGG\n2 1\nGH\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\nGHHGG\n3\n.GH.G\n2\n..GH.\n2\n...GH\n2\n...HG\n2\nHG\n</pre>\n\n<p>Note that for some test cases, there are multiple acceptable configurations that\nmanage to feed all cows while using the minimum number of patches. For example,\nin the fourth test case, another acceptable answer would be:\n\n</p><p></p><pre>.GH..\n</pre>\n\n<p>This corresponds to placing a patch feeding Guernseys on the 2nd position and a\npatch feeding Holsteins on the third position. This uses the optimal number of\npatches and ensures that all cows are within 3 positions of a patch they prefer.\n\n</p><p>\n\n</p><p>\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2 through 4 have $N \\le 10$. </li><li>Inputs 5 through 8 have $N \\le 40$. </li><li>Inputs 9 through 12 have $N \\le 10^5$. </li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Mythreya Dharani\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1252"
    },
    {
      "title": "Problem 3. Reverse Engineering",
      "subtitle": "USACO 2022 December Contest, Bronze",
      "id": 1253,
      "year": "2022",
      "division": "bronze",
      "number": "3",
      "problem": "Elsie has a program that takes as input an array of $N$ ($1\\le N\\le 100$)\nvariables $b[0],\\dots,b[N-1]$, each equal to zero or one,  and returns the\nresult of applying a sequence of if / else if / else statements on the input. \nEach statement examines the value of at most one input variable, and returns \neither zero or one.  An example of such a program might be:\n\n<p></p><pre class=\"prettyprint\">if (b[1] == 1) return 1;\nelse if (b[0] == 0) return 0;\nelse return 1;\n</pre>\n\n<p>For example, if the input to the program above is \"10\" (that is, $b[0] = 1$ and\n$b[1] = 0$), then the output should be 1.\n\n</p><p>Elsie has told Bessie the correct output for $M$ ($1\\le M\\le 100$) different\ninputs. Bessie is now trying to reverse engineer Elsie's program. Unfortunately,\nElsie might have lied; it may be the case that no program of the form above is\nconsistent with what Elsie said. \n\n</p><p>For each of $T$ ($1\\le T\\le 10$) test cases, determine whether Elsie must be\nlying or not.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$, the number of test cases.\n\n<p>Each test case starts with two integers $N$ and $M$, followed by $M$ lines, each\ncontaining a string of $N$ zeros and ones representing an input (that is, the\nvalues of $b[0] \\ldots b[N-1]$) and an additional character (zero or one)\nrepresenting the output. Consecutive test cases are separated by newlines.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output \"OK\" or \"LIE\" on a separate line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n\n1 3\n0 0\n0 0\n1 1\n\n2 4\n00 0\n01 1\n10 1\n11 1\n\n1 2\n0 1\n0 0\n\n2 4\n00 0\n01 1\n10 1\n11 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">OK\nOK\nLIE\nLIE\n</pre>\n\n<p>Here's a valid program for the first test case:\n\n</p><p></p><pre class=\"prettyprint\">if (b[0] == 0) return 0;\nelse return 1;\n</pre>\n\n<p>Another valid program for the first test case:\n\n</p><p></p><pre class=\"prettyprint\">if (b[0] == 1) return 1;\nelse return 0;\n</pre>\n\n<p>A valid program for the second test case:\n\n</p><p></p><pre class=\"prettyprint\">if (b[1] == 1) return 1;\nelse if (b[0] == 0) return 0;\nelse return 1;\n</pre>\n\n<p>Clearly, there is no valid program corresponding to the third test case, because\nElsie's program must always produce the same output for the same input.\n\n</p><p>It may be shown that there is no valid program corresponding to the last test\ncase.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2 and 3 have $N = 2$. </li><li>Inputs 4 and 5 have $M = 2$. </li><li>Inputs 6 through 12 have no additional constraints. </li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1253"
    },
    {
      "title": "Problem 1. Leaders",
      "subtitle": "USACO 2023 January Contest, Bronze",
      "id": 1275,
      "year": "2023",
      "division": "bronze",
      "number": "1",
      "problem": "\n<p>Farmer John has $N$ cows ($2 \\leq N \\leq 10^5$). Each cow has a breed that is\neither Guernsey or Holstein.  As is often the case, the cows are standing in a\nline, numbered $1 \\ldots N$ in this order.  \n\n</p><p>Over the course of the day, each cow writes down a list of cows.  Specifically,\ncow $i$'s list contains the range of cows starting with herself (cow $i$) up to\nand including cow $E_i$ ($i \\leq E_i \\leq N$).\n\n</p><p>FJ has recently discovered that each breed of cow has exactly one distinct\nleader. FJ does not know who the leaders are, but he knows that each leader must\nhave a list that includes all the cows of their breed, or the other breed's \nleader (or both).\n\n</p><p>Help FJ count the number of pairs of cows that could be leaders. It is\nguaranteed that there is at least one possible pair.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The second line contains a string of length $N$, with the $i$th character\ndenoting the breed of the $i$th cow (G meaning Guernsey and H meaning Holstein).\nIt is guaranteed that there is at least one Guernsey and one Holstein.\n\n</p><p>The third line contains $E_1 \\dots E_N$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the number of possible pairs of leaders.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\nGHHG\n2 4 3 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>The only valid leader pair is $(1, 2)$. Cow $1$'s list contains the other\nbreed's leader (cow $2$). Cow $2$'s list contains all cows of her breed\n(Holstein). \n\n</p><p>No other pairs are valid. For example, $(2,4)$ is invalid since cow $4$'s list\ndoes not contain the other breed's leader, and it also does not contain all cows\nof her breed.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\nGGH\n2 3 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>There are two valid leader pairs, $(1, 3)$ and $(2, 3)$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING</h4>\n\n<p></p><ul><li>Inputs 3-5: $N \\leq 100$</li><li>Inputs 6-10: $N \\leq 3000$</li><li>Inputs 11-17: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Mythreya Dharani\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1275"
    },
    {
      "title": "Problem 2. Air Cownditioning II",
      "subtitle": "USACO 2023 January Contest, Bronze",
      "id": 1276,
      "year": "2023",
      "division": "bronze",
      "number": "2",
      "problem": "\n<p>With the hottest recorded summer ever at Farmer John's farm, he needs a way to\ncool down his cows. Thus, he decides to invest in some air conditioners. \n\n</p><p>Farmer John's $N$ cows ($1 \\leq N \\leq 20$) live in a barn that contains a \nsequence of stalls in a row, numbered $1 \\ldots 100$.  Cow $i$ occupies a range\nof  these stalls, starting from stall $s_i$ and ending with stall $t_i$.  The\nranges of stalls occupied by different cows are all disjoint from each-other. \nCows have different cooling requirements.  Cow $i$ must be cooled by an amount\n$c_i$, meaning every stall occupied by cow $i$ must have its temperature reduced\nby at least $c_i$ units.\n\n</p><p>The barn contains $M$ air conditioners, labeled $1 \\ldots M$\n($1 \\leq M \\leq 10$). The $i$th air conditioner costs $m_i$ units of money to\noperate ($1 \\leq m_i \\leq 1000$) and cools the range of stalls starting from\nstall $a_i$ and ending with stall $b_i$.  If running, the $i$th air conditioner\nreduces the temperature of all the stalls in this range by $p_i$\n($1 \\leq p_i \\leq 10^6$).  Ranges of stalls covered by air conditioners may\npotentially overlap.\n\n</p><p>Running a farm is no easy business, so FJ has a tight budget. Please determine\nthe minimum amount of money he needs to spend to keep all of his cows\ncomfortable. It is guaranteed that if FJ uses all of his conditioners, then all\ncows will be comfortable.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\n\n<p>The first line of input contains $N$ and $M$.\n\n</p><p>The next $N$ lines describe cows.  The $i$th of these lines contains $s_i$,\n$t_i$, and $c_i$.\n\n</p><p>The next $M$ lines describe air conditioners.  The $i$th of these lines contains\n$a_i$, $b_i$, $p_i$, and $m_i$.\n\n</p><p>For every input other than the sample, you can assume that $M = 10$.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n\n<p>Output a single integer telling the minimum amount of money FJ needs to spend to\noperate enough air conditioners to satisfy all his cows (with the conditions\nlisted above). \n\n</p><p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 4\n1 5 2\n7 9 3\n2 9 2 3\n1 6 2 8\n1 2 4 2\n6 9 1 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>One possible solution that results in the least amount of money spent is to\nselect those that cool the intervals $[2, 9]$, $[1, 2]$, and $[6, 9]$, for a\ncost of $3 + 2 + 5 = 10$.\n\n</p><p>\n\n</p><p>Problem credits: Aryansh Shrivastava and Eric Hsu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1276"
    },
    {
      "title": "Problem 3. Moo Operations",
      "subtitle": "USACO 2023 January Contest, Bronze",
      "id": 1277,
      "year": "2023",
      "division": "bronze",
      "number": "3",
      "problem": "\n<p>Because Bessie is bored of playing with her usual text string where the only\ncharacters are 'C,' 'O,' and 'W,' Farmer John gave her $Q$ new strings\n($1 \\leq Q \\leq 100$), where the only characters are 'M' and 'O.' Bessie's\nfavorite word out of the characters 'M' and 'O' is obviously \"MOO,\" so she wants\nto turn each of the $Q$ strings into \"MOO\" using the following operations:\n\n</p><p></p><ol><li>Replace either the first or last character with its opposite (so that 'M'\nbecomes 'O' and 'O' becomes 'M'). </li><li>Delete either the first or last character. </li></ol>\n\n<p>Unfortunately, Bessie is lazy and does not want to perform more operations than\nabsolutely necessary. For each string, please help her determine the minimum\nnumber of operations necessary to form \"MOO\" or output $-1$ if this is\nimpossible. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains the value of $Q$.\n\n<p>The next $Q$ lines of input each consist of a string, each of its characters\neither 'M' or 'O'. Each string has at least 1 and at most 100 characters.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the answer for each input string on a separate line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\nMOMMOM\nMMO\nMOO\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n-1\n0\n</pre>\n\n<p>A sequence of $4$ operations transforming the first string into \"MOO\" is as\nfollows:\n\n</p><p></p><pre>Replace the last character with O (operation 1)\nDelete the first character (operation 2)\nDelete the first character (operation 2)\nDelete the first character (operation 2)\n</pre>\n\n<p>The second string cannot be transformed into \"MOO.\" The third string is already\n\"MOO,\" so no operations need to be performed.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Inputs 2-4: Every string has length at most $3$.</li><li>Inputs 5-11: No additional constraints.</li></ul>\n</div>\n\n<p>\n\n</p><p>Problem credits: Aryansh Shrivastava\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1277"
    },
    {
      "title": "Problem 1. Hungry Cow",
      "subtitle": "USACO 2023 February Contest, Bronze",
      "id": 1299,
      "year": "2023",
      "division": "bronze",
      "number": "1",
      "problem": "\n<p>Bessie is a hungry cow. Each day, for dinner, if there is a haybale in the barn,\nshe will eat one haybale. Farmer John does not want Bessie to starve, so some\ndays he sends a delivery of haybales, which arrive in the morning (before\ndinner). In particular, on day $d_i$, Farmer John sends a delivery of $b_i$\nhaybales ($1\\leq d_i \\leq 10^{14}$, $1 \\leq b_i \\leq 10^9$).\n\n</p><p>Compute the total number of haybales Bessie will eat during the first $T$ days.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $T$ ($1 \\le N \\le 10^5$, $1 \\le T \\le 10^{14}$).\n\n<p>The next $N$ lines each contain $d_i$ and $b_i$. It is  additionally guaranteed\nthat $1\\le d_1&lt;d_2&lt;\\dots &lt; d_N\\le T$. \n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the number of haybales that Bessie will eat during the first $T$ days.\n\n<p><strong>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 5\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\nTwo haybales arrive on the morning of day $1$. Bessie eats one haybale for\ndinner on day $1$ and another haybale on day $2$. On days $3 \\ldots 5$, there\nare no more haybales for Bessie to eat. In total, Bessie eats $2$ haybales\nduring the first $5$ days. \n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 5\n1 2\n5 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\nTwo haybales arrive on the morning of day $1$. Bessie eats one haybale on days\n$1$ and $2$. There are no haybales for Bessie to eat on days $3$ and $4$. On the\nmorning of day $5$, $10$ haybales arrive. Bessie eats one haybale for dinner on\nday $5$. In total, Bessie eats $3$ haybales during the first $5$ days.\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 5\n1 10\n5 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n$10$ haybales arrive on the morning of day $1$. Bessie eats one haybale on days\n$1 \\ldots 4$. On the morning of day $5$, another $10$ haybales arrive, meaning\nthere are $16$ haybales in the barn. For dinner on day $5$, Bessie eats another\nhaybale. In total, Bessie eats $5$ haybales during the first $5$ days.\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 4-7: $T \\le 10^5$</li><li>Inputs 8-13: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1299"
    },
    {
      "title": "Problem 2. Stamp Grid",
      "subtitle": "USACO 2023 February Contest, Bronze",
      "id": 1300,
      "year": "2023",
      "division": "bronze",
      "number": "2",
      "problem": "\n<p>A <strong>stamp painting</strong> is a black and white painting on an $N \\times N$ canvas,\nwhere certain cells are inked while others are blank. It can be described by an\n$N\\times N$  array of characters ($1\\le N\\le 20$). The $i$th entry of the $j$th\ncolumn of the array is equal to * if the canvas contains ink at that square and\n. otherwise.\n\n</p><p>Bessie has a stamp painting that she would like to create, so Farmer John has\nlent her a single $K\\times K$ ($1\\le K\\le N$) stamp to do this and an empty\n$N \\times N$ canvas. Bessie can repeatedly rotate the stamp clockwise by\n$90^{\\circ}$  and stamp anywhere on the grid as long as the stamp is entirely\ninside the grid. Formally, to stamp, Bessie chooses integers $i,j$ such that\n$i \\in [1,N-K+1]$ and $j \\in [1, N-K+1]$; for each $(i',j')$ such that\n$1 \\le i', j' \\le K$, canvas cell $(i+i'-1, j+j'-1)$ is painted black if the\nstamp has ink at $(i', j')$. Bessie can rotate the stamp at any time between\nstampings. Once a canvas cell is painted black, it remains black.\n\n</p><p>Farmer John is wondering whether it's possible for Bessie to create her desired\nstamp painting with his stamp. For each of $T$ ($1 \\le T \\le 100$) test cases,\nhelp Farmer John answer this question.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $T$, the number of test cases.\n\n<p>Each test case starts with an integer $N$ followed by $N$ lines, each containing\na string of *s and .s, representing Bessie's desired stamp painting. The next\nline contains $K$ and is followed by $K$ lines, each containing a string of *s\nand .s, representing Farmer John's stamp.\n\n</p><p>Consecutive test cases are separated by newlines.\n</p></div>\n<div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output \"YES\" or \"NO\" on separate lines.\n</div>\n<h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n\n2\n**\n*.\n1\n*\n\n3\n.**\n.**\n***\n2\n.*\n**\n\n3\n...\n.*.\n...\n3\n.*.\n...\n...\n\n3\n**.\n.**\n..*\n2\n.*\n*.\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YES\nYES\nNO\nYES\n</pre>\n\n<p>In the first test case, Bessie can perform the following sequence of stampings:\n</p><ol><li>Stamp at $(1,1)$</li><li>Stamp at $(1,2)$</li><li>Stamp at $(2,1)$</li></ol>\n\n<p>In the second test case, Bessie can perform the following sequence of stampings:\n</p><ol><li>Stamp at $(2,2)$</li><li>Stamp at $(2,1)$</li><li>Rotate\n$90^{\\circ}$</li><li>Rotate $90^{\\circ}$</li><li> Stamp at $(1,2)$</li></ol>\n\n<p>In the third test case, it is impossible to paint the middle cell.\n\n</p><p>In the fourth test case, Bessie can perform the following sequence of stampings:\n</p><ol><li>Rotate $90^{\\circ}$</li><li>Stamp at $(1,1)$</li><li>Stamp at\n$(1,2)$</li><li>Stamp at $(2,2)$</li></ol>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi and Claire Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1300"
    },
    {
      "title": "Problem 3. Watching Mooloo",
      "subtitle": "USACO 2023 February Contest, Bronze",
      "id": 1301,
      "year": "2023",
      "division": "bronze",
      "number": "3",
      "problem": "\n<p>Bessie likes to watch shows on Mooloo. Because Bessie is a busy cow, she has\nplanned a schedule for the next $N$ ($1 \\leq N \\leq 10^5$) days that she will\nwatch Mooloo. Because Mooloo is a paid subscription service, she now needs to\ndecide how to minimize the amount of money she needs to pay.\n\n</p><p>Mooloo has an interesting subscription system: it costs $d + K$\n($1\\le K\\le 10^9$) moonies to subscribe to Mooloo for $d$ consecutive days. You\ncan start a subscription at any time, and you can start a new subscription as\nmany times as you desire if your current subscription expires. Given this,\nfigure out the minimum amount of moonies Bessie needs to pay to fulfill her\nschedule.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\n\n<p>The first line contains integers $N$ and $K$.\n\n</p><p>The second line contains $N$ integers describing the days Bessie will watch\nMooloo:\n$1\\le d_1&lt;d_2&lt;\\dots&lt;d_N\\le 10^{14}$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n\n<p><strong>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n</p></div>\n<h4>SAMPLE INPUT:</h4><pre class=\"in\">2 4\n7 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">7\n</pre>\n\n<p>Bessie buys a three-day subscription on day 7, spending $d+K = 3 + 4 = 7$\nmoonies.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 3\n1 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n</pre>\n\n<p>Bessie first buys a one-day subscription on day 1, spending $d+K = 1+3 = 4$\nmoonies.  Bessie also buys a one-day subscription on day 10, spending\n$d+K = 1+3 = 4$ moonies. In total, Bessie spends 8 moonies.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Inputs 3-5: $N \\le 10$ </li><li>Inputs 6-12: No additional constraints.</li></ul>\n</div>\n\n<p>\n\n</p><p>Problem credits: Danny Mittal\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1301"
    },
    {
      "title": "Problem 1. FEB",
      "subtitle": "USACO 2023 US Open Contest, Bronze",
      "id": 1323,
      "year": "2023",
      "division": "bronze",
      "number": "1",
      "problem": "\n<p>Bessie and Elsie are plotting to overthrow Farmer John at last! They plan it out\nover $N$ ($1\\le N\\le 2\\cdot 10^5$) text messages. Their conversation can be\nrepresented by a string $S$ of length $N$ where $S_i$ is either $B$ or $E$,\nmeaning the $i$th message was sent by Bessie or Elsie, respectively. \n\n</p><p>However, Farmer John hears of the plan and attempts to intercept their\nconversation. Thus, some letters of $S$ are $F$, meaning Farmer John obfuscated\nthe message and the sender is unknown.\n\n</p><p>The <em>excitement level</em> of a non-obfuscated conversation is the number of\ntimes a cow double-sends - that is, the number of occurrences of substring $BB$\nor $EE$ in $S$. You want to find the excitement level of the original message,\nbut you don’t know which of Farmer John’s messages were actually Bessie’s\n/ Elsie’s. Over all possibilities, output all possible excitement levels of\n$S$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line will consist of one integer $N$.\n\n<p>The next line contains $S$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFirst output $K$, the number of distinct excitement levels possible. On the next\n$K$ lines, output the excitement levels, in increasing order.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\nBEEF\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n1\n2\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">9\nFEBFEBFEB\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n2\n3\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10\nBFFFFFEBFE\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n2\n4\n6\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 4-8: $N\\le 10$</li><li>Inputs 9-20: No additional\nconstraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: William Yue and Claire Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1323"
    },
    {
      "title": "Problem 2. Moo Language",
      "subtitle": "USACO 2023 US Open Contest, Bronze",
      "id": 1324,
      "year": "2023",
      "division": "bronze",
      "number": "2",
      "problem": "\n<p>Farmer John is interested in better interacting with his fellow cows, so he\ndecided he will learn the moo language!\n\n</p><p>Moo language is actually quite similar to English, but more minimalistic. There\nare only four types of words: nouns, transitive verbs, intransitive verbs, and\nconjunctions. Every two consecutive words must be separated by a space.  There\nare also only two types of punctuation: periods and commas.  When a period or\ncomma appears after a word, it appears directly after the word, and is then\nfollowed  by a space if another word appears next.\n\n</p><p>A sentence needs to follow one of the following formats:\n\n</p><p></p><ul><li>Type 1: noun + intransitive verb.</li><li>Type 2: noun + transitive verb + noun(s). Specifically, at least one noun\nmust follow the transitive verb, and there must be a comma in front of every \nfollowing noun besides the first following noun.\n</li></ul>\n\n<p>Two sentences may be joined into a compound sentence if a conjunction is placed\nin between them.  The resulting compound sentence cannot be further joined with\nother sentences or other compound sentences.  Every sentence (or compound\nsentence, if two sentences are joined) must end with a period.\n\n</p><p>Farmer John has a word bank of $N$ words, $C$ commas, and $P$ periods\n($1 \\leq P,C\\le N \\leq 10^3$). He may only use a word or punctuation mark as\nmany times as it appears in the word bank. Help him output a sequence of\nsentences containing the maximum possible number of words.\n\n</p><p>Each input file contains $T$ ($1\\le T\\le 100$) independent instances of this\nproblem.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$, the number of instances. Each instance is specified\nas follows:\n\n<p>The first line consists of three integers, $N$, $C$, and $P$.\n\n</p><p>The $N$ following lines will consist of two strings. The first string will be\nthe word itself that FJ can use (a string of at least 1 and at most 10 lowercase\nletters), and the second string will be either one of the following: noun,\ntransitive-verb, intransitive-verb, or conjunction, denoting the type of the\nword. It is possible the same word occurs more than once in FJ's word bank, but\nit will always have the same type each time it appears.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nIn the first line, output the maximum possible number of words.\n\n<p>In the second line, output any sequence of sentences with the maximum possible\nnumber of words. Any valid sequence will be accepted.\n\n</p><p><strong>The grader is sensitive to whitespace, so make sure not to output any\nextraneous spaces, particularly at the end of each line.</strong>\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 1 1\nbessie noun\n10 5 4\nbessie noun\ntaught transitive-verb\nflew intransitive-verb\nelsie noun\nfarmer noun\njohn noun\nand conjunction\nand conjunction\nnhoj noun\nmooed intransitive-verb\n24 5 4\nbut conjunction\nbessie noun\ntaught transitive-verb\nflew intransitive-verb\nelsie noun\nfarmer noun\njohn noun\nand conjunction\nand conjunction\nnhoj noun\nmooed intransitive-verb\nbob noun\nimpressed transitive-verb\ncow noun\nimpressed transitive-verb\nleaped intransitive-verb\nelsie noun\nbella noun\nbuttercup noun\npushed transitive-verb\nmooed intransitive-verb\nenvy noun\njohn noun\nnhoj noun\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n\n9\nnhoj mooed. farmer taught elsie, bessie and john flew.\n23\nnhoj mooed. nhoj impressed john, farmer, elsie, bessie and cow impressed bob. bella pushed elsie and buttercup flew. envy mooed but john leaped.\n</pre>\n\n<p>For the first test case, the only valid sequence is the empty sequence. For each\nof the next two test cases, it is possible to construct a sequence of sentences\nusing every word from the word bank except for one.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-6: $N\\le 10$</li><li>Inputs 7-11: $N\\le 100$</li><li>Inputs 12-16: $N\\le 1000$</li><li>Inputs with remainder 2 when divided by 5: There are no transitive\nverbs.</li><li>Inputs with remainder 3 when divided by 5: There are no intransitive\nverbs.</li><li>Inputs with remainder 4 when divided by 5: There are no conjunctions.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Chongtian Ma\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1324"
    },
    {
      "title": "Problem 3. Rotate and Shift",
      "subtitle": "USACO 2023 US Open Contest, Bronze",
      "id": 1325,
      "year": "2023",
      "division": "bronze",
      "number": "3",
      "problem": "\n<p><strong>**Note: The time limit for this problem is 4s, 2x the default.**</strong>\n\n</p><p>To celebrate the start of spring, Farmer John's $N$ cows ($1 \\leq N \\leq 2 \\cdot 10^5$) have invented an intriguing new dance, where they stand in a circle and re-order themselves in a predictable way.\n\n</p><p>Specifically, there are $N$ positions around the circle, numbered sequentially from $0$ to $N-1$, with position $0$ following position $N-1$.  A cow resides at each position.  The cows are also numbered sequentially from $0$ to $N-1$.  Initially, cow $i$ starts in position $i$.  You are told a set of $K$ positions $0=A_1&lt;A_2&lt; \\ldots&lt; A_K&lt;N$ that are \"active\", meaning the cows in these positions are the next to move ($1 \\leq K \\leq N$).  \n\n</p><p>In each minute of the dance, two things happen.  First, the cows in the active positions rotate: the cow at position $A_1$ moves to position $A_2$, the cow at position $A_2$ moves to position $A_3$, and so on, with the cow at position $A_K$ moving to position $A_1$.  All of these $K$ moves happen simultaneously, so the after the rotation is complete, all of the active positions still contain exactly one cow.  Next, the active positions themselves shift:\n$A_1$ becomes $A_1+1$, $A_2$ becomes $A_2+1$, and so on (if $A_i = N-1$ for some active position, then $A_i$ circles back around to $0$).\n\n</p><p>Please calculate the order of the cows after $T$ minutes of the dance ($1\\le T\\le 10^9$).\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains three integers $N$, $K$, and $T$.\n\n<p>The second line contains $K$ integers representing the initial set of active positions\n$A_1,A_2, \\ldots A_K$.  Recall that $A_1 = 0$ and that these are given in increasing order.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the order of the cows after $T$ minutes, starting with the cow in position $0$, separated by\nspaces.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 3 4\n0 2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 2 3 4 0\n</pre>\n\n<p>For the example above, here are the cow orders and $A$ for the first four\ntimesteps:\n\n</p><p></p><pre>Initial, T = 0: order = [0 1 2 3 4], A = [0 2 3]\nT = 1: order = [3 1 0 2 4]\nT = 1: A = [1 3 4]\nT = 2: order = [3 4 0 1 2]\nT = 2: A = [2 4 0]\nT = 3: order = [2 4 3 1 0]\nT = 3: A = [3 0 1]\nT = 4: order = [1 2 3 4 0]\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-7: $N \\leq 1000, T \\leq 10000$</li><li>Inputs 8-13: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Claire Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1325"
    },
    {
      "title": "Problem 1. Candy Cane Feast",
      "subtitle": "USACO 2023 December Contest, Bronze",
      "id": 1347,
      "year": "2023",
      "division": "bronze",
      "number": "1",
      "problem": "\n<p>Farmer John's cows have quite the sweet tooth, and they especially enjoy eating\ncandy canes!  FJ has $N$ total cows, each with a certain initial height and he\nwants to feed them  $M$ candy canes, each also of varying height\n($1\\le N,M\\le 2\\cdot 10^5$).  \n\n</p><p>FJ plans to feed the candy canes one by one to the cows, in the order they are\ngiven in the input.  To feed a candy cane to his cows, he will hang the candy\ncane so that initially the candy cane is just touching the ground. The cows will\nthen line up one by one, in the order given by the input, and go up to the candy\ncane, each eating up to their height (since they cannot reach any higher). The\ncandy cane stays suspended in place where it is initially set up  and is not\nlowered to the ground, even after cows eat the bottom of the candy cane. It is \npossible a cow may eat nothing during her turn, if the base of the candy cane is\nalready above that cow's height.  After every cow has had their turn, the cows\ngrow in height by how many units of candy cane they ate, and Farmer John hangs\nthe next candy cane and the cows repeat the process again (with cow 1\nagain being the first to start eating the next candy cane).\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $M$.\n\n<p>The next line contains the initial heights of the $N$ cows, each in the range\n$[1,10^9]$.\n\n</p><p>The next line contains the heights of the $M$ candy canes, each in the range\n$[1,10^9]$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe final heights of each of the $N$ cows on separate lines.\n\n<p><strong>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\n3 2 5\n6 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">7\n2\n7\n</pre>\n\n<p>The first candy cane is $6$ units tall. \n</p><ol><li>The first cow eats the portion of the first candy cane up to height $3$,\nafter which the remaining portion of the first candy cane occupies heights\n$[3,6]$. </li><li>The second cow is not tall enough to eat any of the remaining portion of the\nfirst candy cane.\n</li><li>The third cow eats two additional units of the first candy cane. The\nremaining portion of the first candy cane, occupying heights $[5,6]$, is not\neaten.</li></ol>\n\n<p>Next, each cow grows by the amount she ate, so the heights of the cows  become\n$[3+3, 2+0, 5+2]=[6, 2, 7]$.\n\n</p><p>The second candy cane is $1$ unit tall, and the first cow eats all of it.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-10: $N, M \\le 10^3$</li><li>Inputs 11-14: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Agastya Goel\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1347"
    },
    {
      "title": "Problem 2. Cowntact Tracing 2",
      "subtitle": "USACO 2023 December Contest, Bronze",
      "id": 1348,
      "year": "2023",
      "division": "bronze",
      "number": "2",
      "problem": "\n<p>Farmer John has $N$ cows in a line ($1 \\leq N \\leq 3\\cdot 10^5$). Unfortunately,\nthere is a sickness spreading throughout. \n\n</p><p>Initially, some cows start off infected. Every night, an infected cow spreads\nthe sickness to the cows on their left and right (if they exist). Once a cow is\ninfected, she stays infected.\n\n</p><p>After some amount of nights, Farmer John realizes that the issue has gotten out\nof control, so he tests his cows to determine who has the sickness. Find the\nminimum number of cows that could have started with the sickness. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$, the number of cows that Farmer John has.\n\n<p>The next line contains an $N$ character bitstring of only $1$s and $0$s where a\n$1$ represents an infected cow and a $0$ represents an uninfected cow after some\nnumber of nights.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput a single integer: the minimum number of cows that could have started \nwith the sickness.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n11111\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>Suppose the middle cow was the only cow to start off infected. Then the cows \nwould be infected in the following order:\n\n</p><p></p><pre>0 nights:    00100 (the third cow is initially infected)\n1 night:  -&gt; 01110 (the second and fourth cows are now infected)\n2 nights: -&gt; 11111 (the first and fifth cows are now infected)\n3 nights: -&gt; 11111 (all cows already were infected, so no additional cows are infected)\n          -&gt; ...\n</pre>\n\n<p>After two or more nights, the final state of the cows would look like the input.\nThere are many other initial states and number of nights that could have\nproduced the input state, such as:\n\n</p><p></p><pre>0 nights:    10001\n1 night:  -&gt; 11011\n2 nights: -&gt; 11111\n</pre>\n\n<p>or:\n\n</p><p></p><pre>0 nights:    01001\n1 night:  -&gt; 11111\n</pre>\n\n<p>or:\n\n</p><p></p><pre>0 nights:    01000\n1 night:  -&gt; 11100\n2 nights: -&gt; 11110\n3 nights: -&gt; 11111\n</pre>\n\n<p>All of these initial states contain at least one infected cow.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n011101\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>The only initial state and number of nights that could have led to this final\nstate is if no nights have passed and each of the four infected cows in the\ninput started off with the sickness.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-7: $N \\le 1000$</li><li>Inputs 8-12: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Suhas Nagar\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1348"
    },
    {
      "title": "Problem 3. Farmer John Actually Farms",
      "subtitle": "USACO 2023 December Contest, Bronze",
      "id": 1349,
      "year": "2023",
      "division": "bronze",
      "number": "3",
      "problem": "\n<p>Farmer John is growing $N$ ($1 \\leq N \\leq 2\\cdot 10^5$) plants of asparagus on\nhis farm! However some of his plants have genetic differences, so some plants\nwill grow faster than others. The initial height of the $i$th plant is $h_i$\ninches, and after each day, the $i$th plant grows by $a_i$ inches. \n\n</p><p>FJ likes some of his plants more than others, and he wants some specific plants\nto be taller than others. He gives you an array of distinct values\n$t_1,\\dots,t_N$ containing all integers from $0$ to $N-1$ and he wants the $i$th\nplant to have exactly $t_i$ other plants that are taller than it. Find the\nminimum number of days so that FJ's request is satisfied, or determine that it\nis impossible.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\n\n<p>The first will consist of an integer $T$, denoting the number of independent\ntest cases $(1 \\leq T \\leq 10)$.\n\n</p><p>The first line of each test case consists of an integer $N$.\n\n</p><p>The second line consists of $N$ integers $h_i$ $(1 \\leq h_i \\leq 10^9)$ denoting\nthe initial height of the $i$th plant in inches.\n\n</p><p>The third line consists of $N$ integers $a_i$ $(1 \\leq a_i \\leq 10^9)$ denoting\nthe number of inches the $i$th plant grows each day.\n\n</p><p>The fourth line consists of $N$ distinct integers $t_i$ denoting the array that\nFJ gives you.\n\n</p><p>It is guaranteed that the sum of $N$ over all test cases does not exceed\n$2\\cdot 10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $T$ lines, the answer to each test case on a different line. If it is not\npossible, output $-1$.\n</div>\n\n<p><strong>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n</p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n1\n10\n1\n0\n2\n7 3\n8 10\n1 0\n2\n3 6\n10 8\n0 1\n2\n7 3\n8 9\n1 0\n2\n7 7\n8 8\n0 1\n2\n7 3\n8 8\n1 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n3\n2\n5\n-1\n-1\n</pre>\n\n<p>In the first sample input, there are 6 test cases.\n\n</p><p>In the first test case, there is only one plant, so the condition is satisfied\non day 0.\n\n</p><p>In the second test case, we need the first plant to be shorter than the second\nplant.  After day 1, the heights are 15 and 13.  After day 2, the heights are\nboth 23.  After day 3, the heights are 31 and 33, and that's the first day in\nwhich the condition is satisfied.\n\n</p><p>The third and fourth test cases are similar to the second.\n\n</p><p>In the fifth test case, both plants start with an initial height of 7 and a\ngrowth rate of 8.  So they will always have identical heights, and therefore the\ncondition is never satisfied.\n\n</p><p>In the sixth test case, the condition is not satisfied initially and the growth\nrates are the same. So the condition can never be satisfied.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n5\n7 4 1 10 12\n3 4 5 2 1\n2 1 0 3 4\n5\n4 10 12 7 1\n3 1 1 4 5\n2 4 3 1 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n7\n</pre>\n\n<p>In the second sample input, there are 2 test cases.\n\n</p><p>In the first test case, the final heights after day 4 are 19, 20, 21, 18, 16.\n\n</p><p>In the second test case, the final heights after day 7 are 25, 17, 19, 35, 36.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 3: $N \\le 2$</li><li>Inputs 4-5: $N \\le 50$ and $a_i, h_i \\le 10^3$</li><li>Inputs 6-8: $N \\le 10^3$</li><li>Inputs 9-13: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Chongtian Ma\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1349"
    },
    {
      "title": "Problem 1. Majority Opinion",
      "subtitle": "USACO 2024 January Contest, Bronze",
      "id": 1371,
      "year": "2024",
      "division": "bronze",
      "number": "1",
      "problem": "\n<p>Farmer John has an important task - figuring out what type of hay to buy for his\ncows.\n\n</p><p>Farmer John's $N$ cows ($2 \\le N \\le 10^5$) are numbered $1$ through $N$ and\neach cow likes exactly one type of hay $h_i$ ($1 \\le h_i \\le N$). He wants all\nhis cows to like the same type of hay.\n\n</p><p>To make this happen, Farmer John can host focus groups. A focus group consists\nof getting all cows in a contiguous range numbered $i$ to $j$, inclusive,\ntogether for a meeting. If there is a type of hay that more than half the cows\nin the group like, then after the focus group finishes meeting, all cows end up\nliking that type of hay. If no such type of hay exists, then no cows change the\ntype of hay they like.  For example, in focus group consisting of a range of 16\ncows, 9 or more of them would need to have the same hay preference to cause the\nremaining cows to switch their preference to match.\n\n</p><p>Farmer John wants to know which types of hay can become liked by all cows\nsimultaneously. He can only host one focus group at a time, but he can run as\nmany focus groups as necessary to get all cows to like the same type of hay.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\n\n<p>The first will consist of an integer $T$, denoting the number of independent\ntest cases $(1 \\leq T \\leq 10)$.\n\n</p><p>The first line of each test case consists of $N$.\n\n</p><p>The second line consists of $N$ integers, the favorite types of hay $h_i$ for\nthe cows in order.\n\n</p><p>It is guaranteed that the sum of $N$ over all test cases does not exceed\n$2\\cdot 10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $T$ lines, one line per test case.\n\n<p>If it possible to make all cows like the same type of hay simultaneously, output\nall possible such types of hay in increasing order. Otherwise, output $-1$. \nWhen printing a list of numbers on the same line, separate adjacent numbers with\na space, and be sure the line does not end with any extraneous spaces.\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n5\n1 2 2 2 3\n6\n1 2 3 1 2 3\n6\n1 1 1 2 2 2\n3\n3 2 3\n2\n2 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n-1\n1 2\n3\n-1\n</pre>\n\n<p>In the sample input, there are 5 test cases.\n\n</p><p>In the first test case, it is only possible to make all cows like type 2. FJ can\ndo this by running a single focus group with all cows.\n\n</p><p>In the second test case, we can show that no cows will change which type of hay\nthey like.\n\n</p><p>In the third test case, it is possible to make all cows like type 1 by running\nthree focus groups - first by having cows 1 through 4 in a focus group, then by\nhaving cows 1 through 5 in a focus group, then by having cows 1 through 6 in a\nfocus group. By similar logic, using cows 3 through 6, cows 2 through 6, then\ncows 1 through 6, we can make all cows like type 2.\n\n</p><p>In the fourth test case, it is possible to make all cows like type 3 by running\na single focus group with all cows.\n\n</p><p>In the fifth test case, we can show that no cows will change which type of hay\nthey like. \n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 2: $N = 2$.</li><li>Inputs 3-4: $N \\le 50$.</li><li>Inputs 5-6: $h_i \\le h_{i+1}$ for all $1 \\le i \\le N-1$.</li><li>Inputs 7-15: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1371"
    },
    {
      "title": "Problem 2. Cannonball",
      "subtitle": "USACO 2024 January Contest, Bronze",
      "id": 1372,
      "year": "2024",
      "division": "bronze",
      "number": "2",
      "problem": "\n<p>Bessie has mastered the art of turning into a cannonball and bouncing along a\nnumber line of length $N$  $(1 \\leq N \\leq 10^5)$ with locations numbered\n$1,2,\\dots,N$ from left to right.  She starts at some integer location $S$\n$(1 \\leq S \\leq N)$ bouncing to the right with a starting power of $1$. If\nBessie has power $k$, her next bounce will be at a distance $k$ forward from her\ncurrent location.  \n\n</p><p>Every integer location from $1$ to $N$ is either a target or a jump pad. Each\ntarget and jump pad has an integer value in the range $0$ to $N$ inclusive. A\njump pad with a value of $v$ increases Bessie's power by $v$ and reverses her\ndirection.  A target with a value of $v$ will be broken if landed on with a\npower of at least $v$.  Landing on a target does not change Bessie's power or\ndirection.  A target that is broken will remain broken and Bessie can still\nbounce on it, also without changing power or direction.\n\n</p><p>If Bessie bounces for an infinite amount of time or until she leaves the number\nline, how many targets will she break?\n\n</p><p>If Bessie starts on a target that she can break, she will immediately do so.\nSimilarly, if Bessie starts on a jump pad, the pad's effects will be applied\nbefore her first jump.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of the input contains $N$ and $S$, where $N$ is the length of the\nnumber line and $S$ is Bessie's starting location.\n\n<p>The next $N$ lines describe each of the locations. The $i$th of these lines\ncontains integers $q_i$ and $v_i$, where $q_i = 0$ if location $i$ is a jump pad\nand  $q_i = 1$ if location $i$ is a target, and where $v_i$ is the value of\nlocation $i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput one number representing the number of targets that will be broken.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 2\n0 1\n1 1\n1 2\n0 1\n1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>Bessie starts at coordinate $2$, which is a target of value $1$, so she\nimmediately breaks it. She then bounces to coordinate $3$, which is a target of\nvalue $2$, so she can't break it. She continues to coordinate $4$, which\nswitches her direction and increases her power by $1$ to $2$. She bounces back\nto coordinate $2$, which is an already broken target, so she continues. At this\npoint, she bounces to coordinate $0$, so she stops. She breaks exactly one\ntarget at located at $2$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 4\n0 3\n1 1\n1 2\n1 1\n0 1\n1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>The path Bessie takes is $4\\to 5\\to 3\\to 1\\to 6$, where the next bounce would\ntake her out of the number line ($11$). She breaks targets $4, 3, 6$ in that\norder.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-5: $N \\le 100$ </li><li>Inputs 6-10: $N \\le 1000$ </li><li>Inputs\n11-20: No additional constraints. </li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Suhas Nagar\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1372"
    },
    {
      "title": "Problem 3. Balancing Bacteria",
      "subtitle": "USACO 2024 January Contest, Bronze",
      "id": 1373,
      "year": "2024",
      "division": "bronze",
      "number": "3",
      "problem": "\n<p>Farmer John has $N$ ($1\\le N\\le 2\\cdot 10^5$) patches of grass in a line, where\npatch $i$ has a level of bacteria that differs by $a_i$ from that of healthy\ngrass ($-10^{15}\\le a_i \\le 10^{15}$).  For example, if $a_i = -3$, then patch\n$i$ has a level of bacteria 3 lower than normal, and would need exactly 3\nadditional units of bacteria added to raise it to the point where it is\nconsidered healthy.\n\n</p><p>Farmer John wants to ensure every patch of grass is corrected to have a healthy\nlevel of bacteria.  Conveniently, he owns two brands of pesticide that he can\nspray on his field, one that adds bacteria and one that removes bacteria. When\nFarmer John sprays either type of pesticide, he stands in patch $N$ (the\nrightmost patch) and selects a power level $L$ for his sprayer ($1 \\leq L \\leq N$).  \n\n</p><p>The sprayer has the most impact on patches near Farmer John, with diminishing\neffect farther away.  If Farmer John chooses the pesticide that adds bacteria,\nthen $L$ units of bacteria will be added to patch $N$, $L-1$ units to patch\n$N-1$, $L-2$ units to patch $N-2$, and so on.  Patches $1 \\ldots N-L$ will\nreceive no bacteria, since the sprayer isn't set to a level powerful enough to\nreach them.   Similarly, if Farmer John chooses the pesticide that removes\nbacteria, then $L$ units of bacteria will be removed from patch $N$, $L-1$ units\nwill be removed from patch $N-1$, and so on.  Again, patches $1 \\ldots N-L$ will\nbe unaffected.\n\n</p><p>Find the minimum number of times Farmer John has to apply his sprayer such that\nevery patch of grass has the recommended value of bacteria for healthy grass. It\nis guaranteed that the answer is at most $10^9$.\n\n</p><p><strong>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The second line contains $N$ integers $a_1\\dots a_N$, the initial bacteria\nlevels of each patch of grass.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe minimum number of applications necessary to make every patch of grass have\nthe recommended value of bacteria for healthy grass.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n-1 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\n\n<p>Use the type of pesticide that removes bacteria, at a power level of 1, five\ntimes. Then use the type of pesticide that adds bacteria, with a power level of\n$2$, one time.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1 3 -2 -7 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">26\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-5: $N \\le 10^3$, the answer is at most $10^3$ </li><li>Inputs\n6-10: $N \\le 10^3$ </li><li>Inputs 11-15: No additional constraints. </li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Rohin Garg\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1373"
    },
    {
      "title": "Problem 1. Palindrome Game",
      "subtitle": "USACO 2024 February Contest, Bronze",
      "id": 1395,
      "year": "2024",
      "division": "bronze",
      "number": "1",
      "problem": "\n\n<p>Bessie and Elsie are playing a game with a pile of stones that initially\ncontains $S$ stones ($1\\le S&lt;10^{10^5}$). The two cows alternate turns,  with\nBessie going first. When it is a cow's turn, she must remove $x$ stones from the\npile, where $x$ is any positive integer palindrome of the cow's choosing. If the\npile is empty when a cow's turn starts, that cow loses.\n\n</p><p><strong>Definition:</strong> A positive integer is a palindrome if it reads the same\nforward and backward; examples of palindromes include 1, 121, and 9009. Leading\nzeros are not allowed; e.g., 990 is *not* a palindrome.\n\n</p><p>There are $T$ ($1\\le T\\le 10$) independent test cases. For each test case, \nprint who wins the game if both cows play optimally.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$, the number of test cases. The next $T$ lines\ndescribe the test cases, one line per test case.\n\n<p>Each test case is specified by a single integer $S$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output B if Bessie wins the game under optimal play starting\nwith a pile of stones of size $S$, or E otherwise, on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n8\n10\n12\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">B\nE\nB\n</pre>\n\n<p>For the first test case, Bessie can remove all the stones on her first move,\nsince $8$ is a palindrome, guaranteeing her win.\n\n</p><p>For the second test case, $10$ is not a palindrome, so Bessie cannot remove all\nthe stones on her first move. Regardless of how many stones  Bessie removes on\nher first move, Elsie can always remove all remaining stones on her second move,\nguaranteeing her win.\n\n</p><p>For the third test case, it can be proven that Bessie wins under optimal play.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-4: $S&lt;100$</li><li>Inputs 5-7: $S&lt;10^6$</li><li>Inputs 8-10: $S&lt;10^9$</li><li>Inputs 11-13: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1395"
    },
    {
      "title": "Problem 2. Milk Exchange",
      "subtitle": "USACO 2024 February Contest, Bronze",
      "id": 1396,
      "year": "2024",
      "division": "bronze",
      "number": "2",
      "problem": "\n<p>Farmer John's $N$ $(1 \\leq N \\leq 2 \\cdot 10^5)$ cows are lined up in a circle\nsuch that for each $i$ in $1,2,\\dots,N-1$, the cow to the right of cow $i$ is\ncow $i+1$, and the cow to the right of cow $N$ is cow $1$. The $i$th cow has a\nbucket with integer capacity $a_i$ $(1 \\leq a_i \\leq 10^9)$ liters. All buckets\nare initially full.\n\n</p><p>Every minute, the cows exchange milk according to a string $s_1s_2\\dots s_N$ \nconsisting solely of the characters $\\text{‘L’}$ and $\\text{‘R’}$.  if\nthe $i$th cow has at least $1$ liter of milk, she will pass $1$ liter of milk to\nthe cow to her left if $s_i=\\text{‘L’}$, or to the right if\n$s_i=\\text{‘R’}$.  All exchanges happen simultaneously (i.e., if a cow has a\nfull bucket but gives away a liter of milk but also receives a liter, her milk\nis preserved). If a cow's total milk ever ends up exceeding $a_i$, then the\nexcess milk will be lost.\n\n</p><p>FJ wants to know: after $M$ minutes $(1 \\leq M \\leq 10^9$), what is the total\namount of milk left among all cows?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $M$.\n\n<p>The second line contains a string $s_1s_2\\dots s_N$ consisting solely of the\ncharacters $\\text{‘L’}$ or $\\text{‘R’}$, denoting the direction each cow\nwill pass their milk in.\n\n</p><p>The third line contains integers $a_1, a_2, \\dots, a_N$, the capacities of each\nbucket.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput an integer, the sum of milk among all cows after $M$ minutes.\n\n<p><strong>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 1\nRRL\n1 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\nCows $2$ and $3$ pass each other one liter of milk, so their milk is preserved.\nWhen cow $1$ passes their milk to cow $2$, cow $2$'s bucket overflows, and one\nliter of milk is lost after one minute.\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 20\nLLLLL\n3 3 2 3 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">14\n</pre>\nEach cow is passing a liter of milk to the cow on the left and gaining a liter\nof milk from the cow on the right, so all of the milk is preserved regardless of\nhow much time passes.\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">9 5\nRRRLRRLLR\n5 8 4 9 3 4 9 5 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">38\n</pre>\nInitially, there are a total of 51 liters of milk. After 5 minutes, cows $3$, $6$, and $7$ will lose 5, 3, and 5 liters of milk respectively. Therefore, a total of 38 liters of milk remain.\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Inputs 4-8: $N,M \\le 1000$</li><li>Inputs 9-16: No additional\nconstraints.</li></ul>\n</div>\n\n<p>\n\n</p><p>Problem credits: Chongtian Ma, Alex Liang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1396"
    },
    {
      "title": "Problem 3. Maximizing Productivity",
      "subtitle": "USACO 2024 February Contest, Bronze",
      "id": 1397,
      "year": "2024",
      "division": "bronze",
      "number": "3",
      "problem": "\n<p>Farmer John has $N$ ($1 \\leq N \\leq 2 \\cdot 10^5$) farms, numbered from $1$ to\n$N$. It is known that FJ closes farm $i$ at time $c_i$. Bessie wakes up at time\n$S$, and wants to maximize the productivity of her day by visiting as many farms\nas possible before they close. She plans to visit farm $i$ on time $t_i + S$.\nBessie must arrive at a farm strictly before Farmer John closes it to actually visit it.\n\n</p><p>Bessie has $Q$ $(1 \\leq Q \\leq 2 \\cdot 10^5)$ queries. For each query, she gives\nyou two integers $S$ and $V$. For each query, output whether Bessie can visit at\nleast $V$ farms if she wakes up at time $S$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line consists of $N$ and $Q$.\n\n<p>The second line consists of $c_1, c_2, c_3 \\dots c_N$ ($1 \\leq c_i \\leq 10^6$).\n\n</p><p>The third line consists of $t_1, t_2, t_3 \\dots t_N$ ($1 \\leq t_i \\leq 10^6$).\n\n</p><p>The next $Q$ lines each consist of two integers $V$ ($1 \\leq V \\leq N$) and $S$\n($1 \\leq S \\leq 10^6$).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each of the $Q$ queries, output YES or NO on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 5\n3 5 7 9 12\n4 2 3 3 8\n1 5\n1 6\n3 3\n4 2\n5 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YES\nNO\nYES\nYES\nNO\n</pre>\n\n<p>For the first query, Bessie will visit the farms at time $t = [9, 7, 8, 8, 13]$,\nso she will only get to visit farm $4$ on time before FJ closes the farm.\n\n</p><p>For the second query, Bessie will not be able to visit any of the farms on time.\n\n</p><p>For the third query, Bessie will visit farms $3, 4, 5$ on time.\n\n</p><p>For the fourth and fifth queries, Bessie will be able to visit all but the first\nfarm on time.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-4: $N,Q\\le 10^3$</li><li>Inputs 5-9: $c_i, t_i \\le 20$</li><li>Inputs 10-17: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Chongtian Ma\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1397"
    }
  ],
  "silver": [
    {
      "title": "Problem 1. Angry Cows",
      "subtitle": "USACO 2016 January Contest, Silver",
      "id": 594,
      "year": "2016",
      "division": "silver",
      "number": "1",
      "problem": "Bessie the cow has designed what she thinks will be the next big hit video game:\n\"Angry Cows\".  The premise,  which she believes is completely original, is that\nthe player shoots cows with a slingshot into a one-dimensional scene consisting\nof a set of hay bales located at various points on a number line. Each cow lands\nwith sufficient force to detonate the hay bales in close proximity to her\nlanding site.  The goal is to use a set of cows to detonate all the hay bales.\n\n<p>There are $N$ hay bales located at distinct integer positions\n$x_1, x_2, \\ldots, x_N$ on the number line.  If a cow is launched with power $R$\nlanding at position $x$, this will causes a blast of \"radius $R$\", destroying\nall hay bales within the range $x-R \\ldots x+R$.  \n\n</p><p>A total of $K$ cows are available to shoot, each with the same power $R$. Please\ndetermine the minimum integer value of $R$ such that it is possible to use the $K$ cows\nto detonate every single hay bale in the scene.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file angry.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 50,000$) and $K$\n($1 \\leq K \\leq 10$).  The remaining $N$ lines all  contain integers\n$x_1 \\ldots x_N$ (each in the range\n$0 \\ldots 1,000,000,000$).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file angry.out):</h4>\nPlease output the minimum power $R$ with which each cow must be launched in order\nto detonate all the hay bales.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 2\n20\n25\n18\n8\n10\n3\n1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=594"
    },
    {
      "title": "Problem 2. Subsequences Summing to Sevens",
      "subtitle": "USACO 2016 January Contest, Silver",
      "id": 595,
      "year": "2016",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John's $N$ cows are standing in a row, as they have a tendency to do from\ntime to time.  Each cow is labeled with a distinct integer ID number so FJ can\ntell them apart. FJ would like to take a photo of a contiguous group of cows\nbut, due to a traumatic  childhood incident involving the numbers $1 \\ldots 6$,\nhe only wants to take a picture of a group of cows if their IDs add up to a\nmultiple of 7.  \n\n<p>Please help FJ determine the size of the largest group he can photograph.  \n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file div7.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 50,000$).  The next $N$\nlines each contain the $N$ integer IDs of the cows (all are in the range\n$0 \\ldots 1,000,000$).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file div7.out):</h4>\nPlease output the number of cows in the largest consecutive group whose IDs sum\nto a multiple of 7.  If no such group exists, output 0.  \n</div>\n\n<p>You may want to note that the sum of the IDs of a large group of cows might be\ntoo large to fit into a standard 32-bit integer.  If you are summing up large\ngroups of IDs, you may therefore want to use a larger integer data type, like a\n64-bit \"long long\" in C/C++.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n3\n5\n1\n6\n2\n14\n10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>In this example, 5+1+6+2+14 = 28.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=595"
    },
    {
      "title": "Problem 3. Build Gates",
      "subtitle": "USACO 2016 January Contest, Silver",
      "id": 596,
      "year": "2016",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John decides to build a new fence around parts of his farm, but he keeps\ngetting distracted and ends up building the fence into a much stranger shape\nthan he intended!\n\n<p>Specifically, FJ starts at position $(0,0)$ and takes $N$ steps, each moving one\nunit of distance north, south, east, or west.  Each step he  takes, he lays a\nunit of fence behind him.  For example, if his first step is to the north, he\nadds a segment of fence from $(0,0)$ to $(0,1)$. FJ might re-visit points\nmultiple times and he may even lay the same segment of fence multiple times. \nHis fence might even cross over itself if his  path cuts through a run of\nfencing he has already built.\n\n</p><p>Needless to say, FJ is rather dismayed at the result after he completes the\nfence.  In particular, he notices that it may be the case that he has now\npartitioned off some areas of the farm from others, so that one can no longer\nwalk from one region to another without crossing a fence. FJ would like to add\ngates to his fences to fix this problem.  A gate can be added to any unit-length\nsegment of fence he has built, allowing passage between the two sides of this\nsegment.  \n\n</p><p>Please determine the minimum number of gates FJ needs to build so that every\nregion of the farm is once again reachable from every other region.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file gates.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 1000$). The next line\ncontains a string of length $N$ describing FJ's path. Each character is either N\n(north), E (east), S (south), or W (west).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file gates.out):</h4>\nWrite out a single integer giving the minimum number of gates FJ needs to build\nto restore complete connectivity to all regions of his farm. Note that the\nanswer could be zero if the farm is connected to begin with.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">14\nNNNESWWWSSEEEE\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=596"
    },
    {
      "title": "Problem 1. Circular Barn",
      "subtitle": "USACO 2016 February Contest, Silver",
      "id": 618,
      "year": "2016",
      "division": "silver",
      "number": "1",
      "problem": "Being a fan of contemporary architecture, Farmer John has built a new barn in\nthe shape of a perfect circle.  Inside, the barn consists of a ring of $n$\nrooms,  numbered clockwise from $1 \\ldots n$ around the perimeter of the barn\n($3 \\leq n \\leq 1000$).   Each room has doors to its two neighboring rooms, and\nalso a door opening to the exterior of the barn.\n\n<p>Farmer John owns $n$ cows, and he wants exactly one cow to end up in each room\nin the barn.  However, the cows, being slightly confused, line up at haphazard\ndoors, with possibly multiple cows lining up at the same door.  Precisely $c_i$\ncows line up outside the door to room $i$, so $\\sum c_i = n$.\n\n</p><p>To manage the process of herding the cows so that one cow ends up in each room,\nFarmer John wants to use the following approach: each cow enters at the door at\nwhich she initially lined up, then walks clockwise through the rooms until she\nreaches a suitable destination.  Given that a cow walking through $d$ doors\nconsumes $d^2$ energy, please determine the minimum amount of energy needed to\ndistribute the cows so one ends up in each room.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cbarn.in):</h4>\nThe first line of input contains $n$.  Each of the remaining $n$ lines contain\n$c_1 \\ldots c_n$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cbarn.out):</h4>\nPlease write out the minimum amount of energy consumed by the cows.  \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10\n1\n0\n0\n2\n0\n0\n1\n2\n2\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">33\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=618"
    },
    {
      "title": "Problem 2. Load Balancing",
      "subtitle": "USACO 2016 February Contest, Silver",
      "id": 619,
      "year": "2016",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John's $N$ cows are each standing at distinct locations\n$(x_1, y_1) \\ldots (x_n, y_n)$ on his two-dimensional farm\n($1 \\leq N \\leq 1000$, and the $x_i$'s and $y_i$'s are positive odd integers of\nsize at most $1,000,000$).  FJ wants to partition his field by building a  long\n(effectively infinite-length) north-south fence with equation $x=a$ ($a$ will be\nan even integer, thus ensuring that he does not build the fence through the\nposition of any cow). He also wants to build a long (effectively\ninfinite-length) east-west fence with equation $y=b$, where $b$ is an even\ninteger.  These two fences cross at the point $(a,b)$, and together they\npartition his field into four regions.  \n\n<p>FJ wants to choose $a$ and $b$ so that the cows appearing in the four resulting\nregions are reasonably \"balanced\", with no region containing too many cows. \nLetting $M$ be the maximum number of cows appearing in one of the four regions,\nFJ wants to make $M$ as small as possible.  Please help him determine this\nsmallest possible value for $M$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file balancing.in):</h4>\nThe first line of the input contains a single integer, $N$. The next $N$ lines\neach contain the location of a single cow, specifying its $x$ and $y$\ncoordinates.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file balancing.out):</h4>\nYou should output the smallest possible value of $M$ that FJ can achieve by\npositioning his fences optimally.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n7 3\n5 5\n7 13\n3 1\n11 7\n5 3\n9 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=619"
    },
    {
      "title": "Problem 3. Milk Pails",
      "subtitle": "USACO 2016 February Contest, Silver",
      "id": 620,
      "year": "2016",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John has received an order for exactly $M$ units of milk\n($1 \\leq M \\leq 200$) that he needs to fill right away.  Unfortunately, his\nfancy milking machine has just become broken, and all he has are two milk pails\nof integer sizes $X$ and $Y$ ($1 \\leq X, Y \\leq 100$) with which he can measure\nmilk.  Both pails are initially empty.  Using these two pails, he can perform up\nto $K$ of the following types of operations ($1 \\leq K \\leq 100$):\n\n<p>- He can fill either pail completely to the top. \n\n</p><p>- He can empty either pail. \n\n</p><p>- He can pour the contents of one pail into the other, stopping when the former\nbecomes empty or the latter becomes full (whichever of these happens first).\n\n</p><p>Although FJ realizes he may not be able to end up with exactly $M$ total units\nof milk in the two pails, please help him compute the minimum amount of error\nbetween $M$ and the total amount of milk in the two pails.  That is, please\ncompute the minimum value of $|M-M'|$ such that FJ can construct $M'$ units of\nmilk collectively between the two  pails.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file pails.in):</h4>\nThe first, and only line of input, contains $X$, $Y$, $K$, and $M$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file pails.out):</h4>\nOutput the smallest distance from $M$ to an amount of milk FJ can produce.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">14 50 2 32\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">18\n</pre>\n\n<p>In two steps FJ can be left with the following quanities in his pails\n\n</p><p></p><pre>(0, 0) = 0 units\n(14, 0) = 14 units\n(0, 50) = 50 units\n(0, 14) = 14 units\n(14, 36) = 50 units\n(14, 50) = 64 units\n</pre>\n\n<p>The closest we can come to 32 units is 14 for a difference of 18.  Note that it\nwould require an extra step to pour out the first pail to end up with (0, 36).\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=620"
    },
    {
      "title": "Problem 1. Field Reduction",
      "subtitle": "USACO 2016 US Open Contest, Silver",
      "id": 642,
      "year": "2016",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John's $N$ cows ($5 \\leq N \\leq 50,000$) are all located at distinct\npositions in his two-dimensional field.  FJ wants to enclose all of the cows\nwith a rectangular fence whose sides are parallel to the x and y axes, and he\nwants this fence to be as small as possible so that it contains every cow (cows\non the boundary are allowed).  \n\n<p>FJ is unfortunately on a tight budget due to low milk production last quarter.\nHe would therefore like to build an even smaller fenced enclosure if possible,\nand he is willing to sell up to three cows from his herd to make this possible. \n\n</p><p>Please help FJ compute the smallest possible area he can enclose with his fence\nafter removing up to three cows from his herd (and thereafter building the\ntightest  enclosing fence for the remaining cows).\n\n</p><p>For this problem, please treat cows as points and the fence as a collection of\nfour line segments (i.e., don't think of the cows as \"unit squares\").  Note that\nthe answer can be zero, for example if all remaining cows end up standing  in a\ncommon vertical or horizontal line.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file reduce.in):</h4>\nThe first line of input contains $N$.  The next $N$ lines each contain two\nintegers specifying the location of a cow.  Cow locations are positive integers\nin the range $1 \\ldots 40,000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file reduce.out):</h4>\nWrite a single integer specifying the minimum area FJ can enclose with his fence\nafter removing up to three carefully-chosen cows from his herd.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n1 1\n7 8\n10 9\n8 12\n4 100\n50 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=642"
    },
    {
      "title": "Problem 2. Diamond Collector",
      "subtitle": "USACO 2016 US Open Contest, Silver",
      "id": 643,
      "year": "2016",
      "division": "silver",
      "number": "2",
      "problem": "Bessie the cow, always a fan of shiny objects, has taken up a hobby of mining\ndiamonds in her spare time!  She has collected $N$ diamonds ($N \\leq 50,000$) of\nvarying sizes, and she wants to arrange some of them in a pair of \ndisplay cases in the barn.  \n\n<p>Since Bessie wants the diamonds in each of the two cases to be relatively similar in \nsize, she decides that she will not include two diamonds in the same case if their sizes\ndiffer by more than $K$ (two diamonds can be displayed together in the same case if\ntheir sizes differ by exactly $K$).  Given $K$, please help Bessie determine the\nmaximum number of diamonds she can display in both cases together.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file diamond.in):</h4>\nThe first line of the input file contains $N$ and $K$ ($0 \\leq K \\leq 1,000,000,000$).\nThe next $N$ lines each contain an integer giving the size of one of the \ndiamonds.  All sizes will be positive and will not exceed $1,000,000,000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file diamond.out):</h4>\nOutput a single positive integer, telling the maximum number of diamonds that \nBessie can showcase in total in both the cases.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 3\n10\n5\n1\n12\n9\n5\n14\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>\n</p><p>Problem credits: Nick Wu and Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=643"
    },
    {
      "title": "Problem 3. Closing the Farm",
      "subtitle": "USACO 2016 US Open Contest, Silver",
      "id": 644,
      "year": "2016",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John and his cows are planning to leave town for a long vacation,  and so\nFJ wants to temporarily close down his farm to save money in the meantime.\n\n<p>The farm consists of $N$ barns connected with $M$ bidirectional paths between\nsome pairs of barns ($1 \\leq N, M \\leq 3000$).  To shut the farm down, FJ plans\nto close one barn at a time.   When a barn closes, all paths adjacent to that\nbarn also close, and can no longer be used. \n\n</p><p>FJ is interested in knowing at each point in time (initially, and after each\nclosing) whether his farm is \"fully connected\" -- meaning that it is possible to\ntravel from  any open barn to any other open barn along an appropriate series of\npaths. Since FJ's farm is initially in somewhat in a state of disrepair, it may\nnot even start out fully connected.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file closing.in):</h4>\nThe first line of input contains $N$ and $M$. The next $M$ lines each describe a\npath in terms of the pair of barns it connects (barns are conveniently numbered\n$1 \\ldots N$).  The final $N$ lines give a permutation of $1 \\ldots N$\ndescribing the order in which the  barns will be closed.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file closing.out):</h4>\nThe output consists of $N$ lines, each containing \"YES\" or \"NO\".  The first line\nindicates whether the initial farm is fully connected, and line $i+1$ indicates\nwhether the farm is fully connected after the $i$th closing.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3\n1 2\n2 3\n3 4\n3\n4\n1\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YES\nNO\nYES\nYES\n</pre>\n\n<p>\n</p><p>Problem credits: Yang Liu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=644"
    },
    {
      "title": "Problem 1. Counting Haybales",
      "subtitle": "USACO 2016 December Contest, Silver",
      "id": 666,
      "year": "2016",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John has just arranged his $N$ haybales ($1 \\leq N \\leq 100,000$) at\nvarious points along the one-dimensional road running across his farm.  To make\nsure they are spaced out appropriately, please help him answer $Q$ queries\n($1 \\leq Q \\leq 100,000$), each asking for the number of haybales within a\nspecific interval along the road.\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file haybales.in):</h4>\nThe first line contains $N$ and $Q$. \n\n<p>The next line contains $N$ distinct integers, each in the range\n$0 \\ldots 1,000,000,000$, indicating that there is a haybale at each of those\nlocations.\n\n</p><p>Each of the next $Q$ lines contains two integers $A$ and $B$\n($0 \\leq A \\leq B \\leq 1,000,000,000$) giving a query for the number of haybales\nbetween $A$ and $B$, inclusive.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file haybales.out):</h4>\nYou should write $Q$ lines of output.  For each query, output the number of\nhaybales in its respective interval.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 6\n3 2 7 5\n2 3\n2 4\n2 5\n2 7\n4 6\n8 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n2\n3\n4\n1\n0\n</pre>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=666"
    },
    {
      "title": "Problem 2. Cities and States",
      "subtitle": "USACO 2016 December Contest, Silver",
      "id": 667,
      "year": "2016",
      "division": "silver",
      "number": "2",
      "problem": "To keep his cows intellectually stimulated, Farmer John has placed a large map\nof the USA on the wall of his barn.  Since the cows spend many hours in the barn\nstaring at this map, they start to notice several curious patterns.  For\nexample, the cities of Flint, MI and  Miami, FL share a very special\nrelationship: the first two letters of \"Flint\" give the  state code (\"FL\") for\nMiami, and the first two letters of \"Miami\" give the state code (\"MI\")  for\nFlint. \n\n<p>Let us say that two cities are a \"special pair\" if they satisfy this property\nand come  from different states.  The cows are wondering how many special pairs\nof cities exist. Please help them solve this amusing geographical puzzle!\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file citystate.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 200,000$), the number of\ncities on the map.\n\n<p>The next $N$ lines each contain two strings: the name of a city (a string of at\nleast 2 and at most 10 uppercase letters), and its two-letter state code (a\nstring of 2 uppercase letters).  Note that the state code may be something like\nZQ, which is not an actual USA state.  Multiple cities with the same name can\nexist, but they will be in different states.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file citystate.out):</h4>\nPlease output the number of special pairs of cities.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\nMIAMI FL\nDALLAS TX\nFLINT MI\nCLEMSON SC\nBOSTON MA\nORLANDO FL\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=667"
    },
    {
      "title": "Problem 3. Moocast",
      "subtitle": "USACO 2016 December Contest, Silver",
      "id": 668,
      "year": "2016",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John's $N$ cows ($1 \\leq N \\leq 200$) want to organize an emergency\n\"moo-cast\" system for broadcasting important messages among themselves.  \n\n<p>Instead of mooing at each-other over long distances, the cows decide to equip\nthemselves with walkie-talkies, one for each cow.  These walkie-talkies each\nhave a limited transmission radius -- a walkie-talkie of power $P$ can only\ntransmit to other cows up to a distance of $P$ away (note that cow A might\nbe able to transmit to cow B even if cow B cannot transmit back, due to cow\nA's power being larger than that of cow B).  Fortunately, cows can relay messages\nto one-another along a path consisting of several hops, so it is not necessary\nfor every cow to be able to transmit directly to every other cow.\n\n</p><p>Due to the asymmetrical nature of the walkie-talkie transmission, broadcasts\nfrom some cows may be more effective than from other cows in their ability to\nreach large numbers of recipients (taking relaying into account).  Please  help\nthe cows determine the maximum number of cows that can be reached by a broadcast\noriginating from a single cow.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file moocast.in):</h4>\nThe first line of input contains $N$.\n\n<p>The next $N$ lines each contain the $x$ and $y$ coordinates of a single cow ( \nintegers in the range $0 \\ldots 25,000$) followed by $p$, the power of the\nwalkie-talkie held by this cow.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file moocast.out):</h4>\nWrite a single line of output containing the maximum number of cows a broadcast\nfrom a single cow can reach.  The originating cow is included in this number.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 3 5\n5 4 3\n7 2 1\n6 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In the example above, a broadcast from cow 1 can reach 3 total cows, including\ncow 1.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=668"
    },
    {
      "title": "Problem 1. Cow Dance Show",
      "subtitle": "USACO 2017 January Contest, Silver",
      "id": 690,
      "year": "2017",
      "division": "silver",
      "number": "1",
      "problem": "After several months of rehearsal, the cows are just about ready to put  on\ntheir annual dance performance; this year they are performing the famous bovine ballet\n\"Cowpelia\".\n\n<p>The only aspect of the show that remains to be determined is the size of the\nstage.  A stage of size $K$ can support $K$ cows dancing simultaneously.   The\n$N$ cows in the herd ($1 \\leq N \\leq 10,000$) are conveniently  numbered\n$1 \\ldots N$ in the order in which they must appear in the  dance.  Each cow $i$\nplans to dance for a specific duration of time $d(i)$.  Initially, cows\n$1 \\ldots K$ appear on stage and start dancing.  When the first of these cows\ncompletes her part, she leaves the stage and cow $K+1$ immediately starts\ndancing, and so on, so there are always $K$ cows dancing (until the end of the\nshow, when we start to run out of cows).  The show ends when the last cow\ncompletes  her dancing part, at time $T$.\n\n</p><p>Clearly, the larger the value of $K$, the smaller the value of $T$. Since the\nshow cannot last too long, you are given as input an upper bound $T_{max}$\nspecifying the largest possible value of $T$.  Subject to this constraint,\nplease determine the smallest possible value of $K$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowdance.in):</h4>\nThe first line of input contains $N$ and $T_{max}$, where $T_{max}$ is an\ninteger of value at most 1 million.\n\n<p>The next $N$ lines give the durations $d(1) \\ldots d(N)$ of the dancing parts\nfor cows $1 \\ldots N$.  Each $d(i)$ value is an integer in the range\n$1 \\ldots 100,000$.\n\n</p><p>It is guaranteed that if $K=N$, the show will finish in time.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowdance.out):</h4>\nPrint out the smallest possible value of $K$ such that the dance performance\nwill take no more than $T_{max}$ units of time.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 8\n4\n7\n8\n6\n4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>\n</p><p>Problem credits: Delphine and Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=690"
    },
    {
      "title": "Problem 2. Hoof, Paper, Scissors",
      "subtitle": "USACO 2017 January Contest, Silver",
      "id": 691,
      "year": "2017",
      "division": "silver",
      "number": "2",
      "problem": "You have probably heard of the game \"Rock, Paper, Scissors\".  The cows like to\nplay a similar game they call \"Hoof, Paper, Scissors\". \n\n<p>The rules of \"Hoof, Paper, Scissors\" are simple.  Two cows play against\neach-other.  They both count to three and then each simultaneously makes a\ngesture that represents either a hoof, a piece of paper, or a pair of scissors. \nHoof beats scissors (since a hoof can smash a pair of scissors), scissors beats\npaper (since scissors can cut paper), and paper beats hoof (since the hoof can\nget a papercut).   For example, if the first cow makes a \"hoof\" gesture and the\nsecond a \"paper\" gesture, then the second cow wins.  Of course, it is also\npossible to tie, if both cows make the same gesture.\n\n</p><p>Farmer John wants to play against his prize cow, Bessie, at $N$ games of \n\"Hoof, Paper, Scissors\" ($1 \\leq N \\leq 100,000$).  Bessie, being an expert at the game, can predict\neach of FJ's gestures before he makes it.  Unfortunately, Bessie, being a cow,\nis also very lazy.  As a result, she tends to play the same gesture multiple\ntimes in a row.  In fact, she is only willing to switch gestures at most\nonce over the entire set of games.  For example, she might play \"hoof\"\nfor the first $x$ games, then switch to \"paper\" for the remaining $N-x$\ngames.\n\n</p><p>Given the sequence of gestures FJ will be playing, please determine the \nmaximum number of games that Bessie can win.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file hps.in):</h4>\nThe first line of the input file contains $N$. \n\n<p>The remaining $N$ lines contains FJ's gestures, each either H, P, or S.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file hps.out):</h4>\nPrint the maximum number of games Bessie can win, given that she can only\nchange gestures at most once.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\nP\nP\nH\nP\nS\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>Problem credits: Mark Chen and Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=691"
    },
    {
      "title": "Problem 3. Secret Cow Code",
      "subtitle": "USACO 2017 January Contest, Silver",
      "id": 692,
      "year": "2017",
      "division": "silver",
      "number": "3",
      "problem": "The cows are experimenting with secret codes, and have devised a method for\ncreating an infinite-length string to be used as part of one of their codes.\n\n<p>Given a string $s$, let $F(s)$ be $s$ followed by $s$ \"rotated\" one character to\nthe right (in a right rotation, the last character of $s$ rotates around and\nbecomes the new first character).  Given an initial string $s$, the cows build\ntheir infinite-length code string by repeatedly applying $F$; each step\ntherefore doubles the length of the current string.\n\n</p><p>Given the initial string and an index $N$, please help the cows compute the\ncharacter at the $N$th position within the infinite code string.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowcode.in):</h4>\nThe input consists of a single line containing a string followed by $N$.  The\nstring consists of at most 30 uppercase characters, and $N \\leq 10^{18}$.\n\n<p>Note that $N$ may be too large to fit into a standard 32-bit integer, so you may\nwant to use a 64-bit integer type (e.g., a \"long long\" in C/C++).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowcode.out):</h4>\nPlease output the $N$th character of the infinite code built from the initial\nstring.  The first character is $N=1$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">COW 8\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">C\n</pre>\n\n<p>In this example, the initial string COW expands as follows:\n</p><pre>COW -&gt; COWWCO -&gt; COWWCOOCOWWC\n                 12345678\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=692"
    },
    {
      "title": "Problem 1. Why Did the Cow Cross the Road",
      "subtitle": "USACO 2017 February Contest, Silver",
      "id": 714,
      "year": "2017",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John's cows are trying to learn to cross the road effectively. \nRemembering the old \"why did the chicken cross the road?\" joke, they figure the\nchickens must be experts on crossing the road, and go off in search of chickens\nto help them.\n\n<p>As it turns out, chickens are very busy creatures and have limited time to help\nthe cows.  There are $C$ chickens on the farm ($1 \\leq C \\leq 20,000$), \nconveniently numbered $1 \\ldots C$, and each chicken $i$ is only willing to help\na cow at precisely time $T_i$.  The cows, never in a hurry, have more\nflexibility in their schedules.  There are  $N$ cows on the farm\n($1 \\leq N \\leq 20,000$), conveniently numbered $1 \\ldots N$, where cow $j$ is\nable to cross the road between time $A_j$ and time $B_j$. Figuring the \"buddy\nsystem\" is the best way to proceed, each cow $j$ would ideally like to find a\nchicken $i$ to help her cross the road; in order for their  schedules to be\ncompatible, $i$ and $j$ must satisfy $A_j \\leq T_i \\leq B_j$.\n\n</p><p>If each cow can be paired with at most one chicken and each chicken with at most\none cow, please help compute the maximum number of cow-chicken pairs that can be\nconstructed.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file helpcross.in):</h4>\nThe first line of input contains $C$ and $N$.  The next $C$ lines contain\n$T_1 \\ldots T_C$, and the next $N$ lines contain $A_j$ and $B_j$ ($A_j \\leq B_j$) for\n$j = 1 \\ldots N$.  The $A$'s, $B$'s, and $T$'s are all non-negative integers\n(not necessarily distinct) of size at most 1,000,000,000.  \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file helpcross.out):</h4>\nPlease compute the maximum possible number of cow-chicken pairs.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 4\n7\n8\n6\n2\n9\n2 5\n4 9\n0 3\n8 13\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=714"
    },
    {
      "title": "Problem 2. Why Did the Cow Cross the Road II",
      "subtitle": "USACO 2017 February Contest, Silver",
      "id": 715,
      "year": "2017",
      "division": "silver",
      "number": "2",
      "problem": "The long road through Farmer John's farm has $N$ crosswalks across it,\nconveniently numbered $1 \\ldots N$ ($1 \\leq N \\leq 100,000$).   To allow cows to\ncross at these crosswalks, FJ installs electric crossing signals, which light up\nwith a green cow icon when it is ok for the cow to cross, and red otherwise. \nUnfortunately, a large electrical storm has damaged some of his signals.  Given\na list of the damaged signals, please compute the minimum number of signals that\nFJ needs to repair in order for there to exist some contiguous block of at least\n$K$ working signals.\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file maxcross.in):</h4>\nThe first line of input contains $N$, $K$, and $B$ ($1 \\leq B, K \\leq N$).  The\nnext $B$ lines each describe the ID number of a broken signal.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file maxcross.out):</h4>\nPlease compute the minimum number of signals that need to be repaired in order\nfor there to be a contiguous block of $K$ working signals somewhere along the\nroad.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 6 5\n2\n10\n1\n5\n9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=715"
    },
    {
      "title": "Problem 3. Why Did the Cow Cross the Road III",
      "subtitle": "USACO 2017 February Contest, Silver",
      "id": 716,
      "year": "2017",
      "division": "silver",
      "number": "3",
      "problem": "Why did the cow cross the road?  Well, one reason is that Farmer John's farm\nsimply has a lot of roads, making it impossible for his cows to travel around\nwithout crossing many of them.\n\n<p>FJ's farm is arranged as an $N \\times N$ square grid of fields\n($2 \\leq N \\leq 100$), Certain pairs of adjacent fields (e.g., north-south or\neast-west) are separated by roads, and a tall fence runs around the external \nperimeter of the entire grid, preventing cows from leaving the farm.   Cows can\nmove freely from any field to any other adjacent field (north, east, south, or\nwest), although they prefer not to cross roads unless absolutely necessary.\n\n</p><p>There are $K$ cows ($1 \\leq K \\leq 100, K \\leq N^2$) on FJ's farm, each located\nin a  different field.  A pair of cows is said to be \"distant\" if, in order for\none cow to visit the other, it is necessary to cross at least one road. Please\nhelp FJ count the number of distant pairs of cows.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file countcross.in):</h4>\nThe first line of input contains $N$, $K$, and $R$.  The next $R$ lines \ndescribe $R$ roads that exist between pairs of adjacent fields.  Each line is of\nthe form $r$ $c$ $r'$ $c'$ (integers in the range $1 \\ldots N$), indicating a\nroad between the field in  (row $r$, column $c$) and the adjacent field in (row $r'$,\ncolumn $c'$).  The final $K$ lines indicate the locations of the $K$ cows, each\nspecified  in terms of a row and column.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file countcross.out):</h4>\nPrint the number of pairs of cows that are distant.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 3 3\n2 2 2 3\n3 3 3 2\n3 3 2 3\n3 3\n2 2\n2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=716"
    },
    {
      "title": "Problem 1. Paired Up",
      "subtitle": "USACO 2017 US Open Contest, Silver",
      "id": 738,
      "year": "2017",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John finds that his cows are each easier to milk when they have another\ncow nearby for moral support.  He therefore wants to take his $M$ cows\n($M \\leq 1,000,000,000$, $M$ even) and partition them into $M/2$ pairs.  Each\npair of cows will then be ushered off to a separate stall in the barn for\nmilking.  The milking in each of these $M/2$ stalls will take place\nsimultaneously.\n\n<p>To make matters a bit complicated, each of Farmer John's cows has a different\nmilk output. If cows of milk outputs $A$ and $B$ are paired up, then it takes a\ntotal of $A+B$ units of time to milk them both.  \n\n</p><p>Please help Farmer John determine the minimum possible amount of time the entire\nmilking process will take to complete, assuming he pairs the cows up in the best\npossible way.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file pairup.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100,000$).  Each of the\nnext $N$ lines contains two integers $x$ and $y$, indicating that FJ has $x$\ncows each with milk output $y$ ($1 \\leq y \\leq 1,000,000,000$). The sum of the\n$x$'s is $M$, the total number of cows.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file pairup.out):</h4>\nPrint out the minimum amount of time it takes FJ's cows to be milked, assuming\nthey are optimally paired up.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 8\n2 5\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>Here, if the cows with outputs 8+2 are paired up, and those with outputs 5+5 are\npaired up, the both stalls take 10 units of time for milking.  Since milking\ntakes place simultaneously, the entire process would therefore complete after 10\nunits of time.  Any other pairing would be sub-optimal, resulting in a stall taking more than 10\nunits of time to milk.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=738"
    },
    {
      "title": "Problem 2. Bovine Genomics",
      "subtitle": "USACO 2017 US Open Contest, Silver",
      "id": 739,
      "year": "2017",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John owns $N$ cows with spots and $N$ cows without spots.  Having just\ncompleted a course in bovine genetics, he is convinced that the spots on his\ncows are caused by mutations in the bovine genome.\n\n<p>At great expense, Farmer John sequences the genomes of his cows.  Each genome is\na  string of length $M$ built from the four characters A, C, G, and T.  When he\nlines up the genomes of his cows, he gets a table like the following, shown here\nfor $N=3$:\n\n</p><p></p><pre>Positions:    1 2 3 4 5 6 7 ... M\n\nSpotty Cow 1: A A T C C C A ... T\nSpotty Cow 2: G A T T G C A ... A\nSpotty Cow 3: G G T C G C A ... A\n\nPlain Cow 1:  A C T C C C A ... G\nPlain Cow 2:  A G T T G C A ... T\nPlain Cow 3:  A G T T C C A ... T\n</pre>\n\n<p>Looking carefully at this table, he surmises that positions 2 and 4 are\nsufficient to explain spottiness.  That is, by looking at the characters in just\nthese two positions, Farmer John can predict which of his cows are spotty and\nwhich are not (for example, if he sees G and C, the cow must be spotty).\n\n</p><p>Farmer John is convinced that spottiness can be explained not by just one or two\npositions in the genome, but by looking at a set of three distinct positions. \nPlease help him count the number of sets of three distinct positions that can\neach explain spottiness.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cownomics.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 500$) and $M$\n($3 \\leq M \\leq 50$). The next $N$ lines each contain a string of $M$\ncharacters; these describe the genomes of the spotty cows.  The final $N$ lines\ndescribe the genomes of the plain cows.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cownomics.out):</h4>\nPlease count the number of sets of three distinct positions that can explain\nspottiness.  A set of three positions explains spottiness if the spottiness\ntrait can be predicted with perfect accuracy among Farmer John's population of\ncows by looking at just those three locations in the genome.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 8\nAATCCCAT\nGATTGCAA\nGGTCGCAA\nACTCCCAG\nACTCGCAT\nACTTCCAT\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">22\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=739"
    },
    {
      "title": "Problem 3. Where's Bessie?",
      "subtitle": "USACO 2017 US Open Contest, Silver",
      "id": 740,
      "year": "2017",
      "division": "silver",
      "number": "3",
      "problem": "Always known for being quite tech-savy, Farmer John is testing out his new\nautomated drone-mounted cow locator camera, which supposedly can take a picture\nof his field and automatically figure out the location of cows.  Unfortunately,\nthe camera does not include a  very good algorithm for finding cows, so FJ needs\nyour help developing a better one.\n\n<p>The overhead image of his farm taken by the camera is described by an\n$N \\times N$ grid of characters, each  in the range $A \\ldots Z$, representing\none of 26 possible colors.  Farmer John figures the best way to define a\npotential cow location (PCL) is as follows: A PCL is a rectangular sub-grid\n(possibly the entire image) with sides parallel to the image sides, not\ncontained within any other PCL (so no smaller subset of a PCL is also a PCL). \nFurthermore, a PCL must satisfy the following property: focusing on just the\ncontents of the rectangle and ignoring the rest of the image, exactly two colors\nmust be present, one forming a contiguous region and one forming two or more\ncontiguous regions.\n\n</p><p>For example, a rectangle with contents\n\n</p><p></p><pre>AAAAA\nABABA\nAAABB\n</pre>\n\n<p>would constitute a PCL, since the A's form a single contiguous region and the\nB's form more than one contiguous region.  The interpretation is a cow of color\nA with spots of color B.  \n\n</p><p>A region is \"contiguous\" if you can traverse the entire region by moving\nrepeatedly from one cell in the region to another cell in the region taking\nsteps up, down, left, or right.  \n\n</p><p>Given the image returned by FJ's camera, please count the number of PCLs.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file where.in):</h4>\nThe first line of input contains $N$, the size of the grid ($1 \\leq N \\leq 20$).\nThe next $N$ lines describe the image, each consisting of $N$ characters.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file where.out):</h4>\nPrint a count of the number of PCLs in the image.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\nABBC\nBBBC\nAABB\nABBC\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this example, the two PCLs are the rectangles with contents\n\n</p><p></p><pre>ABB\nBBB\nAAB\nABB\n</pre>\n\n<p>and\n\n</p><p></p><pre>BC\nBC\nBB\nBC\n</pre>\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=740"
    },
    {
      "title": "Problem 1. My Cow Ate My Homework",
      "subtitle": "USACO 2017 December Contest, Silver",
      "id": 762,
      "year": "2017",
      "division": "silver",
      "number": "1",
      "problem": "In your bovine history class, you have been given a rather long homework\nassignment with $N$ questions ($3 \\leq N \\leq 100,000$), each graded with an\ninteger score in the range 0...10,000.  As is often customary, your teacher\nplans to assign a final grade by discarding a question on which you received the\nlowest score and then averaging the remaining scores together.  Unfortunately,\nyour pet cow Bessie has just eaten your answers to the first  $K$ questions! \n($K$ could be as small as 1 or as large as $N-2$).\n\n<p>After copious explanation, your teacher finally believes your story, and agrees\nto grade the remaining non-eaten part of the assignment the same way as before\n-- by removing the lowest-scoring question (or one such question, in the event\nof a tie) and averaging the rest.  \n\n</p><p>Please output all values of $K$ which would have earned you the maximum possible\nscore according to this grading scheme, in sorted order.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file homework.in):</h4>\nThe first line of input contains $N$, and the next line contains the scores on\nthe $N$ homework questions.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file homework.out):</h4>\nPlease output, one value per line, all values of $K$ which would have earned you\nthe maximum possible score.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n3 1 9 2 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>If Bessie eats the first two questions, then the remaining scores are 9, 2, and\n7.  Removing the minimum and averaging, we get a final grade of 8, which is the\nhighest possible.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=762"
    },
    {
      "title": "Problem 2. Milk Measurement",
      "subtitle": "USACO 2017 December Contest, Silver",
      "id": 763,
      "year": "2017",
      "division": "silver",
      "number": "2",
      "problem": "Each of Farmer John's cows initially produces $G$ gallons of milk per day\n($1 \\leq G \\leq 10^9$).   Since the milk output of a cow is known to potentially\nchange over time, Farmer John decides to take periodic measurements of milk\noutput and write these down in a log book.  Entries in his log look like this:\n\n<p></p><pre>35 1234 -2\n14 2345 +3\n</pre>\n\n<p>The first entry indicates that on day 35, cow #1234's milk output was 2 gallons\nlower than it was when last measured.  The next entry indicates that on day 14,\ncow #2345's milk output increased by 3 gallons from when it was last measured. \nFarmer John has only enough time to make at most one measurement on any given\nday.  Unfortunately, he is a bit disorganized, and doesn't necessarily write\ndown his measurements in chronological order.  \n\n</p><p>To keep his cows motivated, Farmer John proudly displays on the wall of his barn\nthe picture of whichever cow currently has the highest milk output (if several\ncows tie for the highest milk output, he displays all of their pictures). \nPlease determine the number of days on which Farmer John would have needed to\nchange this display.\n\n</p><p>Note that Farmer John has a very large herd of cows, so although some of them\nare noted in his log book as changing their milk production, there are always\nplenty of other cows around whose milk output level remains at $G$ gallons.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file measurement.in):</h4>\nThe first line of input contains the number of measurements $N$ that Farmer \nJohn makes ($1 \\leq N \\leq 100,000$), followed by $G$. Each of the next $N$ lines\ncontains one measurement, in the format above, specifying  a day (an integer in\nthe range $1 \\ldots 10^6$), the integer ID of a cow (in the range\n$1 \\ldots 10^9$), and the change in her milk output since it was last measured\n(a nonzero integer).  Each cow's milk output will always be in the range\n$0 \\ldots 10^9$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file measurement.out):</h4>\nPlease output the number of days on which Farmer John needs to adjust his\nmotivational display.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 10\n7 3 +3\n4 2 -1\n9 3 -1\n1 1 +2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=763"
    },
    {
      "title": "Problem 3. The Bovine Shuffle",
      "subtitle": "USACO 2017 December Contest, Silver",
      "id": 764,
      "year": "2017",
      "division": "silver",
      "number": "3",
      "problem": "Convinced that happy cows generate more milk, Farmer John has installed a giant\ndisco ball in his barn and plans to teach his cows to dance!\n\n<p>Looking up popular cow dances, Farmer John decides to teach his cows the \"Bovine\nShuffle\". The Bovine Shuffle consists of his $N$ cows ($1 \\leq N \\leq 100,000$)\nlining up in a row in some order, then  performing successive \"shuffles\", each\nof which potentially re-orders the cows.  To make it easier for his cows to\nlocate themselves, Farmer  John marks the locations for his line of cows with\npositions $1 \\ldots N$, so the  first cow in the lineup will be in position 1,\nthe next in position 2, and so on, up to position $N$.\n\n</p><p>A shuffle is described with $N$ numbers, $a_1 \\ldots a_N$, where a cow in position\n$i$ moves to position $a_i$ during the shuffle (and so, each $a_i$ is in the\nrange $1 \\ldots N$).  Every cow moves to its new location during the shuffle. \nUnfortunately, all the $a_i$'s are not necessarily distinct,  so multiple cows\nmight try to move to the same position during a shuffle, after which they will\nmove together for all remaining shuffles.\n\n</p><p>Farmer John notices that some positions in his lineup contain cows in them no\nmatter how many shuffles take place.  Please help him count the number of  such\npositions.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file shuffle.in):</h4>\nThe first line of input contains $N$, the number of cows.  The next line\ncontains  the $N$ integers $a_1 \\ldots a_N$.  \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file shuffle.out):</h4>\nPlease output the number of positions that will always contain cows, no matter\nhow many shuffles take place.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n3 2 1 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=764"
    },
    {
      "title": "Problem 1. Lifeguards",
      "subtitle": "USACO 2018 January Contest, Silver",
      "id": 786,
      "year": "2018",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John has opened a swimming pool for his cows, figuring it will help them\nrelax and produce more milk.  \n\n<p>To ensure safety, he hires $N$ cows as lifeguards, each of which has a shift\nthat covers some contiguous interval of time during the day.  For simplicity,\nthe pool is open from time $t=0$ until time $t = 1,000,000,000$ on a daily\nbasis, so each shift can be described by two integers, giving the time at which\na cow starts and ends her shift.  For example, a lifeguard starting at time\n$t = 4$ and ending at  time $t = 7$ covers three units of time (note that the\nendpoints are \"points\" in time).\n\n</p><p>Unfortunately, Farmer John hired 1 more lifeguard than he has the funds to\nsupport.  Given that he must fire exactly one lifeguard, what is the maximum\namount of time that can still be covered by the shifts of the remaining\nlifeguards?  An interval of time is covered if at least one lifeguard is\npresent.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file lifeguards.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100,000$). Each of the next $N$ lines describes a\nlifeguard in terms of two integers in the  range $0 \\ldots 1,000,000,000$, giving the\nstarting and ending point of a lifeguard's shift. All such endpoints are\ndistinct.  Shifts of different lifeguards might overlap.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file lifeguards.out):</h4>\nPlease write a single number, giving the maximum amount of time that can still\nbe covered if Farmer John fires 1 lifeguard.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n5 9\n1 4\n3 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">7\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=786"
    },
    {
      "title": "Problem 2. Rental Service",
      "subtitle": "USACO 2018 January Contest, Silver",
      "id": 787,
      "year": "2018",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John realizes that the income he receives from milk production is\ninsufficient to fund the growth of his farm, so to earn some extra money, he\nlaunches a cow-rental service, which he calls \"USACOW\" (pronounced \"Use-a-cow\").\n\n<p>Farmer John has $N$ cows ($1 \\leq N \\leq 100,000$), each capable of producing\nsome amount of milk every day.  The $M$ stores near FJ's farm\n($1 \\leq M \\leq 100,000$) each offer to buy a certain amount of milk at a\ncertain price.  Moreover, Farmer John's $R$ ($1 \\leq R \\leq 100,000$)\nneighboring farmers are each interested in renting a cow at a certain price.\n\n</p><p>Farmer John has to choose whether each cow should be milked or rented to a\nnearby farmer.  Help him find the maximum amount of money he can make per day.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file rental.in):</h4>\nThe first line in the input contains $N$, $M$, and $R$. The next $N$ lines each\ncontain an integer $c_i$ ($1 \\leq c_i \\leq 1,000,000$),  indicating that Farmer\nJohn's $i$th cow can produce $c_i$ gallons of milk every day. The next $M$ lines\neach contain two integers $q_i$ and $p_i$ ($1 \\leq q_i, p_i \\leq 1,000,000$),\nindicating that the $i$th store is willing to buy up to $q_i$ gallons of milk\nfor $p_i$ cents per gallon.  Keep in mind that Farmer John can sell any amount\nof milk between zero and $q_i$ gallons to a given store. The next $R$ lines each\ncontain an integer $r_i$ ($1 \\leq r_i \\leq 1,000,000$), indicating that one of\nFarmer John's neighbors wants to rent a cow for $r_i$ cents per day.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file rental.out):</h4>\nThe output should consist of one line containing the maximum profit Farmer John\ncan make per day by milking or renting out each of his cows.  Note that the\noutput might be too large to fit into a standard 32-bit integer, so you may need\nto use a larger integer type like a \"long long\" in C/C++.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 3 4\n6\n2\n4\n7\n1\n10 25\n2 10\n15 15\n250\n80\n100\n40\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">725\n</pre>\n\n<p>Farmer John should milk cows #1 and #4, to produce 13 gallons of milk.  He\nshould completely fill the order for 10 gallons, earning 250 cents, and sell the\nremaining three gallons at 15 cents each, for a total of 295 cents of milk\nprofits.\n\n</p><p>Then, he should rent out the other three cows for 250, 80, and 100 cents, to\nearn 430 more cents.  (He should leave the request for a 40-cent rental\nunfilled.)  This is a total of 725 cents of daily profit.\n\n</p><p>\n</p><p>Problem credits: Jay Leeds\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=787"
    },
    {
      "title": "Problem 3. MooTube",
      "subtitle": "USACO 2018 January Contest, Silver",
      "id": 788,
      "year": "2018",
      "division": "silver",
      "number": "3",
      "problem": "In his spare time, Farmer John has created a new video-sharing service, which he\nnames MooTube.  On MooTube, Farmer John's cows can record, share, and discover\nmany amusing videos.  His cows already have posted $N$ videos ($1 \\leq N \\leq 5000$), conveniently numbered $1 \\ldots N$.  However, FJ can't\nquite figure out how to help his cows find new videos they might like.\n\n<p>FJ wants to create a list of \"suggested videos\" for every MooTube video.  This\nway, cows will be recommended the videos most relevant to the ones they already\nwatch.\n\n</p><p>FJ devises a metric of \"relevance,\" which determines, as the name suggests, how\nrelevant two videos are to each other.  He picks $N-1$ pairs of videos and\nmanually computes their pairwise relevance.  Then, FJ visualizes his videos as a\nnetwork, where each video is a node and the $N-1$ pairs of videos he manually\nconsidered are connected.  Conveniently, FJ has picked his $N-1$ pairs so that\nany video can be  reached from any other video along a path of connections in\nexactly one way. FJ decides that the relevance of any pair of videos should be\ndefined as the minimum relevance of any connection along this path.  \n\n</p><p>Farmer John wants to pick a value $K$ so that next to any given MooTube video,\nall other videos with relevance at least $K$ to that video will be suggested. \nHowever, FJ is worried that too many videos will be suggested to his cows, which\ncould distract them from milk production!  Therefore, he wants to carefully set\nan appropriate value of $K$.  Farmer John would like your help answering a\nnumber of questions about the suggested videos for certain values of $K$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file mootube.in):</h4>\nThe first line of input contains $N$ and $Q$ ($1 \\leq Q \\leq 5000$).\n\n<p>The next $N-1$ lines each describe a pair of videos FJ manually compares.  Each\nline includes three integers $p_i$, $q_i$, and $r_i$\n($1 \\leq p_i, q_i \\leq N, 1 \\leq r_i \\leq 1,000,000,000$), indicating that\nvideos $p_i$ and $q_i$ are connected with relevance $r_i$.  \n\n</p><p>The next $Q$ lines describe Farmer John's $Q$ questions.  Each line contains two\nintegers, $k_i$ and $v_i$ ($1 \\leq k_i \\leq 1,000,000,000, 1 \\leq v_i \\leq N$),\nindicating that FJ's $i$th question asks how many videos will be suggested to\nviewers of video $v_i$ if $K = k_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file mootube.out):</h4>\nOutput $Q$ lines.  On line $i$, output the answer to FJ's $i$th question.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3\n1 2 3\n2 3 2\n2 4 4\n1 2\n4 1\n3 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n0\n2\n</pre>\n\n<p>Farmer John finds that videos one and two have relevance three, that videos two\nand three have relevance two, and that videos two and four have relevance four. \nBased on this, videos one and three have relevance min(3, 2) = 2, videos one and\nfour have relevance min(3, 4) = 3, and videos three and four have relevance\nmin(2, 4) = 2.\n\n</p><p>Farmer John wants to know how many videos will be suggested from video two if\n$K=1$, from video one if $K=3$, and from video one if $K=4$.  We see that with\n$K=1$, videos 1, 3, and 4 will be suggested on video two.  With $K=4$, no videos\nwill be suggested from video one.  With $K=3$, however, videos 2 and 4 will be\nsuggested from video one.\n\n</p><p>\n</p><p>Problem credits: Jay Leeds\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=788"
    },
    {
      "title": "Problem 1. Rest Stops",
      "subtitle": "USACO 2018 February Contest, Silver",
      "id": 810,
      "year": "2018",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John and his personal trainer Bessie are hiking up Mount Vancowver. For\ntheir purposes (and yours), the mountain can be represented as a long straight\ntrail of length $L$ meters ($1 \\leq L \\leq 10^6$). Farmer John will hike the\ntrail at a constant travel rate of $r_F$ seconds per meter\n($1 \\leq r_F \\leq 10^6$). Since he is working on his stamina, he will not take\nany rest stops along the way.\n\n<p>Bessie, however, is allowed to take rest stops, where she might find some tasty\ngrass. Of course, she cannot stop just anywhere! There are $N$ rest stops along\nthe trail ($1 \\leq N \\leq 10^5$); the $i$-th stop is $x_i$ meters from the start\nof the trail ($0 &lt; x_i &lt; L$) and has a tastiness value $c_i$\n($1 \\leq c_i \\leq 10^6$). If Bessie rests at stop $i$ for $t$ seconds, she\nreceives $c_i \\cdot t$ tastiness units.\n\n</p><p>When not at a rest stop, Bessie will be hiking at a fixed travel rate of $r_B$\nseconds per meter ($1 \\leq r_B \\leq 10^6$). Since Bessie is young and fit, $r_B$\nis strictly less than $r_F$.\n\n</p><p>Bessie would like to maximize her consumption of tasty grass. But she is worried\nabout Farmer John; she thinks that if at any point along the hike she is behind\nFarmer John on the trail, he might lose all motivation to continue!\n\n</p><p>Help Bessie find the maximum total tastiness units she can obtain while making\nsure that Farmer John completes the hike.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file reststops.in):</h4>\nThe first line of input contains four integers: $L$, $N$, $r_F$, and $r_B$. The\nnext $N$ lines describe the rest stops. For each $i$ between $1$ and $N$, the\n$i+1$-st line contains two integers $x_i$ and $c_i$, describing the position of\nthe $i$-th rest stop and the tastiness of the grass there.\n\n<p>It is guaranteed that $r_F &gt; r_B$, and $0 &lt; x_1 &lt; \\dots &lt; x_N &lt; L $. <strong> Note\nthat $r_F$ and $r_B$ are given in seconds per meter! </strong>\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file reststops.out):</h4>\nA single integer: the maximum total tastiness units Bessie can obtain.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 2 4 3\n7 2\n8 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">15\n</pre>\n\n<p>In this example, it is optimal for Bessie to stop for $7$ seconds at the $x=7$ rest stop (acquiring $14$ tastiness units) and then stop for an additional $1$ second at the $x=8$ rest stop (acquiring $1$ more tastiness unit, for a total of $15$ tastiness units).\n\n</p><p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=810"
    },
    {
      "title": "Problem 2. Snow Boots",
      "subtitle": "USACO 2018 February Contest, Silver",
      "id": 811,
      "year": "2018",
      "division": "silver",
      "number": "2",
      "problem": "It's winter on the farm, and that means snow! There are $N$ tiles on the path\nfrom the farmhouse to the barn, conveniently numbered $1 \\dots N$, and tile $i$\nis covered in $f_i$ feet of snow. \n\n<p>Farmer John starts off on tile $1$ and must reach tile $N$ to wake up the cows.\nTile $1$ is sheltered by the farmhouse roof, and tile $N$ is sheltered by the\nbarn roof, so neither of these tiles has any snow. But to step on the other\ntiles, Farmer John needs to wear boots!\n\n</p><p>In his foul-weather backpack, Farmer John has $B$ pairs of boots, numbered\n$1 \\dots B$. Some pairs are more heavy-duty than others, and some pairs are more\nagile than others. In particular, pair $i$ lets FJ step in snow at most $s_i$\nfeet deep, and lets FJ move at most $d_i$ forward in each step.\n\n</p><p>Unfortunately, the boots are packed in such a way that Farmer John can only\naccess the topmost pair at any given time. So at any time, Farmer John can\neither put on the topmost pair of boots (discarding his old pair) or discard the\ntopmost pair of boots (making a new pair of boots accessible).\n\n</p><p>Farmer John can only change boots while standing on a tile. If that tile has $f$\nfeet of snow, both the boots he takes off AND the boots he puts on must be able\nto withstand at least $f$ feet of snow. Intermediate pairs of boots which he\ndiscards without wearing do not need to satisfy this restriction.\n\n</p><p>Help Farmer John minimize waste, by determining the minimum number of pairs of\nboots he needs to discard in order to reach the barn.  You may assume that\nFarmer John is initially not wearing any boots.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file snowboots.in):</h4>\nThe first line contains two space-separated integers $N$ and $B$\n($2 \\leq N,B \\leq 250$).\n\n<p>The second line contains $N$ space-separated integers.  The $i$th integer is\n$f_i$, giving the depth of snow on tile $i$ ($0 \\leq f_i \\leq 10^9$). It's\nguaranteed that $f_1 = f_N = 0$.\n\n</p><p>The next $B$ lines contain two space-separated integers each. The first integer\non line $i+2$ is $s_i$, the maximum depth of snow in which pair $i$ can step.\nThe second integer on line $i+2$ is $d_i$, the maximum step size for pair $i$.\nIt's guaranteed that $0 \\leq s_i \\leq 10^9$ and $1 \\leq d_i \\leq N-1$.\n\n</p><p>The boots are described in top-to-bottom order, so pair $1$ is the topmost pair\nin FJ's backpack, and so forth.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file snowboots.out):</h4>\nThe output should consist of a single integer, giving the minimum number of\nboots Farmer John needs to discard. It's guaranteed that it will be possible for FJ to make it to the barn.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 4\n0 2 8 3 6 7 5 1 4 0\n2 3\n4 2\n3 4\n7 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean and Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=811"
    },
    {
      "title": "Problem 3. Teleportation",
      "subtitle": "USACO 2018 February Contest, Silver",
      "id": 812,
      "year": "2018",
      "division": "silver",
      "number": "3",
      "problem": "One of the farming chores Farmer John dislikes the most is hauling around lots\nof cow manure.  In order to streamline this process, he comes up with a\nbrilliant invention: the manure teleporter!  Instead of hauling manure between\ntwo points in a cart behind his tractor, he can use the manure teleporter to\ninstantly transport manure from  one location to another.\n\n<p>Farmer John's farm is built along a single long straight road, so any location\non his farm can be described simply using its position along this road\n(effectively a point on the number line).  A teleporter is described by two\nnumbers $x$ and $y$, where manure brought to location $x$ can be instantly\ntransported to location $y$.  \n\n</p><p>Farmer John decides to build a teleporter with the first endpoint located at\n$x=0$; your task is to help him determine the best choice for the other endpoint\n$y$.  In particular, there are $N$ piles of manure on his farm\n($1 \\leq N \\leq 100,000$).  The $i$th pile needs to moved from position $a_i$ to\nposition $b_i$, and Farmer John transports each pile separately from the others.\nIf we let $d_i$ denote the amount of distance FJ drives with manure in his\ntractor hauling the $i$th pile, then it is possible that $d_i = |a_i-b_i|$ if he\nhauls the $i$th pile directly with the tractor, or that $d_i$ could potentially\nbe less if he uses the teleporter (e.g., by hauling  with his tractor from $a_i$\nto $x$, then from $y$ to $b_i$).  \n\n</p><p>Please help FJ determine the minimum possible sum of the $d_i$'s he can achieve\nby building the other endpoint $y$ of the teleporter in a carefully-chosen\noptimal  position.  The same position $y$ is used during transport of every\npile.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file teleport.in):</h4>\nThe first line of input contains $N$.  In the $N$ lines that follow, the $i$th\nline contains $a_i$ and $b_i$, each an integer in the range $-10^8 \\ldots 10^8$.\nThese values are not necessarily all distinct.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file teleport.out):</h4>\nPrint a single number giving the minimum sum of $d_i$'s FJ can achieve.  Note\nthat this number might be too large to fit into a standard 32-bit integer, so\nyou may need to use large integer data types like a \"long long\" in C/C++.  Also\nyou may want to consider whether the answer is necessarily an integer or not...\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n-5 -7\n-3 10\n-2 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>In this example, by setting $y = 8$ FJ can achieve $d_1 = 2$, $d_2 = 5$, and\n$d_3 = 3$.  Note that any value of $y$ in the range $[7,10]$ would also yield an\noptimal solution.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=812"
    },
    {
      "title": "Problem 1. Out of Sorts",
      "subtitle": "USACO 2018 US Open Contest, Silver",
      "id": 834,
      "year": "2018",
      "division": "silver",
      "number": "1",
      "problem": "Keeping an eye on long term career possibilities beyond the farm, Bessie the cow\nhas started learning algorithms from various on-line coding websites.\n\n<p>Her favorite algorithm thus far is \"bubble sort\".  Here is Bessie's\nimplementation, in cow-code, for sorting an array $A$ of length $N$.\n\n</p><p></p><pre>sorted = false\nwhile (not sorted):\n   sorted = true\n   moo\n   for i = 0 to N-2:\n      if A[i+1] &lt; A[i]:\n         swap A[i], A[i+1]\n         sorted = false\n</pre>\n\n<p>Apparently, the \"moo\" command in cow-code does nothing more than print out\n\"moo\".  Strangely, Bessie seems to insist on including it at various points in\nher code.\n\n</p><p>Given an input array, please predict how many times \"moo\" will be printed by\nBessie's code.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file sort.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100,000$).  The next $N$\nlines  describe $A[0] \\ldots A[N-1]$, each being an integer in the range\n$0 \\ldots 10^9$. Input elements are not guaranteed to be distinct.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file sort.out):</h4>\nPrint the number of times \"moo\" is printed.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1\n5\n3\n8\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=834"
    },
    {
      "title": "Problem 2. Lemonade Line",
      "subtitle": "USACO 2018 US Open Contest, Silver",
      "id": 835,
      "year": "2018",
      "division": "silver",
      "number": "2",
      "problem": "It's a hot summer day out on the farm, and Farmer John is serving lemonade to\nhis $N$ cows! All $N$ cows (conveniently numbered $1 \\dots N$) like lemonade,\nbut some of them like it more than others. In particular, cow $i$ is willing to\nwait in a line behind at most $w_i$ cows to get her lemonade. Right now all $N$\ncows are in the fields, but as soon as Farmer John rings his cowbell, the cows\nwill immediately descend upon FJ's lemonade stand. They will all arrive before\nhe starts serving lemonade, but no two cows will arrive at the same time.\nFurthermore, when cow $i$ arrives, she will join the line if and only if there\nare at most $w_i$ cows already in line.\n\n<p>Farmer John wants to prepare some amount of lemonade in advance, but he does not\nwant to be wasteful. The number of cows who join the line might depend on the\norder in which they arrive. Help him find the minimum possible number of cows\nwho join the line.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file lemonade.in):</h4>\nThe first line contains $N$, and the second line contains the $N$\nspace-separated integers $w_1, w_2, \\dots, w_N$.  It is guaranteed that\n$1 \\leq N \\leq 10^5$, and that $0 \\leq w_i \\leq 10^9$ for each cow $i$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file lemonade.out):</h4>\nPrint the minimum possible number of cows who might join the line, among all\npossible orders in which the cows might arrive.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n7 1 400 2 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this setting, only three cows might end up in line (and this is the smallest\npossible).  Suppose the cows with $w = 7$ and $w = 400$ arrive first and wait in\nline.  Then the cow with $w = 1$ arrives and turns away, since 2 cows are already\nin line.  The cows with $w = 2$ then arrive, one staying and one turning away.\n\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=835"
    },
    {
      "title": "Problem 3. Multiplayer Moo",
      "subtitle": "USACO 2018 US Open Contest, Silver",
      "id": 836,
      "year": "2018",
      "division": "silver",
      "number": "3",
      "problem": "The cows have come up with a creative new game, surprisingly giving it the least\ncreative name possible: \"Moo\".\n\n<p>The game of Moo is played on an $N \\times N$ grid of square cells, where a cow\nclaims a  grid cell by yelling \"moo!\" and writing her numeric ID number in the\ncell.  \n\n</p><p>At the end of the game, every cell contains a number.  At this point, a cow wins\nthe game if she has created a region of connected cells as least as large as any\nother region.  A \"region\" is defined as a group of cells all with the same ID\nnumber, where every cell in the region is directly adjacent to some other cell\nin the same region either above, below, left, or to the right (diagonals don't\ncount).  \n\n</p><p>Since it is a bit boring to play as individuals, the cows are also interested in\npairing up to play as teams.  A team of two cows can create a region as before,\nbut now the cells in the region can belong to either of the two cows on the\nteam.\n\n</p><p>Given the final state of the game board, please help the cows compute the number\nof cells  belonging to the largest region that any one cow owns, and the number\nof cells belonging  to the largest region that can be claimed by a two-cow team.\nA region claimed by a two-cow team only counts if it contains the ID numbers of\nboth cows on the team, not just one of the cows.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file multimoo.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 250$).  The next $N$ lines\neach contain $N$ integers (each in the range $0 \\ldots 10^6$), describing the\nfinal state of the game board.  At least two distinct ID numbers will be present\nin the board.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file multimoo.out):</h4>\nThe first line of output should describe the largest region size claimed by any\nsingle cow, and the second line of output should describe the largest region\nsize claimed by any team of two cows.  \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n2 3 9 3\n4 9 9 1\n9 9 1 7\n2 1 1 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n10\n</pre>\n\n<p>In this example, the largest region for a single cow consists of five 9s.  If \ncows with IDs 1 and 9 team up, they can form a region of size 10.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=836"
    },
    {
      "title": "Problem 1. Convention",
      "subtitle": "USACO 2018 December Contest, Silver",
      "id": 858,
      "year": "2018",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John is hosting a new bovine grass-eating convention at his farm!\n\n<p>Cows from all over the world are arriving at the local airport to attend the\nconvention and eat grass. Specifically, there are $N$ cows arriving at the\nairport ($1 \\leq N \\leq 10^5$) and cow $i$ arrives at time $t_i$\n($0 \\leq t_i \\leq 10^9$). Farmer John has arranged $M$ ($1 \\leq M \\leq 10^5$)\nbuses to transport the cows from the airport. Each bus can hold up to $C$\ncows in it ($1 \\leq C \\leq N$). Farmer John is waiting with the buses at the\nairport and would like to assign the arriving cows to the buses. A bus can leave\nat the time when the last cow on it arrives. Farmer John wants to be a good host\nand so does not want to keep the arriving cows waiting at the airport too long.\nWhat is the smallest  possible value of the maximum waiting time of any one\narriving cow if Farmer John coordinates his buses optimally? A cow’s waiting\ntime is the difference between her arrival time and the departure of her\nassigned bus.\n\n</p><p>It is guaranteed that $MC \\geq N$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file convention.in):</h4>\nThe first line contains three space separated integers $N$, $M$, and $C$. The\nnext line contains $N$ space separated integers representing the arrival time of\neach cow.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file convention.out):</h4>\nPlease write one line containing the optimal minimum maximum waiting time for\nany one arriving cow.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 3 2\n1 1 10 14 4 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>If the two cows arriving at time 1 go in one bus, cows arriving at times 3 and 4\nin the second, and cows arriving at times 10 and 14 in the third, the longest\ntime a cow has to wait is 4 time units (the cow arriving at time 10 waits from\ntime 10 to time 14).\n\n</p><p>\n</p><p>Problem credits: Grace Cai\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=858"
    },
    {
      "title": "Problem 2. Convention II",
      "subtitle": "USACO 2018 December Contest, Silver",
      "id": 859,
      "year": "2018",
      "division": "silver",
      "number": "2",
      "problem": "Despite long delays in airport pickups, Farmer John's convention for cows\ninterested in  eating grass has been going well so far.  It has attracted cows\nfrom all over the world.\n\n<p>The main event of the conference, however, is looking like it might cause Farmer\nJohn some further scheduling woes.  A very small pasture on his farm features a\nrare form of grass that is supposed to be the tastiest in the world, according\nto discerning cows.  As a result, all of the $N$ cows at the conference\n($1 \\leq N \\leq 10^5$) want to sample this grass.  This will likely cause long\nlines to form, since the pasture is so small it can only accommodate one cow at\na time.\n\n</p><p>Farmer John knows the time $a_i$ that each cow $i$ plans to arrive at the\nspecial pasture, as well as the amount of time $t_i$ she plans to spend sampling\nthe special grass, once it becomes her turn.  Once cow $i$ starts eating the\ngrass, she spends her full time of $t_i$ before leaving, during which other\narriving cows need to wait.  If multiple cows are waiting when the pasture\nbecomes available again, the cow with the highest seniority is the next to be\nallowed to sample the grass.  For this purpose, a cow who arrives right as \nanother cow is finishing is considered \"waiting\".  Similarly, if a number of \ncows all arrive at exactly the same time while no cow is currently eating,\nthen the one with highest seniority is the next to eat.\n\n</p><p>Please help FJ compute the maximum amount of time any cow might possibly have to\nwait in line (between time $a_i$ and the time the cow begins eating).  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file convention2.in):</h4>\nThe first line of input contains $N$.  Each of the next $N$ lines specify the\ndetails of the $N$ cows in order of seniority (the most senior cow being first).\nEach line contains $a_i$ and $t_i$ for one cow.  The $t_i$'s are positive\nintegers each at most $10^4$, and the $a_i$'s are positive integers at most\n$10^9$.  \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file convention2.out):</h4>\nPlease print the longest potential waiting time over all the cows.  \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n25 3\n105 30\n20 50\n10 17\n100 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>In this example, we have 5 cows (numbered 1..5 according to their order in the\ninput). Cow 4 is the first to arrive (at time 10), and before she can finish\neating (at time 27) cows 1 and 3 both arrive.  Since cow 1 has higher seniority,\nshe gets to eat next, having waited 2 units of time beyond her arrival time. \nShe finishes at time 30, and then cow 3 starts eating, having waited for 10\nunits of time beyond her starting time.  After a gap where no cow eats, cow 5\narrives and then while she is eating cow 2 arrives, eating 5 units of time\nlater.  The cow who is delayed the most relative to her arrival time is cow 3.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=859"
    },
    {
      "title": "Problem 3. Mooyo Mooyo",
      "subtitle": "USACO 2018 December Contest, Silver",
      "id": 860,
      "year": "2018",
      "division": "silver",
      "number": "3",
      "problem": "With plenty of free time on their hands (or rather, hooves), the cows on Farmer\nJohn's farm often pass the time by playing video games.  One of their favorites\nis based on a popular human video game called Puyo Puyo; the cow version is of\ncourse called Mooyo Mooyo.\n\n<p>The game of Mooyo Mooyo is played on a tall narrow grid $N$ cells tall\n($1 \\leq N \\leq 100$) and 10 cells wide.  Here is an example with $N = 6$:\n\n</p><p></p><pre>0000000000\n0000000300\n0054000300\n1054502230\n2211122220\n1111111223\n</pre>\n\n<p>Each cell is either empty (indicated by a 0), or a haybale in one of nine\ndifferent colors (indicated by characters 1..9).  Gravity causes haybales to\nfall downward, so there is never a 0 cell below a haybale.  \n\n</p><p>Two cells belong to the same connected region if they are directly adjacent\neither horizontally or vertically, and they have the same nonzero color.  Any\ntime a connected region exists with at least $K$ cells, its haybales all\ndisappear, turning into zeros.  If multiple such connected regions exist at the\nsame time, they all disappear simultaneously.  Afterwards, gravity might cause\nhaybales to fall downward to fill some of the resulting cells that became zeros.\nIn the resulting configuration, there may again be connected regions of size at\nleast $K$ cells.  If so, they also disappear (simultaneously, if there are\nmultiple such regions), then gravity pulls the remaining cells downward, and the\nprocess repeats until no connected regions of size at least $K$ exist.  \n\n</p><p>Given the state of a Mooyo Mooyo board, please output a final picture of the\nboard after these operations have occurred.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file mooyomooyo.in):</h4>\nThe first line of input contains $N$ and $K$ ($1 \\leq K \\leq 10N$). The\nremaining $N$ lines specify the initial state of the board.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file mooyomooyo.out):</h4>\nPlease output $N$ lines, describing a picture of the final board state.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 3\n0000000000\n0000000300\n0054000300\n1054502230\n2211122220\n1111111223\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0000000000\n0000000000\n0000000000\n0000000000\n1054000000\n2254500000\n</pre>\n\n<p>In the example above, if $K = 3$, then there is a connected region of size at\nleast $K$ with color 1 and also one with color 2.  Once these are simultaneously\nremoved, the board temporarily looks like this:\n\n</p><p></p><pre>0000000000\n0000000300\n0054000300\n1054500030\n2200000000\n0000000003\n</pre>\n\n<p>Then, gravity takes effect and the haybales drop to this configuration:\n\n</p><p></p><pre>0000000000\n0000000000\n0000000000\n0000000000\n1054000300\n2254500333\n</pre>\n\n<p>Again, there is a region of size at least $K$ (with color 3).  Removing it\nyields the final board configuration:\n\n</p><p></p><pre>0000000000\n0000000000\n0000000000\n0000000000\n1054000000\n2254500000\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=860"
    },
    {
      "title": "Problem 1. Grass Planting",
      "subtitle": "USACO 2019 January Contest, Silver",
      "id": 894,
      "year": "2019",
      "division": "silver",
      "number": "1",
      "problem": "It's the time of year for Farmer John to plant grass in all of his fields. The\nentire farm consists of $N$ fields ($1 \\leq N \\leq 10^5$), conveniently numbered\n$1 \\ldots N$ and conveniently connected by $N-1$ bidirectional pathways in such\na way that every field can reach every other field via some collection of\npathways.  \n\n<p>Farmer John can potentially plant a different type of grass in each field, but\nhe wants to minimize the number of grass types he uses in total, since the more\ntypes of grass he uses, the more expense he incurs.\n\n</p><p>Unfortunately, his cows have grown rather snobbish about their selection of\ngrass on the farm.  If the same grass type is planted in two adjacent\nfields (directly connected by a pathway) or even two nearly-adjacent fields\n(both directly connected to a common field with pathways), then  the cows will\ncomplain about lack of variety in their dining options. The last thing Farmer\nJohn needs is complaining cows, given how much mischief they have been known to\ncreate when dissatisfied.\n\n</p><p>Please help Farmer John determine the minimum number of types of grass he needs\nfor his entire farm.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file planting.in):</h4>\nThe first line of input contains $N$.  Each of the remaining $N-1$ lines \ndescribes a pathway in terms of the two fields it connects.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file planting.out):</h4>\nPrint the minimum number of types of grass that Farmer John needs to use.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 2\n4 3\n2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this simple example, there are 4 fields all connected in a linear fashion. A\nminimum of three grass types are needed.  For example, Farmer John could  plant\nthe fields with grass types A, B, and C as A - B - C - A.\n\n</p><p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=894"
    },
    {
      "title": "Problem 2. Icy Perimeter",
      "subtitle": "USACO 2019 January Contest, Silver",
      "id": 895,
      "year": "2019",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John is going into the ice cream business!  He has built a machine that\nproduces blobs of ice cream but unfortunately in somewhat irregular  shapes, and\nhe is hoping to optimize the machine to make the shapes  produced as output more\nreasonable.\n\n<p>The configuration of ice cream output by the machine can be described using an\n$N \\times N$ grid ($1 \\leq N \\leq 1000$) as follows:\n\n</p><p></p><pre>##....\n....#.\n.#..#.\n.#####\n...###\n....##\n</pre>\n\n<p>Each '.' character represents empty space and each '#' character represents a\n$1 \\times 1$ square cell of ice cream.  \n\n</p><p>Unfortunately, the machine isn't working very well at the moment and might\nproduce multiple disconnected blobs of ice cream (the figure above has two). A\nblob of ice cream is connected if you can reach any ice cream cell from every\nother ice cream cell in the blob by repeatedly stepping to adjacent ice cream\ncells in the north, south, east, and west directions.  \n\n</p><p>Farmer John would like to find the area and perimeter of the blob of ice  cream\nhaving the largest area.  The area of a blob is just the number of '#'\ncharacters that are part of the blob. If multiple blobs tie for the largest\narea, he wants to know the smallest perimeter among them.  In the figure above,\nthe smaller blob has area 2 and perimeter 6, and the larger blob has area 13 and\nperimeter 22.  \n\n</p><p>Note that a blob could have a \"hole\" in the middle of it (empty space surrounded\nby ice cream).  If so, the boundary with the hole also counts towards the\nperimeter of the blob.  Blobs can also appear nested within other blobs, in\nwhich case they are treated as separate blobs.  For example, this case has a\nblob of area 1 nested within a blob of area 16:\n\n</p><p></p><pre>#####\n#...#\n#.#.#\n#...#\n#####\n</pre>\n\n<p>Knowing both the area and perimeter of a blob of ice cream is important, since\nFarmer John ultimately wants to minimize the ratio of perimeter to area, a \nquantity he calls the icyperimetric measure of his ice cream.  When this ratio\nis small, the ice cream melts slower, since it has less surface area relative to\nits mass.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file perimeter.in):</h4>\nThe first line of input contains $N$, and the next $N$ lines describe the output\nof  the machine.  At least one '#' character will be present.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file perimeter.out):</h4>\nPlease output one line containing two space-separated integers, the first being\nthe area of the largest blob, and the second being its perimeter.  If multiple\nblobs are tied for largest area, print the information for whichever of these\nhas the smallest perimeter.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n##....\n....#.\n.#..#.\n.#####\n...###\n....##\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">13 22\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=895"
    },
    {
      "title": "Problem 3. Mountain View",
      "subtitle": "USACO 2019 January Contest, Silver",
      "id": 896,
      "year": "2019",
      "division": "silver",
      "number": "3",
      "problem": "From her pasture on the farm, Bessie the cow has a wonderful view of a  mountain\nrange on the horizon.  There are $N$ mountains in the range\n($1 \\leq N \\leq 10^5$).  If we think of Bessie's field of vision as the $xy$\nplane, then each mountain is a triangle whose base rests on the $x$ axis.  The\ntwo sides of the mountain are both at 45 degrees to the base, so the peak of the\nmountain forms a right angle.  Mountain $i$ is therefore precisely described by\nthe location $(x_i, y_i)$ of its peak.   No two mountains have  exactly the same\npeak location.\n\n<p>Bessie is trying to count all of the mountains, but since they all have roughly\nthe same color, she cannot see a mountain if its peak lies on or within the\ntriangular shape of any other mountain.\n\n</p><p>Please determine the number of distinct peaks, and therefore mountains, that\nBessie can see.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file mountains.in):</h4>\nThe first line of input contains $N$.  Each of the remaining $N$ lines contains\n$x_i$ ($0 \\leq x_i \\leq 10^9$) and $y_i$ ($1 \\leq y_i \\leq 10^9$) describing the\nlocation of one mountain's peak.  \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file mountains.out):</h4>\nPlease print the number of mountains that Bessie can distinguish.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n4 6\n7 2\n2 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this example, Bessie can see the first and last mountain.  The second\nmountain is obscured by the first.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=896"
    },
    {
      "title": "Problem 1. Sleepy Cow Herding",
      "subtitle": "USACO 2019 February Contest, Silver",
      "id": 918,
      "year": "2019",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John's $N$ cows are always wandering off to  the far reaches of the farm!\nHe needs your help herding them back together.\n\n<p>The main field in the farm is long and skinny -- we can think of it as a number\nline, on which a cow can occupy any integer location.  The $N$ cows are\ncurrently situated at different integer locations, and Farmer John wants to move\nthem so they occupy consecutive locations (e.g., positions 3, 4, 5, 6, 7, and\n8).\n\n</p><p>Unfortunately, the cows are rather sleepy, and Farmer John has trouble getting\ntheir attention to make them move.  At any point in time, he can only make a cow\nmove if she is an \"endpoint\" (either the minimum or maximum position among all\nthe cows).  When he moves a cow, he can instruct her to move to any unoccupied\ninteger location as long as in this new location she is no longer an endpoint. \nObserve that over time, these types of moves tend to push the cows closer and\ncloser together.\n\n</p><p>Please determine the minimum and maximum number of moves possible before the\ncows become grouped in $N$ consecutive locations.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file herding.in):</h4>\nThe first line of input contains $N$ ($3 \\leq N \\leq 10^5$).  Each of the next\n$N$ lines contains the integer location of a single cow, in the range\n$1 \\ldots 10^9$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file herding.out):</h4>\nThe first line of output should contain the minimum number of moves Farmer John\nneeds to make to group the cows together.  The second line of output should\ncontain the maximum number of such moves he could conceivably make before the\ncows become grouped together.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n7\n4\n9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n2\n</pre>\n\n<p>The minimum number of moves is 1 --- if Farmer John moves the cow in position 4\nto position 8, then the cows are at consecutive locations 7, 8, 9.  The maximum\nnumber of  moves is 2.  For example, the cow at position 9 could be moved to\nposition 6, then the cow at position 7 could be moved to position 5.\n\n</p><p>\n</p><p>Problem credits: Matthew Fahrbach\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=918"
    },
    {
      "title": "Problem 2. Painting the Barn",
      "subtitle": "USACO 2019 February Contest, Silver",
      "id": 919,
      "year": "2019",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John is not good at multitasking.  He gets distracted often,  making it\nhard to complete long projects. Currently, he is trying to paint one side of his\nbarn,  but he keeps painting small rectangular areas and then getting\nsidetracked by the needs of tending to his cows, leaving some parts of the barn\npainted with more coats of paint than others.\n\n<p>We can describe the side of the barn as a 2D $x$-$y$ plane, on which Farmer John\npaints $N$ rectangles, each with sides parallel to the coordinate axes, each\ndescribed  by the coordinates of its lower-left and upper-right corner points.  \n\n</p><p>Farmer John wants to apply several coats of paint to the barn so it doesn't need\nto be repainted again in the immediate future.  However, he doesn't want to\nwaste time applying an excessive number of coats of paint.  It turns out that\n$K$ coats of  paint is the optimal amount.  Please help him determine how much\narea of the barn is covered with exactly $K$ coats of paint after he paints all\nhis  rectangles.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file paintbarn.in):</h4>\nThe first line of input contains $N$ and $K$ ($1 \\leq K \\leq N \\leq 10^5$). \nEach of the remaining $N$ lines contains four integers $x_1, y_1, x_2, y_2$ \ndescribing a rectangular region being painted, with lower-left corner\n$(x_1, y_1)$ and upper-right corner $(x_2, y_2)$.  All $x$ and $y$ values are in\nthe range $0 \\ldots 1000$, and all rectangles have positive area.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file paintbarn.out):</h4>\nPlease output the area of the barn that is covered by exactly $K$ coats of\npaint.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\n1 1 5 5\n4 4 7 6\n3 3 8 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n</pre>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=919"
    },
    {
      "title": "Problem 3. The Great Revegetation",
      "subtitle": "USACO 2019 February Contest, Silver",
      "id": 920,
      "year": "2019",
      "division": "silver",
      "number": "3",
      "problem": "A lengthy drought has left Farmer John's $N$ pastures devoid of grass.  However,\nwith the rainy season arriving soon, the time has come to \"revegetate\".\nIn Farmer John's shed, he has two buckets, each with a different type of grass \nseed.  He wants to plant grass in each of his $N$ pastures, choosing exactly\none type of grass to plant in each.\n\n<p>Being a dairy farmer, Farmer John wants to make sure he manages the somewhat\nparticular dietary needs of his $M$ cows.  Each of his $M$ cows has two favorite \npastures.  Some of his cows have a dietary restriction that they should only eat\none type of grass consistently --- Farmer John therefore wants to make sure the\nsame type of grass is planted in the two favorite fields of any such cow.  Other\ncows have a very different dietary restriction, requiring them to eat different\ntypes of grass.  For those cows, Farmer John of course wants to make sure their \ntwo favorite fields contain different grass types.\n\n</p><p>Please help Farmer John determine the number of different ways he can plant \ngrass in his $N$ pastures.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file revegetate.in):</h4>\nThe first line of input contains $N$ ($2 \\leq N \\leq 10^5$) and $M$\n($1 \\leq M \\leq 10^5$). Each of the next $M$ lines contains a character\nthat is either 'S' or 'D', followed by two integers in the\nrange $1 \\ldots N$, describing the pair of pastures that are the two favorites\nfor one of Farmer John's cows.  If the character is 'S', this line represents\na cow that needs the same type of grass in its two favorite pastures.  If\nthe character is 'D', the line represents a cow that needs different grass\ntypes.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file revegetate.out):</h4>\nOutput the number of ways Farmer John can plant grass in his $N$ pastures.\nPlease write your answer in binary.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\nS 1 2\nD 3 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi and Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=920"
    },
    {
      "title": "Problem 1. Left Out",
      "subtitle": "USACO 2019 US Open Contest, Silver",
      "id": 942,
      "year": "2019",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John is attempting to take a photograph of his herd of cows.  From past\nexperience, he knows this particular endeavor never usually ends well.  \n\n<p>This time, Farmer John has purchased an expensive drone in order to take an\naerial photo. To make the photo look as good as possible, he wants his cows all\nto be facing the same direction when the photo is taken.  The cows are currently arranged\nin an  $N \\times N$ grid ($2 \\leq N \\leq 1000$) inside a fenced-in square\npasture,  for example:\n\n</p><p></p><pre>RLR\nRRL\nLLR\n</pre>\n\n<p>Here, an 'R' means a cow facing right, and an 'L' means a cow facing left. Since\nthe cows are packed together, Farmer John cannot walk up to an individual cow to\nmake it turn around.  All he can do is shout at any row or column of cows to\nturn around, causing L's to change to R's and R's to L's within the row or\ncolumn in question.  Farmer John can yell at as many rows or columns as he\nwants, even at the same row or column more than once.\n\n</p><p>As expected, Farmer John observes that he is unable to make his cows all face\none common direction.  The best he can do is get all but one of the cows to face\nthe same direction.  Please determine the identity of such a cow.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file leftout.in):</h4>\nThe first line contains $N$.  The next $N$ lines describe rows $1 \\ldots N$ in \nthe grid of cows, each containing a string of length $N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file leftout.out):</h4>\nPrint the row and column index of a cow such that if that cow were flipped,\nFarmer John could make all his cows face the same direction.  If no such cow\nexists, print -1.  If multiple such cows exist, print the one with the  smallest\nrow index, or if multiple such cows have the same smallest row index, print the\none with the smallest column index.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\nRLR\nRRL\nLLR\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 1\n</pre>\n\n<p>In the example above, the cow in row 1, column 1 (the upper-left corner) is the\noffending cow, since Farmer John can shout at row 2 and column 3 to make all\nother cows face left, with just this cow facing right.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=942"
    },
    {
      "title": "Problem 2. Cow Steeplechase II",
      "subtitle": "USACO 2019 US Open Contest, Silver",
      "id": 943,
      "year": "2019",
      "division": "silver",
      "number": "2",
      "problem": "In the past, Farmer John had contemplated a number of innovative ideas for new\ncow sports, among them Cow Steeplechase, where herds of cows would race around a\ncourse and jump over hurdles.  His past efforts to build interest in this sport\nhave met with mixed results, so he is hoping to build an even larger Cow\nSteeplechase course on his farm to try and create more publicity for the sport.\n\n<p>Farmer John's new course is carefully planned around $N$ hurdles, conveniently\nnumbered $1 \\ldots N$ $(2 \\leq N \\leq 10^5$), each one described as a line\nsegment on the 2D map of the course.  These line segments should not intersect\neach-other in any way, even their at endpoints.  \n\n</p><p>Unfortunately, Farmer John wasn't paying attention when crafting the course map\nand notices that there are intersections between segments.  However, he also\nnotices that if he takes away just one segment, the map is restored to its\nintended state of having no intersecting segments (not even at endpoints).\n\n</p><p>Please determine a line segment Farmer John can remove from his plan to  restore\nthe property that no segments intersect.  If multiple segments are possible to\nremove in this way, please output the index of the earliest one in the input.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowjump.in):</h4>\nThe first line of input contains $N$.  Each of the $N$ remaining lines describe\none line segment with four integers $x_1$ $y_1$ $x_2$ $y_2$, all nonnegative\nintegers at most $10^9$.  The line segment has $(x_1, y_1)$ and $(x_2, y_2)$  as\nits endpoints.  All endpoints are distinct from each-other.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowjump.out):</h4>\nOutput the earliest index within the input of a segment such that removing that\nsegment causes the remaining segments not to intersect.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n2 1 6 1\n4 0 1 5\n5 6 5 5\n2 7 1 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>Note: You may want to be careful of integer overflow in this problem, due to the\nsize of the integers provided as coordinates of segment endpoints.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=943"
    },
    {
      "title": "Problem 3. Fence Planning",
      "subtitle": "USACO 2019 US Open Contest, Silver",
      "id": 944,
      "year": "2019",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John's $N$ cows, conveniently numbered $1 \\ldots N$\n($2 \\leq N \\leq 10^5$),  have a complex social structure revolving around \"moo\nnetworks\" --- smaller groups of cows that communicate within their group but not\nwith other groups.\n\n<p>Each cow is situated at a distinct $(x,y)$ location on the 2D map of the farm,\nand we know that $M$ pairs of cows $(1 \\leq M &lt; 10^5)$ moo at each-other. Two\ncows that moo at each-other belong to the same moo network. \n\n</p><p>In an effort to update his farm, Farmer John wants to build a rectangular fence,\nwith its edges parallel to the $x$ and $y$ axes.  Farmer John wants to make sure\nthat at least one moo network is completely enclosed by the fence (cows on the\nboundary of the rectangle count as being enclosed).  Please help Farmer John \ndetermine the smallest possible perimeter of a fence that satisfies this \nrequirement.  It is possible for this fence to have zero width or zero height.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file fenceplan.in):</h4>\nThe first line of input contains $N$ and $M$.  The next $N$ lines each contain\nthe $x$ and $y$ coordinates of a cow (nonnegative integers of size at most\n$10^8$). The next $M$ lines each contain two integers $a$ and $b$ describing a\nmoo connection between cows $a$ and $b$.  Every cow has at least one moo \nconnection, and no connection is repeated in the input.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file fenceplan.out):</h4>\nPlease print the smallest perimeter of a fence satisfying Farmer\nJohn's requirements.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 5\n0 5\n10 5\n5 0\n5 10\n6 7\n8 6\n8 4\n1 2\n2 3\n3 4\n5 6\n7 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=944"
    },
    {
      "title": "Problem 1. MooBuzz",
      "subtitle": "USACO 2019 December Contest, Silver",
      "id": 966,
      "year": "2019",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John's cows have recently become fans of playing a simple number game\ncalled \"FizzBuzz\".  The rules of the game are simple: standing in a circle, the\ncows sequentially count upward from one, each cow saying a single number when it\nis her turn.  If a cow ever reaches a multiple of 3, however, she should say\n\"Fizz\" instead of that number.  If a cow reaches a multiple of 5, she should say\n\"Buzz\" instead of that number.  If a cow reaches a multiple of 15, she should\nsay \"FizzBuzz\" instead of that number.  A transcript of the first part of a game\nis therefore:\n\n<p>1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz, 16\n\n</p><p>Having a slightly more limited vocabulary, the version of FizzBuzz played by the\ncows involves saying \"Moo\" instead of Fizz, Buzz, and FizzBuzz.  The beginning\nof the cow version of the game is therefore\n\n</p><p>1, 2, Moo, 4, Moo, Moo, 7, 8, Moo, Moo, 11, Moo, 13, 14, Moo, 16\n\n</p><p>Given $N$ ($1 \\leq N \\leq 10^9$), please determine the $N$th number spoken in\nthis game.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING</h4>\n\n<p></p><ul><li>Test cases 2-5 satisfy $N\\le 10^6.$ </li></ul>\n</div> \n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file moobuzz.in):</h4>\nThe input consists of a single integer, $N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file moobuzz.out):</h4>\nPlease print out the $N$th number spoken during the game.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">7\n</pre>\n\n<p>The 4th number spoken is 7.  The first 4 numbers spoken are 1, 2, 4, 7, since we\nskip over any time a cow says \"Moo\".\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=966"
    },
    {
      "title": "Problem 2. Meetings",
      "subtitle": "USACO 2019 December Contest, Silver",
      "id": 967,
      "year": "2019",
      "division": "silver",
      "number": "2",
      "problem": "Two barns are located at positions $0$ and $L$ $(1\\le L\\le 10^9)$ on a\none-dimensional number line. There are also $N$ cows $(1\\le N\\le 5\\cdot 10^4)$\nat distinct locations on this number line (think of the barns and cows\neffectively as points). Each cow $i$ is initially located at some position $x_i$\nand moving in a positive or negative direction at a speed of one unit per\nsecond, represented by an integer $d_i$ that is either $1$ or $-1$. Each cow\nalso has a weight $w_i$ in the range $[1,10^3]$. All cows always move at a\nconstant velocity until one of the following events occur:\n<ul><li>If cow $i$ reaches a barn, then cow $i$ stops moving.</li><li>A meeting occurs when two cows $i$ and $j$ occupy the same point, where that\npoint is not a barn. In this case, cow $i$ is assigned cow $j$'s previous\nvelocity and vice versa. Note that cows could potentially meet at points that\nare not integers.</li></ul>\n\n<p>Let $T$ be the earliest point in time when the sum of the weights of the cows\nthat have stopped moving (due to reaching one of the barns) is at least half of\nthe sum of the weights of all cows. Please determine the total number of\nmeetings between pairs of cows during the range of time $0 \\ldots T$ (including\nat time $T$).\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $N\\le 10^2$ and $w_i=1$ for all $i.$ </li><li>Test cases 5-7 satisfy $N\\le 10^2.$ </li></ul>\n</div> \n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file meetings.in):</h4>\nThe first line contains two space-separated integers $N$ and $L$. \n\n<p>The next $N$ lines each contain three space-separated integers $w_i$, $x_i$, and\n$d_i.$ All locations $x_i$ are distinct and satisfy $0&lt;x_i&lt;L.$\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file meetings.out):</h4>\nPrint a single line containing the answer. \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 5\n1 1 1\n2 2 -1\n3 3 -1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>The cows in this example move as follows:\n\n</p><p></p><ol><li> The first and second cows meet at position 1.5 at time 0.5. The first cow now\nhas velocity $-1$ and the second has velocity $1.$ </li><li> The second and third cows meet at position 2 at time 1. The second cow now\nhas velocity $-1$ and the third has velocity $1.$ </li><li> The first cow reaches the left barn at time 2. </li><li> The second cow reaches the left barn at time 3. </li><li> The process now terminates since the sum of the weights of the cows that \nhave reached a barn is at least half of the sum of the weights of all cows.  The\nthird cow would have reached the right barn at time 4. </li></ol>\n\n<p>Exactly two meetings occurred.\n\n</p><p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=967"
    },
    {
      "title": "Problem 3. Milk Visits",
      "subtitle": "USACO 2019 December Contest, Silver",
      "id": 968,
      "year": "2019",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John is planning to build $N$ ($1 \\leq N \\leq 10^5$) farms that will be\nconnected by $N-1$ roads, forming a tree (i.e., all farms are reachable from\neach-other, and there are no cycles). Each farm contains a cow, whose breed is\neither Guernsey or Holstein. \n\n<p>Farmer John's $M$ friends ($1 \\leq M \\leq 10^5$) often come to visit him. During\na visit with friend $i$, Farmer John will walk with his friend along the unique\npath of roads from farm $A_i$ to farm $B_i$ (it may be the case that\n$A_i = B_i$). Additionally, they can try some milk from any cow along the path\nthey walk. Since most of Farmer John's friends are also farmers, they have very\nstrong preferences regarding milk. Some of his friends will only drink Guernsey\nmilk, while the remainder will only drink Holstein milk. Any of Farmer John's\nfriends will only be happy if they can drink their preferred type of milk during\ntheir visit.\n\n</p><p>Please determine whether each friend will be happy after visiting.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-5 satisfy $N\\le 10^3, M\\le 2\\cdot 10^3.$ </li></ul>\n</div> \n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file milkvisits.in):</h4>\nThe first line contains the two integers $N$ and $M$.\n\n<p>The second line contains a string of length $N$. The $i$th character of the\nstring is 'G' if the cow in the $i$th farm is a Guernsey, or 'H' if the cow in\nthe $i$th farm is a Holstein.\n\n</p><p>The next $N-1$ lines each contain two distinct integers $X$ and $Y$ \n($1 \\leq X, Y \\leq N$), indicating that there is a road between farms $X$ and\n$Y$. \n\n</p><p>The next $M$ lines contain integers $A_i$, $B_i$, and a character $C_i$. $A_i$\nand $B_i$ represent the endpoints of the path walked during friend $i$'s visit, \nwhile $C_i$ is either G or H if the $i$th friend prefers Guernsey milk or\nHolstein milk.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file milkvisits.out):</h4>\nPrint a binary string of length $M$. The $i$th character of the string should be\n'1' if the $i$th friend will be happy, or '0' otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 5\nHHGHG\n1 2\n2 3\n2 4\n1 5\n1 4 H\n1 4 G\n1 3 G\n1 3 H\n5 5 H\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10110\n</pre>\n\n<p>Here, the path from farm 1 and farm 4 involves farms 1, 2, and 4. All of these\ncontain Holsteins, so the first friend will be satisfied while the second one\nwill not.\n\n</p><p>\n</p><p>Problem credits: Spencer Compton\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=968"
    },
    {
      "title": "Problem 1. Berry Picking",
      "subtitle": "USACO 2020 January Contest, Silver",
      "id": 990,
      "year": "2020",
      "division": "silver",
      "number": "1",
      "problem": "Bessie and her little sister Elsie are picking berries in Farmer John's berry\npatch. Farmer John's patch has exactly $N$ berry trees ($1\\le N\\le 1000$); tree\n$i$ contains exactly $B_i$ berries ($1\\le B_i\\le 1000$). Bessie has exactly $K$\nbaskets ($1 \\le K \\le 1000$, $K$ even). Each basket can hold as many berries\nfrom a single tree as Bessie wants, but cannot contain berries from two\ndifferent trees as their flavors will clash with each other. Baskets may remain\nempty.\n\n<p>Bessie wants to maximize the number of berries she collects. However, Farmer\nJohn wants Bessie to share with her little sister, and so Bessie will have to\ngive Elsie the $K/2$ baskets with the largest number of berries. This means that\nElsie may even end up with more berries than Bessie, which is very unfair, but\nunfortunately, sibling dynamics are not always fair.\n\n</p><p>Help Bessie figure out the maximum number of berries she can collect.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 1-4 satisfy $K\\le 10.$</li><li>Test cases 5-11 satisfy no\nadditional constraints.</li></ul>\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file berries.in):</h4>\nThe first line of input contains space-separated integers $N$ and $K$.\n\n<p>The second line contains $N$ space-separated integers $B_1,B_2,\\ldots,B_N.$\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file berries.out):</h4>\nA single line with the answer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 4\n3 6 8 4 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n</pre>\n\n<p>If Bessie fills\n\n</p><p></p><ul><li> one basket with 6 berries from tree 2 </li><li> two baskets, each with 4 berries from tree 3 </li><li> one basket with 4 berries from tree 4 </li></ul>\n\n<p>then she receives two baskets each with 4 berries, giving her 8 berries in\ntotal.\n\n</p><p>\n</p><p>Problem credits: Nathan Pinsker\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=990"
    },
    {
      "title": "Problem 2. Loan Repayment",
      "subtitle": "USACO 2020 January Contest, Silver",
      "id": 991,
      "year": "2020",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John owes Bessie $N$ gallons of milk ($1\\le N\\le 10^{12}$). He has to\ngive her the milk within $K$ days. However, he doesn't want to give the milk\naway too quickly. On the other hand, he has to make forward progress on the\nloan, so he must give Bessie at least $M$ gallons of milk each day\n($1\\le M\\le 10^{12}$).\n\n<p>Here is how Farmer John decides to pay back Bessie. He first picks a positive\ninteger $X$. He then repeats the following procedure every day:\n\n</p><p></p><ol><li>Assuming that Farmer John has already given Bessie $G$ gallons, compute\n$\\frac{N-G}{X}$ rounded down. Call this number $Y$.</li><li>If $Y$ is less than $M$, set $Y$ to $M$. </li><li>Give Bessie $Y$ gallons of milk.</li></ol>\n\n<p>Determine the largest $X$ such that if Farmer John follows the above procedure,\nFarmer John gives Bessie at least $N$ gallons of milk after $K$ days\n($1\\le K\\le 10^{12}$). \n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $K\\le 10^5.$</li><li>Test cases 5-11 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file loan.in):</h4>\nThe only line of input contains three space-separated positive integers $N$,\n$K$, and $M$ satisfying $K\\cdot M&lt;N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file loan.out):</h4>\nOutput the largest positive integer $X$ such that Farmer John will give Bessie\nat least $N$ gallons using the above procedure.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 3 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>For the first test case, when $X=2$ Farmer John gives Bessie $5$ gallons  on the\nfirst day and $M=3$ gallons on each of the next two days.\n\n</p><p>Note that the large size of integers involved in this problem may require the use of 64-bit integer\ndata types (e.g., a \"long long\" in C/C++).\n\n</p><p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=991"
    },
    {
      "title": "Problem 3. Wormhole Sort",
      "subtitle": "USACO 2020 January Contest, Silver",
      "id": 992,
      "year": "2020",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John's cows have grown tired of his daily request that they sort\nthemselves before leaving the barn each morning. They have just completed their\nPhDs in quantum physics, and are ready to speed things up a bit.\n\n<p>This morning, as usual, Farmer John's $N$ cows ($1 \\leq N \\leq 10^5$),\nconveniently numbered $1 \\dots N$, are scattered throughout the barn at $N$\ndistinct locations, also numbered $1 \\dots N$, such that cow $i$ is at location\n$p_i$. But this morning there are also $M$ wormholes ($1 \\leq M \\leq 10^5$),\nnumbered $1 \\dots M$, where wormhole $i$ bidirectionally connects location $a_i$\nwith location $b_i$, and has a width $w_i$ \n($1\\le a_i,b_i\\le N, a_i\\neq b_i, 1\\le w_i\\le 10^9$).\n\n</p><p>At any point in time, two cows located at opposite ends of a wormhole may choose\nto simultaneously swap places through the wormhole. The cows must perform such\nswaps until cow $i$ is at location $i$ for $1 \\leq i \\leq N$.\n\n</p><p>The cows are not eager to get squished by the wormholes. Help them maximize the\nwidth of the least wide wormhole which they must use to sort themselves.\nIt is guaranteed that it is possible for the cows to sort themselves.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 3-5 satisfy $N,M\\le 1000.$</li><li>Test cases 6-10 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file wormsort.in):</h4>\nThe first line contains two integers, $N$ and $M$.\n\n<p>The second line contains the $N$ integers $p_1, p_2, \\dots, p_N$. It is\nguaranteed that $p$ is a permutation of $1\\ldots N.$\n\n</p><p>For each $i$ between $1$ and $M$, line $i+2$ contains the integers $a_i$, $b_i$,\nand $w_i$. \n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file wormsort.out):</h4>\nA single integer: the maximum minimal wormhole width which a cow must squish\nitself into during the sorting process. If the cows do not need any wormholes to\nsort themselves, output $-1$. \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 4\n3 2 1 4\n1 2 9\n1 3 7\n2 3 10\n2 4 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>Here is one possible way to sort the cows using only wormholes of width at least\n9:\n\n</p><p></p><ul><li> Cow 1 and cow 2 swap positions using the third wormhole. </li><li> Cow 1 and cow 3 swap positions using the first wormhole. </li><li> Cow 2 and cow 3 swap positions using the third wormhole. </li></ul>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 1\n1 2 3 4\n4 2 13\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">-1\n</pre>\n\n<p>No wormholes are needed to sort the cows.\n\n</p><p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=992"
    },
    {
      "title": "Problem 1. Swapity Swapity Swap",
      "subtitle": "USACO 2020 February Contest, Silver",
      "id": 1014,
      "year": "2020",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John's $N$ cows ($1\\le N\\le 10^5$) are standing in a line. The $i$th cow\nfrom the left has label $i$ for each $1\\le i\\le N$.\n\n<p>Farmer John has come up with a new morning exercise routine for the cows.  He \nhas given the cows $M$ pairs of integers $(L_1,R_1) \\ldots (L_M, R_M)$, where\n$1 \\leq M \\leq 100$.  He then tells the cows to repeat the following $M$-step\nprocess exactly $K$ ($1\\le K\\le 10^9$) times:\n\n</p><p></p><ul><li>For each $i$ from $1$ to $M$:\n<ul><li>The sequence of cows currently in positions $L_i \\ldots R_i$ from the left\nreverse their order.</li></ul>\n</li></ul>\n\n<p>After the cows have repeated this process exactly $K$ times, please output the\nlabel of the $i$th cow from the left for each $1\\le i\\le N$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test case 2 satisfies $N=K=100$.</li><li>Test cases 3-5 satisfy $K\\le 10^3$.</li><li>Test cases 6-10 satisfy no additional constraints.</li></ul>\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file swap.in):</h4>\nThe first line contains $N$, $M$, and $K$.  For each $1\\le i\\le M$, line $i+1$\nline contains $L_i$ and $R_i$, both integers in the range $1 \\ldots N$, where\n$L_i &lt; R_i$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file swap.out):</h4>\nOn the $i$th line of output, print the $i$th element of the array after the\ninstruction string has been executed $K$ times.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 2 2\n2 5\n3 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n2\n4\n3\n5\n7\n6\n</pre>\n\n<p>Initially, the order of the cows is $[1,2,3,4,5,6,7]$ from left to right.  After\nthe first step of the process, the order is $[1,5,4,3,2,6,7]$. After the second\nstep of the process, the order is $[1,5,7,6,2,3,4]$.  Repeating both steps a\nsecond time yields the output of the sample.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1014"
    },
    {
      "title": "Problem 2. Triangles",
      "subtitle": "USACO 2020 February Contest, Silver",
      "id": 1015,
      "year": "2020",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John would like to create a triangular pasture for his cows.\n\n<p>There are $N$ fence posts ($3\\le N\\le 10^5$) at distinct points \n$(X_1, Y_1) \\ldots (X_N, Y_N)$ on the 2D map of his farm. He can choose three of\nthem to form the vertices of the triangular pasture as long as one of the sides\nof the triangle is parallel to the $x$-axis and another side is parallel to the\n$y$-axis.\n\n</p><p>What is the sum of the areas of all possible pastures that FJ can form?\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test case 2 satisfies $N=200.$</li><li>Test cases 3-4 satisfy $N\\le 5000.$</li><li>Test cases 5-10 satisfy no additional constraints.</li></ul>\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file triangles.in):</h4>\nThe first line contains $N.$\n\n<p>Each of the next $N$ lines contains two integers $X_i$ and $Y_i$, each in the\nrange $-10^4 \\ldots 10^4$ inclusive, describing the location of a fence post.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file triangles.out):</h4>\nAs the sum of areas is not necessarily be an integer and may be very large, \noutput the remainder when <strong>two times</strong> the sum of areas is taken \nmodulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n0 0\n0 1\n1 0\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>Fence posts $(0,0)$, $(1,0)$, and $(1,2)$ give a triangle of area $1$, while\n$(0,0)$, $(1,0)$, and $(0,1)$ give a triangle of area $0.5$. Thus, the answer is\n$2\\cdot (1+0.5)=3.$\n\n</p><p>\n</p><p>Problem credits: Travis Hance and Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1015"
    },
    {
      "title": "Problem 3. Clock Tree",
      "subtitle": "USACO 2020 February Contest, Silver",
      "id": 1016,
      "year": "2020",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John's new barn has a truly strange design: it consists of $N$ rooms\n($2 \\leq N \\leq 2500$), conveniently numbered $1 \\ldots N$, and $N-1$ corridors.\nEach corridor connects a pair of rooms, in such a way that it is possible to\nwalk from any room to any other room along a series of corridors.\n\n<p>Every room in the barn has a circular clock on the wall with the standard\nintegers $1 \\ldots 12$ around its face. However, these clocks only have one\nhand, which always points directly at one of the integers on the clock face (it\nnever points between two of these integers).  \n\n</p><p>Bessie the cow wants to synchronize all the clocks in the barn so they all point\nto the integer 12.  However, she is somewhat simple-minded, and as she walks\naround the barn, every time she enters a room, she moves the hand on its clock\nahead by one position. For example, if the clock pointed at 5, it would now\npoint at 6, and if the clock pointed at 12, it would now point at 1.  If Bessie\nenters the same room multiple times, she advances the clock in that room every\ntime she enters.\n\n</p><p>Please determine the number of rooms in which Bessie could start walking around\nthe barn such that she could conceivably set all the clocks to point to 12. \nNote that Bessie does not initially advance the clock in her starting room, but\nshe would advance the clock in that room any time she re-entered it.  Clocks do\nnot advance on their own; a clock only advances if Bessie enters its room. \nFurthermore, once Bessie enters a corridor she must exit through the other end\n(it is not allowed to walk partially through the corridor and loop back around\nto the same room).\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 2-7 satisfy $N\\le 100$.</li><li>Test cases 8-15 satisfy no additional constraints.</li></ul>\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file clocktree.in):</h4>\nThe first line of input contains $N$.  The next line contains $N$ integers, each\nin the range $1 \\ldots 12$, specifying the initial clock setting in each room. \nThe next $N-1$ lines each describe a corridor in terms of two integers $a$ and\n$b$, each in the range $1 \\ldots N$, giving the room numbers connected by the\ncorridor.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file clocktree.out):</h4>\nPrint the number of rooms in which Bessie could start, such that it is possible\nfor her to set all clocks to point to 12.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n11 10 11 11\n1 2\n2 3\n2 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>In this example, Bessie can set all the clocks to point to 12 if and only if she starts\nin room 2 (for example, by moving to room 1, 2, 3, 2, and finally 4).\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1016"
    },
    {
      "title": "Problem 1. Social Distancing",
      "subtitle": "USACO 2020 US Open Contest, Silver",
      "id": 1038,
      "year": "2020",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John is worried for the health of his cows after an outbreak of the \nhighly contagious bovine disease COWVID-19. \n\n<p>In order to limit transmission of the disease, Farmer John's $N$ cows\n($2 \\leq N \\leq 10^5$) have decided to practice \"social distancing\" and\nspread themselves out across the farm.  The farm is shaped like a 1D\nnumber line, with $M$ mutually-disjoint intervals ($1 \\leq M \\leq 10^5$) \nin which there is grass for grazing.  The cows want to locate themselves\nat distinct integer points, each covered in grass, so as to maximize the\nvalue of $D$, where $D$ represents the distance between the closest pair\nof cows.  Please help the cows determine the largest possible value of\n$D$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file socdist.in):</h4>\nThe first line of input contains $N$ and $M$.  The next $M$ lines each describe\nan interval in terms of two integers $a$ and $b$, where\n$0 \\leq a \\leq b \\leq 10^{18}$. No two intervals overlap or touch at their\nendpoints. A cow standing on the endpoint of an interval counts as standing on\ngrass. \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file socdist.out):</h4>\nPrint the largest possible value of $D$ such that all pairs of cows are $D$\nunits apart. A solution with $D&gt;0$ is guaranteed to exist.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 3\n0 2\n4 7\n9 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>One way to achieve $D=2$ is to have cows at positions $0$, $2$, $4$, $6$ and\n$9$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $b\\le 10^5.$ </li><li>Test cases 4-10 satisfy no additional constraints. </li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1038"
    },
    {
      "title": "Problem 2. Cereal",
      "subtitle": "USACO 2020 US Open Contest, Silver",
      "id": 1039,
      "year": "2020",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John's cows like nothing more than cereal for breakfast!  In fact, the\ncows have such large appetites that they will each eat an entire box of cereal for a\nsingle meal.\n\n<p>The farm has recently received a shipment with $M$ different types of cereal\n$(1\\le M\\le 10^5)$ . Unfortunately, there is only one box of each cereal!  Each\nof the $N$ cows $(1\\le N\\le 10^5)$ has a favorite cereal and a second favorite\ncereal. When given a selection of cereals to choose from, a cow performs the\nfollowing process:\n\n</p><p></p><ol><li>If the box of her favorite cereal is still available, take it and\nleave.</li><li>Otherwise, if the box of her second-favorite cereal is still available, \ntake it and leave.</li><li>Otherwise, she will moo with disappointment and leave without taking any\ncereal.</li></ol>\n\n<p>The cows have lined up to get cereal. For each $0 \\leq i \\leq N-1$, determine\nhow many cows would take a box of cereal if Farmer John removed the first $i$\ncows from the line.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cereal.in):</h4>\nThe first line contains two space-separated integers $N$ and $M.$\n\n<p>For each $1\\le i\\le N,$ the $i$-th line contains two space-separted integers\n$f_i$ and $s_i$ ($1\\le f_i,s_i\\le M$ and $f_i\\neq s_i$) denoting the favorite\nand second-favorite cereals of the $i$-th cow in line.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cereal.out):</h4>\nFor each $0\\le i\\le N-1,$ print a line containing the answer for $i.$\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 2\n1 2\n1 2\n1 2\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n2\n2\n1\n</pre>\n\n<p>If at least two cows remain, then exactly two of them get a box of cereal.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $N,M\\le 1000.$ </li><li>Test cases 4-10 satisfy no additional constraints. </li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1039"
    },
    {
      "title": "Problem 3. The Moo Particle",
      "subtitle": "USACO 2020 US Open Contest, Silver",
      "id": 1040,
      "year": "2020",
      "division": "silver",
      "number": "3",
      "problem": "Quarantined for their protection during an outbreak of COWVID-19, Farmer John's\ncows have come up with a new way to alleviate their boredom: studying advanced\nphysics!  In fact, the cows have even managed to discover a new  subatomic\nparticle, which they have named the \"moo particle\". \n\n<p>The cows are currently running an experiment involving $N$ moo particles\n($1 \\leq N \\leq 10^5$).  Particle $i$ has a \"spin\" described by two integers\n$x_i$ and $y_i$ in the range $-10^9 \\ldots 10^9$ inclusive.  Sometimes two moo\nparticles interact.  This can happen to particles with spins $(x_i, y_i)$ and\n$(x_j, y_j)$ only if  $x_i \\leq x_j$ and $y_i \\leq y_j$. Under these conditions,\nit's possible that exactly one of these two particles may disappear (and nothing\nhappens to the other particle). At any given time, at most one interaction will\noccur.\n\n</p><p>The cows want to know the minimum number of moo particles that may be left after\nsome arbitrary sequence of interactions.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file moop.in):</h4>\nThe first line contains a single integer $N$, the initial number of moo\nparticles. Each of the next $N$ lines contains two space-separated integers,\nindicating the spin of one particle.  Each particle has a distinct spin.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file moop.out):</h4>\nA single integer, the smallest number of moo particles that may remain after\nsome arbitrary sequence of interactions.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 0\n0 1\n-1 0\n0 -1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>One possible sequence of interactions:\n</p><ul><li>Particles 1 and 4 interact, particle 1 disappears.</li><li>Particles 2 and 4 interact, particle 4 disappears.</li><li>Particles 2 and 3 interact, particle 3 disappears.</li></ul>\n\n<p>Only particle 2 remains.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n0 0\n1 1\n-1 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>Particle 3 cannot interact with either of the other two particles, so it must\nremain. At least one of particles 1 and 2 must also remain.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 3-6 satisfy $N\\le 1000.$ </li><li>Test cases 7-12 satisfy no additional constraints. </li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1040"
    },
    {
      "title": "Problem 1. Cowntagion",
      "subtitle": "USACO 2020 December Contest, Silver",
      "id": 1062,
      "year": "2020",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John and his fellow farmers have been working nonstop to control the\nspread of the terrible bovine disease COWVID-19 across their farms.\n\n<p>Together, they oversee a collection of $N$ farms ($1 \\leq N \\leq 10^5$),\nconveniently numbered $1 \\ldots N$.  The farms are connected by a set of $N-1$\nroads such that any farm can be reached from farm 1 by some sequence of roads.  \n\n</p><p>Unfortunately, a cow in farm 1 has just tested positive for COWVID-19. None of\nthe other cows at that farm or at any other farms have the disease yet. \nHowever,  knowing the contagious nature of the disease, Farmer John anticipates\nexactly one of the following adverse events on each successive day:\n\n</p><p>(1) In a single farm, a \"superspreader\" event causes the number of cows at that\nfarm with COWVID-19 to double; or\n\n</p><p>(2) A single cow with COWVID-19 moves along a road from one farm to an adjacent\nfarm.\n\n</p><p>Farmer John is worried about how fast the outbreak might spread.  Please help\nhim by determining the minimum possible number of days before it could be the\ncase that at least one cow in every farm has the disease.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains the single integer $N$.  The next $N−1$ lines each\ncontain two space-separated integers $a$ and $b$  describing a road between\nfarms $a$ and $b$. Both $a$ and $b$ are in the range\n$1\\ldots N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe minimum number of days until the outbreak could reach every farm.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 2\n1 3\n1 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>One possible sequence of events corresponding to this example is the following:\nthe number of sick cows in farm 1 doubles and then doubles again, so that after\ntwo days, there are 4 sick cows in farm 1.  In each of the next 3 days, a sick\ncow travels from farm 1 to each of farms 2, 3, and 4 respectively.  After 5\ndays, at least 1 sick cow exists at each farm.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 1-4, every farm is connected directly to farm 1 (aside from\nfarm $1$ itself).</li><li>In test cases 5-7, farms $2\\ldots N$ are each adjacent to at most two\nroads.</li><li>In test cases 8-15, there are no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1062"
    },
    {
      "title": "Problem 2. Rectangular Pasture",
      "subtitle": "USACO 2020 December Contest, Silver",
      "id": 1063,
      "year": "2020",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John's largest pasture can be regarded as a large 2D grid of square\n\"cells\" (picture a huge chess board).  Currently, there are $N$ cows occupying\nsome of these cells ($1 \\leq N \\leq 2500$).  \n\n<p>Farmer John wants to build a fence that will enclose a rectangular region of\ncells; the rectangle must be oriented so its sides are parallel with the $x$ \nand $y$ axes, and it could be as small as a single cell.    Please help him\ncount the number of distinct subsets of cows that he can enclose in such a region.  Note that the empty subset should be counted as one of these.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains a single integer $N$.  Each of the next $N$ lines Each\nof the next $N$ lines contains two space-separated integers,  indicating the\n$(x,y)$ coordinates of a cow's cell.  All $x$ coordinates are distinct from\neach-other, and all $y$ coordinates are distinct from each-other.  All $x$ and\n$y$ values lie in the range $0 \\ldots 10^9$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of subsets of cows that FJ can fence off. It can be shown that this\nquantity fits within a signed 64-bit integer (e.g., a \"long long\" in C/C++).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n0 2\n1 0\n2 3\n3 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">13\n</pre>\n\n<p>There are $2^4$ subsets in total. FJ cannot create a fence enclosing only cows\n1, 2, and 4, or only cows 2 and 4, or only cows 1 and 4, so the answer is\n$2^4-3=16-3=13$.\n\n</p><p>\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $N\\le 20$.</li><li>Test cases 4-6 satisfy $N\\le 100$.</li><li>Test cases 7-12 satisfy $N\\le 500$.</li><li>Test cases 13-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1063"
    },
    {
      "title": "Problem 3. Stuck in a Rut",
      "subtitle": "USACO 2020 December Contest, Silver",
      "id": 1064,
      "year": "2020",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John has recently expanded the size of his farm, so from the perspective\nof his cows it is effectively now infinite in size!  The cows think of the\ngrazing area of the farm as an infinite 2D grid of square \"cells\", each filled\nwith  delicious grass (think of each cell as a square in an infinite\nchessboard).   Each of Farmer John's $N$ cows ($1\\le N\\le 1000$) starts out in a\ndifferent cell; some  start facing north, and some start facing east.\n\n<p>Every hour, every cow either\n\n</p><p></p><ul><li>Stops (and then remains stopped from that point on) if the grass  in her\ncurrent cell was already eaten by another cow.</li><li>Eats all the grass in her current cell and moves one cell forward according\nto the direction she faces.</li></ul>\n\n<p>Over time, each cow therefore leaves a barren \"rut\" of empty cells behind her.\n\n</p><p>If two cows move onto the same grassy cell in the same move, they share the cell\nand continue moving in their respective directions in the next hour.\n\n</p><p>Farmer John isn't happy when he sees cows that stop grazing, and he wants to \nknow who to blame for his stopped cows.  If cow $b$ stops in a cell that cow $a$\noriginally ate, then we say that cow $a$ stopped cow $b$.  Moreover, if cow $a$\nstopped cow $b$ and cow $b$ stopped cow $c$, we say that cow $a$ also stopped\ncow $c$ (that is, the \"stopping\" relationship is transitive).  Each cow is\nblamed in accordance with the number of cows she stopped.  Please compute the\namount of blame assigned to each cow -- that is, the number of cows she stopped.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$.  Each of the next $N$ lines describes the\nstarting location of a cow, in terms of a character that is either N (for\nnorth-facing) or E (for east-facing) and two nonnegative integers $x$ and $y$ \n($0\\le x\\le 10^9$, $0\\le y\\le 10^9$) giving the coordinates of a cell.  All\n$x$-coordinates are distinct from each-other, and similarly for the\n$y$-coordinates.\n</div>\n\n<p>To be as clear as possible regarding directions and coordinates, if a cow is in\ncell $(x,y)$ and moves north, she ends up in cell $(x,y+1)$.  If she instead had\nmoved east, she would end up in cell $(x+1, y)$.\n\n</p><p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint $N$ lines of output.  Line $i$ in the output should describe the blame\nassigned to the $i$th cow in the input.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\nE 3 5\nN 5 3\nE 4 6\nE 10 4\nN 11 1\nE 9 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n0\n1\n2\n1\n0\n</pre>\n\n<p>In this example, cow 3 stops cow 2, cow 4 stops cow 5, and cow 5 stops cow 6. By transitivity, \ncow 4 also stops cow 6.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 2-5, all coordinates are at most $2000$.</li><li>In test cases 6-10, there are no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1064"
    },
    {
      "title": "Problem 1. Dance Mooves",
      "subtitle": "USACO 2021 January Contest, Silver",
      "id": 1086,
      "year": "2021",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John’s cows are showing off their new dance mooves! \n\n<p>At first, all $N$ cows ($2\\le N\\le 10^5$) stand in a line with cow $i$ in the\n$i$th position in line.  The sequence of dance mooves is given by $K$\n($1\\le K\\le 2\\cdot 10^5$) pairs of positions\n$(a_1,b_1), (a_2,b_2), \\ldots, \n(a_{K},b_{K})$.  In each minute $i = 1 \\ldots K$\nof the dance, the cows in positions $a_i$ and $b_i$ in line swap.  The same $K$\nswaps happen again in minutes $K+1 \\ldots 2K$, again in minutes\n$2K+1 \\ldots 3K$, and so on, continuing indefinitely in a cyclic fashion.  In\nother words,\n\n</p><p></p><ul><li>In minute $1$, the cows at positions $a_1$ and $b_1$ swap. </li><li>In minute $2$, the cows at positions $a_2$ and $b_2$ swap. </li><li>...</li><li>In minute $K$, the cows in positions $a_{K}$ and $b_{K}$ swap.</li><li>In minute $K+1$, the cows in positions $a_{1}$ and $b_{1}$ swap.</li><li>In minute $K+2$, the cows in positions $a_{2}$ and $b_{2}$ swap.</li><li>and so on ...</li></ul>\n\n<p>For each cow, please determine the number of unique positions in the line she\nwill ever occupy.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains integers $N$ and $K$.  Each of the next $K$ lines \ncontains $(a_1,b_1) \\ldots (a_K, b_K)$ ($1\\le a_i&lt;b_i\\le N$).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint $N$ lines of output, where the $i$th line contains the number of unique\npositions that cow $i$ reaches.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 4\n1 3\n1 2\n2 3\n2 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n4\n3\n4\n1\n</pre>\n\n<p></p><ul><li>Cow $1$ reaches positions $\\{1,2,3,4\\}$.</li><li>Cow $2$ reaches positions $\\{1,2,3,4\\}$.</li><li>Cow $3$ reaches positions $\\{1,2,3\\}$.</li><li>Cow $4$ reaches positions $\\{1,2,3,4\\}$.</li><li>Cow $5$ never moves, so she never leaves position $5$.</li></ul>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 1-5 satisfy $N\\le 100, K\\le 200$.</li><li>Test cases 6-10 satisfy $N\\le 2000, K\\le 4000$.</li><li>Test cases 11-20 satisfy no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Chris Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1086"
    },
    {
      "title": "Problem 2. No Time to Paint",
      "subtitle": "USACO 2021 January Contest, Silver",
      "id": 1087,
      "year": "2021",
      "division": "silver",
      "number": "2",
      "problem": "Bessie has recently received a painting set, and she wants to paint the long\nfence at one end of her pasture.  The fence consists of $N$ consecutive 1-meter \nsegments ($1\\le N\\le 10^5$).  Bessie has 26 different colors available, which\nshe labels with the letters 'A' through 'Z' in increasing order of darkness ('A'\nis a very light color, and 'Z' is very dark).  She can therefore describe the\ndesired color she wants to paint each fence segment as a length-$N$ string where\neach character is a letter.\n\n<p>Initially, all fence segments are uncolored.  Bessie can color any  contiguous\nrange of segments with a single color in a single brush stroke as long as she\nnever paints a lighter color over a darker color (she can only paint darker\ncolors over lighter colors).  \n\n</p><p>For example, an initially uncolored segment of length four can be colored as\nfollows:\n\n</p><p></p><pre>.... -&gt; BBB. -&gt; BBLL -&gt; BQQL\n</pre>\n\n<p>Running short on time, Bessie thinks she may need to leave some consecutive\nrange of fence segments unpainted! Currently, she is considering $Q$  candidate\nranges ($1\\le Q\\le 10^5$), each described by  by two integers $(a,b)$ with\n$1 \\leq a \\leq b \\leq N$ giving the indices of  endpoints of the range\n$a \\ldots b$ of segments to be left unpainted.\n\n</p><p>For each candidate range, what is the minimum number of strokes needed to paint\nevery fence segment outside those in the range with its desired color while \nleaving all fence segments inside the range uncolored?  Note that Bessie does\nnot actually do any painting during this process, so the answers for each\ncandidate range are independent. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $Q$.\n\n<p>The next line contains a string of length $N$ characters representing the\ndesired color  for each fence segment.\n\n</p><p>The next $Q$ lines each contain two space-separated integers $a$ and $b$\nrepresenting a candidate range to possibly leave unpainted.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each of the $Q$ candidates, output the answer on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8 2\nABBAABCB\n3 6\n1 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n3\n</pre>\n\n<p>In this example, excluding the sub-range corresponding to the desired pattern\n$\\texttt{BAAB}$ requires four strokes to paint while excluding $\\texttt{ABBA}$ \nrequires only three.\n\n</p><p></p><pre>.... -&gt; AA.. -&gt; ABBB -&gt; ABCB\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 1-4 satisfy $N,Q\\le 100$.</li><li>Test cases 5-7 satisfy\n$N,Q\\le 5000$.</li><li>Test cases 8-13 satisfy no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Andi Qu and Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1087"
    },
    {
      "title": "Problem 3. Spaced Out",
      "subtitle": "USACO 2021 January Contest, Silver",
      "id": 1088,
      "year": "2021",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John wants to take a picture of his cows grazing in their\npasture to hang on his wall.  The pasture is represented by an \n$N$ by $N$ grid of square cells (picture an $N \\times N$ chess board),\nwith $2 \\leq N \\leq 1000$.  In the last picture Farmer John took,\nhis cows were too clumped together in one region of the pasture.\nThis time around, he wants to make sure his cows are properly\nspaced out across the pasture.  He therefore insists on the \nfollowing rules:\n\n<p></p><ul><li>No two cows may be placed in the same cell.</li><li>Every sub-grid of $2 \\times 2$ cells ($(N-1) \\times (N-1)$ of them\nin total) must contain exactly 2 cows.</li></ul>\n\n<p>For example, this placement is valid:\n\n</p><p></p><pre>CCC\n...\nCCC\n</pre>\n\n<p>while this placement is not, because the $2 \\times 2$ square region \nthat contains the bottom-right corner cell contains only 1 cow:\n\n</p><p></p><pre>C.C\n.C.\nC..\n</pre>\n\n<p>There are no other restrictions. You may assume that Farmer John has an infinite\nnumber of cows available (based on previous experience, this assumption certainly\nseems to be true...).\n\n</p><p>Farmer John wants some cells to contain cows more than other cells. In\nparticular, he believes that when a cow is placed in cell $(i, j)$, the beauty\nof the picture is increased by $a_{ij}$ ($0 \\leq a_{ij} \\leq 1000$) units.\n\n</p><p>Determine the maximum possible total beauty of a valid placement of cows.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.  The next $N$ lines contain $N$ integers each. The $j$th integer of the $i$th\nline from the top is the value of $a_{ij}$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint one integer giving the maximum possible beauty of the resulting photo.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n3 3 1 1\n1 1 3 1\n3 3 1 1\n1 1 3 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">22\n</pre>\n\n<p>In this sample, the maximum beauty can be achieved with the following placement:\n\n</p><p></p><pre>CC..\n..CC\nCC..\n..CC\n</pre>\n\n<p>The beauty of this placement is $3 + 3 + 3 + 1 + 3 + 3 + 3 + 3 = 22$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $N \\le 4$.</li><li>Test cases 5-10 satisfy $N\\le 10$.</li><li>Test cases 11-20 satisfy $N \\le 1000$.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Hankai Zhang and Danny Mittal\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1088"
    },
    {
      "title": "Problem 1. Comfortable Cows",
      "subtitle": "USACO 2021 February Contest, Silver",
      "id": 1110,
      "year": "2021",
      "division": "silver",
      "number": "1",
      "problem": "Farmer Nhoj's pasture can be regarded as a large 2D grid of square \"cells\"\n(picture a huge chessboard). Initially, the pasture is empty.\n\n<p>Farmer Nhoj will add $N$ ($1\\le N\\le 10^5$) cows to the pasture one by one. The\n$i$th cow will occupy a cell $(x_i,y_i)$ that is distinct from the cells\noccupied by all other cows ($0\\le x_i,y_i\\le 1000$).\n\n</p><p>A cow is said to be \"comfortable\" if it is horizontally or vertically adjacent\nto exactly three other cows. Unfortunately, cows that are too comfortable tend\nto lag in their milk production, so Farmer Nhoj wants to add additional cows\nuntil no cow (including the ones that he adds) is comfortable.  Note that the\nadded cows do not necessarily need to have $x$ and $y$ coordinates in the range\n$0 \\ldots 1000$.\n\n</p><p>For each $i$ in the range $1 \\ldots N$, please output the minimum number of \ncows Farmer Nhoj would need to add until no cows are comfortable if initially, \nthe pasture started with only cows $1\\ldots i$.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains a single integer $N$.  Each of the next $N$ lines\ncontains two space-separated integers,  indicating the $(x,y)$ coordinates of a\ncow's cell. \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe minimum number of cows Farmer Nhoj needs to add for each $i$ in\n$1 \\ldots N$, on $N$ separate lines.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">9\n0 1\n1 0\n1 1\n1 2\n2 1\n2 2\n3 1\n3 2\n4 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n0\n0\n1\n0\n0\n1\n2\n4\n</pre>\n\n<p>For $i=4$, Farmer Nhoj must add an additional cow at $(2,1)$ to make the cow at\n$(1,1)$ uncomfortable.\n\n</p><p>For $i=9$, the best Farmer Nhoj can do is place additional cows at $(2,0)$,\n$(3,0)$, $(2,-1)$, and $(2,3)$.\n\n</p><p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1110"
    },
    {
      "title": "Problem 2. Year of the Cow",
      "subtitle": "USACO 2021 February Contest, Silver",
      "id": 1111,
      "year": "2021",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John's cows are excited to learn that Chinese New Year was recently \ncelebrated, ushering in the year of the Ox, always a bovine favorite.\n\n<p>As we know, the zodiac animals for Chinese calendar years follow a 12-year\ncycle: Ox, Tiger, Rabbit, Dragon, Snake, Horse, Goat, Monkey, Rooster, Dog, Pig,\nRat, and then Ox again.  Slightly lesser known is the fact that a mysterious\ntime portal opens up during every year of the Ox, allowing cows to travel\nthrough time to any other year of the Ox in the past or future.\n\n</p><p>Bessie the cow would like to take advantage of the time portal that has opened\nup this year to visit $N$ of her famous bovine ancestors who lived long ago in\nhistory, with $1 \\leq N \\leq 0x10000$ (it seems fitting, being the year of the\nOx, to write the bound on $N$ in hexadecimal; note that 0x10000 is the same as\n65536).  \n\n</p><p>Unfortunately, time travel makes Bessie a bit queasy, and  she would prefer to\nmake at most $K$ jumps through time ($1 \\leq K \\leq N$). Please help Bessie\ndetermine the minimum number of years it will take her to visit all her\nancestors and return to the present year, with at most $K$ total jumps through\ntime along the way.  \n\n</p><p>Bessie does not need to use the time portal in a given Ox year if she does not\nwant to.  Time portals connect the first days of each Ox year with each-other,\nso for example if Bessie travels to a time portal and then waits 12 years for\nthe next time portal, she spends exactly 12 years in the process.  Bessie starts\nher adventure on the first day of the present Ox year, so she can travel back in\ntime right away.   None of Bessie's ancestors live in Ox years.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$ and $K$. The next $N$ lines contain $N$\ndistinct integers in the range $1 \\ldots 10^9$, indicating how many years ago each of\nBessie's $N$ ancestors lived.  \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint the minimum number of years it will take Bessie to visit all her ancestors\nand return to the present year.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 3\n101\n85\n100\n46\n95\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">36\n</pre>\n\n<p>One way for Bessie to visit all her ancestors and return in 36 years is as\nfollows:\n\n</p><p></p><ul><li>Enter the portal in the present day and travel 48 years into the past.</li><li>Wait 12 years, then enter the portal 36 years in the past and travel 108\nyears into the past.</li><li>Wait 24 years, then enter the portal 84 years in the past and travel back to\nthe present year.</li></ul>\n\n<p>\n</p><p>Problem credits: Brian Dean and David Yang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1111"
    },
    {
      "title": "Problem 3. Just Green Enough",
      "subtitle": "USACO 2021 February Contest, Silver",
      "id": 1112,
      "year": "2021",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John's pasture can be regarded as an $N \\times N$ grid\n($1 \\leq N \\leq 500$)  of square \"cells\" of grass (picture a huge chessboard). \nDue to soil variability, the grass in some cells is greener than in others. \nEach cell $(i,j)$ is described by an integer level of green-ness $G(i,j)$,\nranging from $1 \\ldots 200$.\n\n<p>Farmer John wants to take a photograph of a rectangular sub-grid of his pasture.\nHe wants to be sure the sub-grid looks sufficiently green, but not ridiculously\ngreen, so he decides to photograph a sub-grid for which the minimum value of $G$\nis exactly 100.  Please help him determine how many different photographs he\ncould possibly take.  A sub-grid can be as large as the entire pasture or as\nsmall as a single grid cell (there are $N^2(N+1)^2/4$ different sub-grids in\ntotal --- note that this number might be too large to store in a standard 32-bit\ninteger, so you might need to use 64-bit integer data types like a \"long long\"\nin C++).\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$. The next $N$ lines each contain $N$\nintegers and collectively describe the  $G(i,j)$ values for the $N \\times N$\npasture.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease print the number of distinct photos Farmer John can take -- that is, the\nnumber of rectangular sub-grids for which the minimum level of green-ness is\nexactly 100.\n\n<p>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n57 120 87\n200 100 150\n2 141 135\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-5 satisfy $N\\le 200$.</li><li>Test cases 6-10 satisfy no\nadditional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1112"
    },
    {
      "title": "Problem 1. Maze Tac Toe",
      "subtitle": "USACO 2021 US Open, Silver",
      "id": 1134,
      "year": "2021",
      "division": "silver",
      "number": "1",
      "problem": "Bessie the cow enjoys solving mazes.  She also enjoys playing tic-tac-toe (or\nrather, the cow version of tic-tac-toe, described shortly).  Farmer John has\nfound a new way for her to play both games at the same time!\n\n<p>First, cow tic-tac-toe: instead of placing X's and O's on a $3 \\times 3$ grid, \nthe cows of course play with M's and O's on a $3 \\times 3$ grid.   During one's\nturn, one can place either an 'M' or an 'O' on any empty grid cell (this is\nanother difference from standard tic-tac-toe, where one player always plays 'X'\nand other other always plays 'O').  The winner of cow tic-tac-toe is the first\nplayer to spell 'MOO', either horizontally, vertically, or diagonally. \nBackwards is fine, so for example a player could win by spelling 'OOM' across\none row of the  board.  Just as in standard tic-tac-toe, it is possible to reach\na board state where no winners occur. A move in cow tic-tac-toe is usually\nspecified by  3 characters, either 'Mij' or 'Oij', where $i$ and $j$ are each in\nthe range $1 \\ldots 3$ and specify the row and column in which to place the \ncorresponding 'M' or 'O'.  \n\n</p><p>To challenge Bessie, Farmer John has designed a square maze consisting of a grid\nof  $N \\times N$ cells ($3 \\leq N \\leq 25$).  Some cells, including all of the\nborder cells, contain large haybales, preventing Bessie from moving onto any\nsuch cell. Bessie can move freely among all the other cells in the maze, by\ntaking steps in the 4 usual directions north, south, east, and west.  Some cells\ncontain a piece of paper on which a move in cow tic-tac-toe is written.  While\nBessie moves around in the maze, any time she steps on such a cell, she must\nmake the corresponding move in a game of cow tic-tac-toe that she is\nsimultaneously playing while she moves through the maze (unless the\ncorresponding cell in the cow tic-tac-toe game is already occupied, in which\ncase she takes no action).   She has no opponent in this game of cow\ntic-tac-toe, but some of the cells in the maze may be adversarial to her goal of\neventually spelling 'MOO'.\n\n</p><p>If Bessie stops playing cow tic-tac-toe immediately upon winning, please \ndetermine the number of distinct winning tic-tac-toe board configurations she\ncan possibly generate by moving appropriately through the maze.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$.\n\n<p>The maze is specified by the next $N$ lines, each containing $3N$ characters. \nEach cell described by a block of 3 characters, which is either '###' for a\nwall, '...' for an empty space, 'BBB' for a non-wall containing Bessie, and a\ncow tic-tac-toe move for a non-wall cell that forces Bessie to make the\ncorresponding move.  Exactly one cell will be 'BBB'.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease print the number of distinct winning cow tic-tac-toe board configurations\n(possibly 0) that Bessie can generate via movement in the maze, stopping after\nshe wins.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n#####################\n###O11###...###M13###\n###......O22......###\n###...######M22######\n###BBB###M31###M11###\n###...O32...M33O31###\n#####################\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n</pre>\n\n<p>In this example, there are 8 possible winning board configurations that Bessie\ncan ultimately reach:\n\n</p><p></p><pre>O.M\n.O.\nMOM\n\nO..\n.O.\n.OM\n\nO.M\n.O.\n.OM\n\nO..\n.O.\nMOM\n\nO..\n...\nOOM\n\n..M\n.O.\nOOM\n\n...\n.O.\nOOM\n\n...\n...\nOOM\n</pre>\n\n<p>To explain one of these, take this case:\n</p><pre>O..\n...\nOOM\n</pre>\nHere, Bessie might first visit the O11 cell, then move to the lower corridor\nvisiting O32, M33, and O31.  The game then stops, since she has won (so for\nexample she would not be able to visit the M11 cell north of her current\nposition on the O31 cell). \n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1134"
    },
    {
      "title": "Problem 2. Do You Know Your ABCs?",
      "subtitle": "USACO 2021 US Open, Silver",
      "id": 1135,
      "year": "2021",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John's cows have been holding a daily online gathering on the \"mooZ\" \nvideo meeting platform.  For fun, they have invented a simple number game to\nplay during the meeting to keep themselves entertained.\n\n<p>Elsie has three positive integers $A$, $B$, and $C$ ($1\\le A\\le B\\le C$). These\nintegers are supposed to be secret, so she will not directly reveal them to her\nsister Bessie.  Instead, she tells Bessie $N$ ($4\\le N\\le 7$) distinct\nintegers $x_1,x_2,\\ldots,x_N$ ($1\\le x_i\\le 10^9$), claiming that each $x_i$ is\none of $A$, $B$, $C$, $A+B$, $B+C$, $C+A$, or $A+B+C$. However, Elsie may be\nlying; the integers $x_i$ might not correspond to any valid triple $(A,B,C)$.\n\n</p><p>This is too hard for Bessie to wrap her head around, so it is up to you to\ndetermine the number of triples $(A,B,C)$ that are consistent with the numbers Elsie\npresented (possibly zero).\n\n</p><p>Each input file will contain $T$ ($1\\le T\\le 100$) test cases that should be\nsolved independently.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first input line contains $T$.\n\n<p>Each test case starts with $N$, the number of integers Elsie gives to Bessie.\n\n</p><p>The second line of each test case contains $N$ distinct integers\n$x_1,x_2,\\ldots,x_N$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output the number of triples $(A,B,C)$ that are consistent\nwith the numbers Elsie presented.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10\n7\n1 2 3 4 5 6 7\n4\n4 5 7 8\n4\n4 5 7 9\n4\n4 5 7 10\n4\n4 5 7 11\n4\n4 5 7 12\n4\n4 5 7 13\n4\n4 5 7 14\n4\n4 5 7 15\n4\n4 5 7 16\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n3\n5\n1\n4\n3\n0\n0\n0\n1\n</pre>\n\n<p>For $x=\\{4,5,7,9\\}$, the five possible triples are as follows:\n\n</p><p></p><div class=\"math\">$$(2, 2, 5), (2, 3, 4), (2, 4, 5), (3, 4, 5), (4, 5, 7).$$</div>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 1-4, all $x_i$ are at most $50$.</li><li>Test cases 5-6 satisfy $N=7$.</li><li>Test cases 7-15 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1135"
    },
    {
      "title": "Problem 3. Acowdemia",
      "subtitle": "USACO 2021 US Open, Silver",
      "id": 1136,
      "year": "2021",
      "division": "silver",
      "number": "3",
      "problem": "Bessie the cow has enrolled in a computer science PhD program, driven by her\nlove of computer science and also the  allure of one day becoming \"Dr. Bessie\".\nHaving worked for some time on her academic research, she has now published  $N$\npapers ($1 \\leq N \\leq 10^5$), and her $i$-th paper has accumulated $c_i$\ncitations ($0 \\leq c_i \\leq 10^5$) from other papers in the research literature.\n\n<p>Bessie has heard that an academic's success can be measured by their $h$-index.\nThe $h$-index is the largest number $h$ such that the researcher has at least\n$h$ papers each with at least $h$ citations. For example, a researcher with $4$\npapers and respective citation counts $(1,100,2,3)$ has an $h$-index of $2$,\nwhereas if the citation counts were $(1,100,3,3)$ then the $h$-index would be\n$3$.\n\n</p><p>To up her $h$-index, Bessie is planning to write up to $K$ survey articles\n($0 \\leq K \\leq 10^5$), each citing many of her past papers. However,  due to\npage limits, she can only cite at most $L$ papers in each survey\n($0 \\leq L \\leq 10^5$). Of course, no paper may be cited multiple times in a\nsingle survey (but a paper may be cited in several surveys).\n\n</p><p>Help Bessie determine the maximum $h$-index she may achieve after writing these\nsurvey articles. Bessie is not allowed to cite a survey from one of her surveys.\n\n</p><p>Note that Bessie's research advisor should probably inform her at some point\nthat writing a survey solely to increase one's $h$ index is ethically dubious;\nother academics are not recommended to follow Bessie's example here.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$, $K$, and $L$.\n\n<p>The second line contains $N$ space-separated integers $c_1,\\ldots, c_N$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe maximum $h$-index on a single line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 4 1\n1 100 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example, Bessie may write up to $4$ survey articles, each citing at most $1$ paper.\nIf she cites each of her first and third articles twice, then her $h$-index\nbecomes\n$3$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 1 4\n1 100 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this second example, Bessie may write at most a single article. If Bessie cites any\nof her first, third, or fourth papers at least once, her $h$-index becomes $2$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-6 satisfy $N\\le 100$.</li><li>Test cases 7-16 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1136"
    },
    {
      "title": "Problem 1. Closest Cow Wins",
      "subtitle": "USACO 2021 December Contest, Silver",
      "id": 1158,
      "year": "2021",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John owns a long farm along the highway that can be considered somewhat\nlike a one-dimensional number line.  Along the farm, there are $K$ grassy \npatches ($1 \\leq K \\leq 2\\cdot 10^5$); the $i$-th patch is located at position\n$p_i$ and  has an associated tastiness  value $t_i$ ($0\\le t_i\\le 10^9$). \nFarmer John's nemesis, Farmer Nhoj, has  already situated his $M$ cows\n($1 \\leq M \\leq 2\\cdot 10^5$) at locations $f_1 \\ldots f_M$. All $K+M$ of these\nlocations are distinct integers in the range $[0,10^9]$.\n\n<p>Farmer John needs to pick $N$ ($1\\le N\\le 2\\cdot 10^5$) locations (not\nnecessarily integers) for his cows to be located.  These must be distinct from\nthose already occupied by the cows of Farmer Nhoj, but it is possible for \nFarmer John to place his cows at the same locations as grassy patches.\n\n</p><p>Whichever farmer owns a cow closest to a grassy patch can claim ownership of\nthat patch.  If there are two cows from rival farmers equally close to the\npatch, then Farmer Nhoj claims the patch. \n\n</p><p>Given the locations of Farmer Nhoj's cows and the locations and tastiness values\nof the grassy patches, determine the maximum total tastiness Farmer John's cows\ncan claim if optimally positioned. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $K$, $M$, and $N$.\n\n<p>The next $K$ lines each contain two space-separated integers $p_i$ and $t_i$.\n\n</p><p>The next $M$ lines each contain a single integer $f_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nAn integer denoting the maximum total tastiness. Note that the answer to this\nproblem can be too large to fit into a 32-bit integer, so you probably want to\nuse 64-bit integers (e.g., \"long long\"s in C or C++).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 5 2\n0 4\n4 6\n8 10\n10 8\n12 12\n13 14\n2\n3\n5\n7\n11\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">36\n</pre>\n\n<p>If Farmer John places cows at positions $11.5$ and $8$ then he can claim a total tastiness\nof\n$10+12+14=36$.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1158"
    },
    {
      "title": "Problem 2. Connecting Two Barns",
      "subtitle": "USACO 2021 December Contest, Silver",
      "id": 1159,
      "year": "2021",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John's farm consists of a set of $N$ fields $(1 \\leq N \\leq 10^5)$,\nconveniently numbered $1 \\ldots N$.  Between these fields are $M$ bi-directed\npaths $(0 \\leq M \\leq 10^5)$, each  connecting a pair of fields.\n\n<p>The farm contains two barns, one in field 1 and the other in field $N$.   Farmer\nJohn would like to ensure that there is a way to walk between the two barns\nalong some series of paths.  He is willing to build up to two new paths to\naccomplish this goal.  Due to the way the fields are situated, the cost of\nbuilding a new path between fields $i$ and $j$ is $(i-j)^2$.\n\n</p><p>Please help Farmer John determine the minimum cost needed such that barns $1$\nand $N$ become reachable from each-other.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nEach input test case contains $T$ sub-cases ($1\\le T\\le 20$), all of which must\nbe  solved correctly to solve the input case.  \n\n<p>The first line of input contains $T$, after which $T$ sub-test cases follow.\n\n</p><p>Each sub-test case starts with two integers, $N$ and $M$.  Next, $M$ lines\nfollow,  each one containing two integers $i$ and $j$, indicating a path between\ntwo different fields $i$ and $j$. It is guaranteed that there is at most one\npath between any two fields, and that the sum of $N+M$ over all sub-test cases\nis at most $5 \\cdot 10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $T$ lines. The $i$th line should contain a single integer giving the\nminimum cost for the $i$th sub-test case.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n5 2\n1 2\n4 5\n5 3\n1 2\n2 3\n4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n1\n</pre>\n\n<p>In the first sub-test case, it is optimal to connect fields 2 and 3 with a \npath, and fields 3 and 4 with a path.\n\n</p><p>In the second sub-test case, it is optimal to connect fields 3 and 4 with a\npath.  No second path is needed.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test case 2 satisfies $N \\le 20$.</li><li>Test cases 3-5 satisfy $N \\le 10^3$.</li><li>Test cases 6-10 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1159"
    },
    {
      "title": "Problem 3. Convoluted Intervals",
      "subtitle": "USACO 2021 December Contest, Silver",
      "id": 1160,
      "year": "2021",
      "division": "silver",
      "number": "3",
      "problem": "The cows are hard at work trying to invent interesting new games to play. One of\ntheir current endeavors involves a set of $N$ intervals\n($1\\le N\\le 2\\cdot 10^5$), where the $i$th interval starts at position $a_i$ on\nthe number line and ends at position $b_i \\geq a_i$.  Both $a_i$ and $b_i$  are\nintegers in the range $0 \\ldots M$, where $1 \\leq M \\leq 5000$.\n\n<p>To play the game, Bessie chooses some interval (say, the $i$th interval) and her\ncousin Elsie chooses some interval (say, the $j$th interval, possibly the same\nas Bessie's interval).  Given some value $k$, they win if\n$a_i + a_j \\leq k \\leq b_i + b_j$.  \n\n</p><p>For every value of $k$ in the range $0 \\ldots 2M$, please count the number of\nordered pairs $(i,j)$ for which Bessie and Elsie can win the game.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$ and $M$. Each of the next $N$ \nlines describes an interval in terms of integers $a_i$ and $b_i$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease print $2M+1$ lines as output, one for each value of $k$ in the range\n$0 \\ldots 2M$.  \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 5\n1 3\n2 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n0\n1\n3\n4\n4\n4\n3\n3\n1\n1\n</pre>\n\n<p>In this example, for just $k=3$, there are three ordered  pairs that will allow\nBessie and Elie to win: $(1, 1)$, $(1, 2),$ and $(2, 1)$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-2 satisfy $N\\le 100, M\\le 100$.</li><li>Test cases 3-5 satisfy $N\\le 5000$.</li><li>Test cases 6-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>Note that output values might be too large to fit into a 32-bit integer, so you\nmay want to use 64-bit integers (e.g., \"long long\" ints in C or C++).\n\n</p><p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1160"
    },
    {
      "title": "Problem 1. Searching for Soulmates",
      "subtitle": "USACO 2022 January Contest, Silver",
      "id": 1182,
      "year": "2022",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John's cows each want to find their soulmate -- another cow with similar\ncharacteristics with whom they are maximally compatible.  Each cow's personality is described by an integer $p_i$\n($1 \\leq p_i \\leq 10^{18}$).  Two cows with the same personality are soulmates.\nA cow can change her personality via a \"change operation\" by multiplying by $2$,\ndividing by $2$ (if $p_i$ is even), or adding $1$. \n\n<p>Farmer John initially pairs his cows up in an arbitrary way.  He is curious how\nmany change operations would be needed to make each pair of cows into soulmates.\nFor each pairing, decide the minimum number of change operations the first cow\nin the pair must make to become soulmates with the second cow. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ ($1\\le N\\le 10$), the number of pairs of cows.  Each\nof the remaining $N$ lines describes a pair of cows in terms of two integers\ngiving their personalities.  The first number indicates the personality of the\ncow that must be changed to match the second.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease write $N$ lines of output.  For each pair, print the minimum number of\noperations required  for the first cow to make her personality match that of the\nsecond.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n31 13\n12 8\n25 6\n10 24\n1 1\n997 120\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n3\n8\n3\n0\n20\n</pre>\n\n<p>For the first test case, an optimal sequence of changes is\n$31 \\implies 32 \\implies 16 \\implies 8 \\implies 9 \\implies 10 \\implies 11 \\implies 12 \\implies 13$.\n\n</p><p>For the second test case, an optimal sequence of changes is\n$12 \\implies 6 \\implies 7 \\implies 8$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>\nTest cases 1-4 satisfy $p_i \\le 10^5$.\n</li><li>Test cases 5-12 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Quanquan Liu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1182"
    },
    {
      "title": "Problem 2. Cow Frisbee",
      "subtitle": "USACO 2022 January Contest, Silver",
      "id": 1183,
      "year": "2022",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John's $N$ cows ($N \\leq 3 \\times 10^5)$ have heights $1, 2, \\ldots, N$.  One day, the cows are\nstanding in a line in some order playing frisbee; let $h_1 \\ldots h_N$ denote\nthe heights of the cows in this order (so the $h$'s are a permutation of\n$1 \\ldots N$). \n\n<p>Two cows at positions $i$ and $j$ in the line can successfully throw the frisbee\nback and forth if and only if every cow between them has height lower than\n$\\min(h_i, h_j)$.  \n\n</p><p>Please compute the sum of distances between all pairs of locations $i&lt;j$ at\nwhich there resides a pair of cows that can successfully throw the frisbee  back\nand forth.  The distance between locations $i$ and $j$ is $j-i+1$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains a single integer $N$. The next line of input\ncontains $h_1 \\ldots h_N$, separated by spaces.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the sum of distances of all pairs of locations at which there  are cows\nthat can throw the frisbee back and forth.  Note that the large  size of\nintegers involved in this problem may require the use of 64-bit integer data\ntypes (e.g., a \"long long\" in C/C++).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n4 3 1 2 5 6 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">24\n</pre>\n\n<p>The pairs of successful locations in this example are as follows:\n\n</p><p></p><pre>(1, 2), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (4, 5), (5, 6), (6, 7)\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING</h4>\n<ul><li>Test cases 1-3 satisfy $N\\le 5000$.</li><li>Test cases 4-11 satisfy no\nadditional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Quanquan Liu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1183"
    },
    {
      "title": "Problem 3. Cereal 2",
      "subtitle": "USACO 2022 January Contest, Silver",
      "id": 1184,
      "year": "2022",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John's cows like nothing more than cereal for breakfast!  In fact, the\ncows have such large appetites that they will each eat an entire box of cereal\nfor a single meal.\n\n<p>The farm has recently received a shipment with $M$ different types of cereal\n$(2\\le M\\le 10^5)$. Unfortunately, there is only one box of each cereal!  Each\nof the $N$ cows $(1\\le N\\le 10^5)$ has a favorite cereal and a second favorite\ncereal. When given a selection of cereals to choose from, a cow performs the\nfollowing process:\n\n</p><p></p><ol><li>If the box of her favorite cereal is still available, take it and\nleave.</li><li>Otherwise, if the box of her second-favorite cereal is still available, \ntake it and leave.</li><li>Otherwise, she will moo with disappointment and leave without taking any\ncereal.</li></ol>\n\n<p>Find the minimum number of cows that go hungry if you permute them optimally.\nAlso, find any permutation of the $N$ cows that achieves this minimum.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains two space-separated integers $N$ and $M.$\n\n<p>For each $1\\le i\\le N,$ the $i$-th line contains two space-separated integers\n$f_i$ and $s_i$ ($1\\le f_i,s_i\\le M$ and $f_i\\neq s_i$) denoting the favorite\nand second-favorite cereals of the $i$-th cow.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint the minimum number of cows that go hungry, followed by any permutation of\n$1\\ldots N$ that achieves this minimum. If there are multiple permutations, any\none will be accepted.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8 10\n2 1\n3 4\n2 3\n6 5\n7 8\n6 7\n7 5\n5 8\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n1\n3\n2\n8\n4\n6\n5\n7\n</pre>\n\n<p>In this example, there are $8$ cows and $10$ types of cereal. \n\n</p><p>Note that we can effectively solve for the first three cows independently of \nthe last five, since they share no favorite cereals in common.\n\n</p><p>If the first three cows choose in the order $[1,2,3]$, then cow $1$ will choose\ncereal $2$, cow $2$ will choose cereal $3$, and cow $3$ will go hungry. \n\n</p><p>If the first three cows choose in the order $[1,3,2]$, then cow $1$ will choose\ncereal $2$, cow $3$ will choose cereal $3$, and cow $2$ will choose cereal $4$;\nnone of these cows will go hungry.\n\n</p><p>Of course, there are other permutations that result in none of the first three\ncows going hungry. For example, if the first three cows choose in the order\n$[3,1,2]$ then cow $3$ will choose cereal $2$, cow $1$ will choose cereal $1$,\nand cow $2$ will choose cereal $3$; again, none of cows $[1,2,3]$ will go\nhungry.\n\n</p><p>It can be shown that out of the last five cows, at least one must go hungry.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In $4$ out of $14$ test cases, $N,M\\le 100$.</li><li>In $10$ out of $14$ test cases, no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1184"
    },
    {
      "title": "Problem 1. Redistributing Gifts",
      "subtitle": "USACO 2022 February Contest, Silver",
      "id": 1206,
      "year": "2022",
      "division": "silver",
      "number": "1",
      "problem": "Farmer John has $N$ gifts labeled $1\\ldots N$ for his $N$ cows, also labeled\n$1\\ldots N$  ($1\\le N\\le 500$). Each cow has a wishlist, which is a permutation\nof all $N$ gifts such that the cow prefers gifts that appear earlier in the list\nover gifts that appear later in the list.\n\n<p>FJ was lazy and just assigned gift $i$ to cow $i$ for all $i$. Now, the cows\nhave gathered amongst themselves and decided to reassign the gifts such that\nafter reassignment, every cow ends up with the same gift as she did originally,\nor a gift that she prefers over the one she was originally assigned.\n\n</p><p>For each $i$ from $1$ to $N$, compute the most preferred gift cow $i$ could hope\nto receive after reassignment.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$. The next $N$ lines each contain the preference list of a cow. It is guaranteed\nthat each line forms a permutation of $1\\dots N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease output $N$ lines, the $i$-th of which contains the \nmost preferred gift cow $i$ could hope to receive after reassignment.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 2 3 4\n1 3 2 4\n1 2 3 4\n1 2 3 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n3\n2\n4\n</pre>\n\n<p>In this example, there are two possible reassignments:\n\n</p><p></p><ul><li>The original assignment: cow $1$ receives gift $1$, cow $2$ receives gift\n$2$, cow $3$ receives gift $3$, and cow $4$ receives gift $4$.</li><li>Cow $1$ receives gift $1$, cow $2$ receives gift $3$, cow $3$ receives gift\n$2$, and cow $4$ receives gift $4$.</li></ul>\n\n<p>Observe that both cows $1$ and $4$ cannot hope to receive better gifts than they\nwere originally assigned. However, both cows $2$ and $3$ can.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $N\\le 8$.</li><li>Test cases 4-11 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1206"
    },
    {
      "title": "Problem 2. Robot Instructions",
      "subtitle": "USACO 2022 February Contest, Silver",
      "id": 1207,
      "year": "2022",
      "division": "silver",
      "number": "2",
      "problem": "Bessie is learning how to control a robot she has recently received as a gift.\n\n<p>The robot begins at point $(0, 0)$ on the coordinate plane and Bessie wants the\nrobot to end at point $(x_g, y_g)$. Bessie initially has a list of $N$\n($1\\le N\\le 40$)  instructions to give to the robot, the $i$-th of which will\nmove the robot $x_i$ units right and $y_i$ units up (or left or down when $x_i$\nand $y_i$ are negative, respectively).\n\n</p><p>For each $K$ from $1$ to $N$, help Bessie count the number of ways she can\nselect $K$ instructions from the original $N$ such that after the $K$\ninstructions are executed, the robot will end at point $(x_g, y_g)$.\n\n</p><p><strong>**Note: the time and memory limits for this problem are 4s and 512MB, twice\nthe defaults.**</strong>\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$. The next line contains $x_g$ and $y_g$, each in the\nrange $-10^9 \\ldots 10^9$. The final $N$ lines describe the instructions. Each\nline has two integers $x_i$ and $y_i$, also in the range $-10^9 \\ldots 10^9$. \n\n<p>It is guaranteed that $(x_g,y_g)\\neq (0,0)$ and $(x_i,y_i)\\neq (0,0)$ for all\n$i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint $N$ lines, the number of ways Bessie can select $K$ instructions from the\noriginal $N$ for each $K$ from $1$ to $N$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n5 10\n-2 0\n3 0\n4 0\n5 0\n0 10\n0 -10\n0 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n2\n0\n3\n0\n1\n0\n</pre>\n\n<p>In this example, there are six ways Bessie can select the instructions:\n\n</p><p></p><pre>(-2,0) (3,0) (4,0) (0,10) (0,-10) (0,10) (1 2 3 5 6 7)\n(-2,0) (3,0) (4,0) (0,10) (1 2 3 5)\n(-2,0) (3,0) (4,0) (0,10) (1 2 3 7)\n(5,0) (0,10) (0,-10) (0,10) (4 5 6 7)\n(5,0) (0,10) (4 5)\n(5,0) (0,10) (4 7)\n</pre>\n\n<p>For the first way, the robot's path looks as follows:\n\n</p><p></p><pre>(0,0) -&gt; (-2,0) -&gt; (1,0) -&gt; (5,0) -&gt; (5,10) -&gt; (5,0) -&gt; (5,10)\n</pre>\n\n<p>\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $N\\le 20$.</li><li>Test cases 5-16 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Alex Liang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1207"
    },
    {
      "title": "Problem 3. Email Filing",
      "subtitle": "USACO 2022 February Contest, Silver",
      "id": 1208,
      "year": "2022",
      "division": "silver",
      "number": "3",
      "problem": "Farmer John has fallen behind on organizing his inbox. The way his screen is\norganized, there is a vertical list of folders on the left side of the screen\nand a vertical list of emails on the right side of the screen. There are $M$\ntotal folders, numbered $1 \\ldots M$ ($1 \\le M \\le 10^4)$. His inbox currently\ncontains $N$ emails numbered $1\\ldots N$ ($1 \\le N \\le 10^5$); the $i$th email\nneeds to be filed into folder $f_i$ ($1\\le f_i\\le M$). \n\n<p>FJ's screen is rather small, so he can only view $K$ ($1\\le K\\le \\min(N,M)$)\nfolders and $K$ emails at once.  Initially, his screen starts out displaying folders\n$1 \\ldots K$ on the left and emails $1 \\ldots K$ on the right.  To access other\nfolders and emails, he needs to scroll through these respective lists.  For\nexample, if he scrolls down one position in the list of folders, his screen will display\nfolders $2 \\ldots K+1$, and then scrolling down one position further it will display folders\n$3 \\ldots K+2$.  When FJ drags an email into a folder, the email disappears from\nthe email list, and the emails after the one that disappeared shift up by one\nposition.  For example, if emails $1, 2, 3, 4, 5$ are currently displayed and FJ\ndrags email 3 into its appropriate folder, the email list will now show emails\n$1, 2, 4, 5, 6$.  FJ can only drag an email into the folder to which it needs to\nbe filed.\n\n</p><p>Unfortunately, the scroll wheel on FJ's mouse is broken, and he can only scroll\ndownwards, not upwards.  The only way he can achieve some semblance of upward\nscrolling is if he is viewing the last set of $K$ emails in his email list, and\nhe files one of these.  In this case, the email list will again show the last\n$K$ emails that haven't yet been filed, effectively scrolling the top email up\nby one. If there are fewer than $K$ emails remaining, then all of them will be\ndisplayed. \n\n</p><p>Please help FJ determine if it is possible to file all of his emails.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $T$ ($1 \\le T \\le 10$), the number of subcases\nin this input,  all of which must be solved correctly to solve the input case.\nThe $T$ subcases then follow.  For each subcase, the first line of input\ncontains $M$, $N$, and $K$. The next line contains $f_1 \\ldots f_N$.\n\n<p>It is guaranteed that the sum of $M$ over all subcases does not exceed $10^4$,\nand that the sum of $N$ over all subcases does not exceed $10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $T$ lines, each one either containing either YES or NO, specifying\nwhether FJ can successfully file all his emails in each of the $T$ subcases.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n5 5 1\n1 2 3 4 5\n5 5 1\n1 2 3 5 4\n5 5 1\n1 2 4 5 3\n5 5 2\n1 2 4 5 3\n3 10 2\n1 3 2 1 3 2 1 3 2 1\n3 10 1\n1 3 2 1 3 2 1 3 2 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YES\nYES\nNO\nYES\nYES\nNO\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In inputs 2-10, the sum of $M$ over all subcases does not exceed\n$10^3$.</li><li>In inputs 11-12, no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1208"
    },
    {
      "title": "Problem 1. Visits",
      "subtitle": "USACO 2022 US Open Contest, Silver",
      "id": 1230,
      "year": "2022",
      "division": "silver",
      "number": "1",
      "problem": "<p>Each of Bessie’s $N$ ($2\\le N\\le 10^5$) bovine buddies (conveniently labeled\n$1\\ldots N$) owns her own farm. For each $1\\le i\\le N$, buddy $i$ wants to visit\nbuddy $a_i$ ($a_i\\neq i$). \n\n</p><p>Given a permutation $(p_1,p_2,\\ldots, p_N)$ of $1\\ldots N$, the visits occur as follows.\n\n</p><p>For each $i$ from $1$ up to $N$:\n\n</p><p></p><ul><li>If buddy $a_{p_i}$ has already departed her farm, then buddy $p_i$ remains\nat her own farm.</li><li>Otherwise, buddy $p_i$ departs her farm to visit buddy $a_{p_i}$’s farm.\nThis visit results in a joyful \"moo\" being uttered $v_{p_i}$ times ($0\\le v_{p_i}\\le 10^9$).\n</li></ul>\n\n<p>Compute the maximum possible number of moos after all visits, over all\npossible permutations $p$. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>For each $1\\le i\\le N$, the $i+1$-st line contains two space-separated integers\n$a_i$ and $v_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nA single integer denoting the answer.\n\n<p><strong>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n2 10\n3 20\n4 30\n1 40\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">90\n</pre>\n\n<p>If $p=(1,4,3,2)$ then\n\n</p><p></p><ul><li>Buddy $1$ visits buddy $2$'s farm, resulting in $10$ moos.</li><li>Buddy $4$ sees that buddy $1$ has already departed, so nothing happens.</li><li>Buddy $3$ visits buddy $4$'s farm, adding $30$ moos.</li><li>Buddy $2$ sees that buddy $3$ has already departed, so nothing happens.</li></ul>\n\n<p>This gives a total of $10+30=40$ moos. \n\n</p><p>On the other hand, if $p=(2,3,4,1)$ then\n\n</p><p></p><ul><li>Buddy $2$ visits buddy $3$'s farm, causing $20$ moos.</li><li>Buddy $3$ visits buddy $4$'s farm, causing $30$ moos.</li><li>Buddy $4$ visits buddy $1$'s farm, causing $40$ moos.</li><li>Buddy $1$ sees that buddy $2$ has already departed, so nothing happens.</li></ul>\n\n<p>This gives $20+30+40=90$ total moos. It can be shown that\nthis is the maximum possible amount after all visits, over all\npermutations $p$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $a_i\\neq a_j$ for all $i\\neq j$.</li><li>Test cases 4-7 satisfy $N\\le 10^3$.</li><li>Test cases 8-11 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi and Michael Cao\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1230"
    },
    {
      "title": "Problem 2. Subset Equality",
      "subtitle": "USACO 2022 US Open Contest, Silver",
      "id": 1231,
      "year": "2022",
      "division": "silver",
      "number": "2",
      "problem": "<p>The cows are trying out a new method of exchanging coded messages with each-other\nwhere they mix irrelevant letters in among relevant letters to make the messages\nhard to decode.  \n\n</p><p>The cows transmit two strings $s$ and $t$ each of length at most $10^5$ consisting\nonly of the lowercase English letters 'a' through 'r'.  To try and make sense\nof this coded message, you will be given $Q$ queries ($1 \\leq Q \\leq 10^5$). Each query provides a subset of the\nlowercase English letters from 'a' to 'r.' You need to determine for each query\nwhether $s$ and $t$, when restricted only to the letters in the query, are\nequal.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nFirst line contains $s$.\n\n<p>Second line contains $t$.\n\n</p><p>Third line contains $Q$.\n\n</p><p>Next $Q$ lines each contain a query string. Within a query string, no letters\nare repeated. Furthermore, all query strings are in sorted order, and no query\nstring appears more than once.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each query, print 'Y' if $s$ and $t$, when restricted only to the letters in\nthe query, are equal, or 'N' otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">aabcd\ncaabd\n4\na\nac\nabd\nabcd\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YNYN\n</pre>\n\n<p>For the first query, both strings become \"aa\" when restricted only to 'a.'\n\n</p><p>For the second query, the first string becomes \"aac\" while the second string\nbecomes \"caa.\"\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test case 2 satisfies $|s|, |t|, Q \\le 1000$.</li><li>Test cases 3-11 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Danny Mittal\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1231"
    },
    {
      "title": "Problem 3. COW Operations",
      "subtitle": "USACO 2022 US Open Contest, Silver",
      "id": 1232,
      "year": "2022",
      "division": "silver",
      "number": "3",
      "problem": "<p>Bessie finds a string $s$ of length at most $2 \\cdot 10^5$ containing only the three\ncharacters 'C', 'O', and 'W'. She wants to know if it's possible to turn this\nstring into a single 'C' (her favorite letter)  using the following operations: \n\n</p><p>1. Choose two adjacent equal letters and delete them.\n\n</p><p>2. Choose one letter and replace it with the other two letters in either order.\n\n</p><p>Finding the answer on the string itself isn't enough for Bessie, so she wants to\nknow the answer for $Q$ ($1\\le Q\\le 2\\cdot 10^5$) substrings of $s$. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $s$.\n\n<p>The next line contains $Q$.\n\n</p><p>The next $Q$ lines each contain two integers $l$ and $r$ ($1\\le l\\le r\\le |s|$,\nwhere $|s|$ denotes the length of $s$).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nA string of length $Q$, with the $i$-th character being 'Y' if the $i$-th\nsubstring can be reduced and 'N' otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">COW\n6\n1 1\n1 2\n1 3\n2 2\n2 3\n3 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YNNNYN\n</pre>\n\n<p>The answer to the first query is yes because the first character of $s$\nis already equal to 'C'.\n\n</p><p>The answer to the fifth query is yes because the substring OW from \nthe second to the third character of $s$ can be\nconverted into 'C' in two operations:\n\n</p><p></p><pre>   OW\n-&gt; CWW\n-&gt; C\n</pre>\n\n<p>No other substring of this example string COW can be reduced to 'C'\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $|s|\\le 5000$ and $Q\\le 5000$.</li><li>Test cases 5-11 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Ray Bai\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1232"
    },
    {
      "title": "Problem 1. Barn Tree",
      "subtitle": "USACO 2022 December Contest, Silver",
      "id": 1254,
      "year": "2022",
      "division": "silver",
      "number": "1",
      "problem": "<strong>**Note: the time limit for this problem is 4s, two times the default. The memory limit is also twice the default.**</strong>\n\n<p>Farmer John's farm has $N$ barns ($2 \\leq N \\leq 2\\cdot 10^5$) numbered\n$1 \\dots N$. There are $N-1$ roads, where each road connects two barns and it is\npossible to get from any barn to any other barn via some sequence of roads.\nCurrently, the $j$th barn has $h_j$ hay bales ($1\\le h_j\\le 10^9$).\n\n</p><p>To please his cows, Farmer John would like to move the hay such that each barn\nhas an equal number of bales. He can select any pair of barns connected by a\nroad and order his farmhands to move any positive integer number of bales less\nthan or equal to the number of bales currently at the first barn from the first\nbarn to the second.\n\n</p><p>Please determine a sequence of orders Farmer John can issue to complete the task\nin the minimum possible number of orders. It is guaranteed that a sequence of\norders exists.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\n\n<p>The first line of input contains the value of $N.$\n\n</p><p>The second line of input contains the space-separated values of $h_j$ for\n$j = 1 \\dots N$.\n\n</p><p>The final $N-1$ lines of input each contain two space-separated barn numbers\n$u_i \\ v_i$, indicating that there is a bidirectional road connecting $u_i$ and\n$v_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the minimum possible number of orders, followed a sequence of orders of\nthat length, one per line.\n\n<p>Each order should be formatted as three space-separated positive integers: the\nsource barn, the destination barn, and the third describes the number of hay\nbales to move from the source to the destination. \n\n</p><p>If there are multiple solutions, output any.\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n2 1 4 5\n1 2\n2 3\n2 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n3 2 1\n4 2 2\n2 1 1\n</pre>\n\n<p>In this example, there are a total of twelve hay bales and four barns, meaning\neach barn must have three hay bales at the end. The sequence of orders in the\nsample output can be verbally translated as below:\n\n</p><p></p><ol><li>From barn $3$ to barn $2$, move $1$ bale. </li><li>From barn $4$ to barn $2$, move $2$ bales.</li><li>From barn $2$ to barn $1$, move $1$ bale. </li></ol>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-8 satisfy $N\\leq 5000$</li><li>Test cases 7-10 satisfy $v_i=u_i+1$</li><li>Test cases 11-16 satisfy no additional constraints</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Aryansh Shrivastava\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1254"
    },
    {
      "title": "Problem 2. Circular Barn",
      "subtitle": "USACO 2022 December Contest, Silver",
      "id": 1255,
      "year": "2022",
      "division": "silver",
      "number": "2",
      "problem": "Farmer John and his archnemesis Farmer Nhoj are playing a game in a circular\nbarn. There are $N$ ($1 \\leq N \\leq 10^5$) rooms in the barn, and the $i$th room\ninitially contains  $a_i$ cows ($1 \\leq a_i \\leq 5\\cdot 10^6$). The game is\nplayed as follows:\n\n<p></p><ul><li>Both farmers will always be in the same room. After entering a room, each\nfarmer takes exactly one turn, with Farmer John going first. Both farmers\ninitially enter room $1$.</li><li>If there are zero cows in the current room, then the farmer to go loses.\nOtherwise, the farmer to go chooses an integer $P$, where $P$ must either be $1$\nor a prime number at most the number of cows in the current room, and removes\n$P$ cows from the current room.</li><li>After both farmers have taken turns, both farmers move to the next room  in\nthe circular barn. That is, if the farmers are in room $i$, then they move to\nroom $i+1$, unless they are in room $N$, in which case they move to room\n$1$.</li></ul>\n\n<p>Determine the farmer that wins the game if both farmers play optimally.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe input contains $T$ test cases. The first line contains  $T$\n($1 \\leq T \\leq 1000$).  Each of the $T$ test cases follow.\n\n<p>Each test case starts with a line containing $N$, followed by a line containing\n$a_1,\\dots,a_N$. \n\n</p><p>It is guaranteed that the sum of all $N$ is at most\n$2\\cdot 10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output the farmer that wins the game, either \"Farmer John\"\nor \"Farmer Nhoj.\"\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1\n4\n1\n9\n2\n2 3\n2\n7 10\n3\n4 9 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">Farmer Nhoj\nFarmer John\nFarmer John\nFarmer John\nFarmer Nhoj\n</pre>\n\n<p>For the first test case, Farmer John can remove $1$, $2$, or $3$ cows from  the\nfirst room. Whichever number he removes, Nhoj can remove the remaining cow(s),\nforcing FJ to lose when they circle back to the first room.\n\n</p><p>For the second test case, FJ can remove $5$ cows, forcing Nhoj to work with only\n$4$ cows remaining. Now, Nhoj can either remove $1$, $2$, or $3$ cows. This is\nnow similar to the first test case.\n\n</p><p>For the third and fourth test cases, FJ can immediately remove all the cows from\nthe first room, forcing Nhoj to lose.\n\n</p><p>For the fifth test case, FJ can remove $1$, $2$, or $3$, cows from the first\nroom, and Nhoj can remove the rest right after. When they circle back around to\nthe first room, FJ will lose.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-4 satisfy $N=1$.</li><li>Inputs 1, 2, and 5-7 satisfy $a_i\\le 1000$.</li><li>Inputs 8-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Chongtian Ma, Jesse Choe, and Yuval Vaknin\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1255"
    },
    {
      "title": "Problem 3. Range Reconstruction",
      "subtitle": "USACO 2022 December Contest, Silver",
      "id": 1256,
      "year": "2022",
      "division": "silver",
      "number": "3",
      "problem": "<p>Bessie has an array $a_1, \\ldots, a_N$, where $1 \\leq N \\leq 300$ and\n$0 \\leq a_i \\leq 10^9$ for all $i$. She won't tell you $a$ itself, but she will\ntell you the range of each subarray of $a$. That is, for each pair of indices\n$i \\leq j$, Bessie tells you $r_{i, j} = \\max a[i\\ldots j] - \\min a[i\\ldots j]$.\nGiven these values of $r$, please construct an array that could have been\nBessie's original array. The values in your array should be in the range\n$[-10^9, 10^9]$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>Another $N$ lines follow. The $i$th of these lines contains the integers\n$r_{i, i}, r_{i, i + 1}, \\ldots, r_{i, N}$.\n\n</p><p>It is guaranteed that there is some array $a$ with values in the range\n$[0, 10^9]$ such that for all $i \\leq j$,\n$r_{i, j} = \\max a[i\\ldots j] - \\min a[i\\ldots j]$. \n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput one line containing $N$ integers $b_1, b_2, \\ldots, b_N$ in the range\n$[-10^9, 10^9]$ representing your array. They must satisfy\n$r_{i, j} = \\max b[i\\ldots j] - \\min b[i\\ldots j]$ for all $i \\leq j$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n0 2 2\n0 1\n0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 3 2\n</pre>\n\n<p>For example, $r_{1, 3} = \\max a[1\\ldots 3] - \\min a[1\\ldots 3] = 3 - 1 = 2$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n0 1 1\n0 0\n0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0 1 1\n</pre>\n\n<p>This example satisfies the constraints for subtask 1.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n0 1 2 2\n0 1 1\n0 1\n0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 2 3 2\n</pre>\n\n<p>This example satisfies the constraints for subtask 2.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n0 1 1 2\n0 0 2\n0 2\n0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 2 2 0\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test 5 satisfies $r_{1,N} \\leq 1$.</li><li>Tests 6-8 satisfy $r_{i,i+1} = 1$ for all $1 \\leq i &lt; N$. </li><li>Tests 9-14 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Danny Mittal\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1256"
    },
    {
      "title": "Problem 1. Find and Replace",
      "subtitle": "USACO 2023 January Contest, Silver",
      "id": 1278,
      "year": "2023",
      "division": "silver",
      "number": "1",
      "problem": "\n<p>Bessie is using the latest and greatest innovation in text-editing software,\nmiV! She starts with an input string consisting solely of upper and lowercase\nEnglish letters and wishes to transform it into some output string. With just\none keystroke, miV allows her to replace all occurrences of one English letter\n$c_1$ in the string with another English letter $c_2$. For example, given the\nstring $\\texttt{aAbBa}$, if Bessie selects $c_1$ as 'a' and $c_2$ as 'B', the given string transforms into\n$\\texttt{BAbBB}$.\n\n</p><p>Bessie is a busy cow, so for each of $T$ ($1\\le T\\le 10$) independent test\ncases, output the minimum number of keystrokes required to transform her input\nstring into her desired output string.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$, the number of independent test cases.\n\n<p>The following $T$ pairs of lines contain an input and output string of equal\nlength.  All characters are upper or lowercase English letters (either A through\nZ or a through z). The sum of the lengths of all strings does not exceed $10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output the minimum number of keystrokes required to change\nthe input string into the output string, or $-1$ if it is impossible to do so.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\nabc\nabc\nBBC\nABC\nabc\nbbc\nABCD\nBACD\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n-1\n1\n3\n</pre>\n\n<p>The first input string is the same as its output string, so no keystrokes are\nrequired.\n\n</p><p>The second input string cannot be changed into its output string because Bessie\ncannot change one '$\\texttt{B}$' to '$\\texttt{A}$' while keeping the other as\n'$\\texttt{B}$'.\n\n</p><p>The third input string can be changed into its output string by changing\n'$\\texttt{a}$' to '$\\texttt{b}$'.\n\n</p><p>The last input string can be changed into its output string like so:\n$\\texttt{ABCD} \\rightarrow \\texttt{EBCD} \\rightarrow \\texttt{EACD} \\rightarrow \\texttt{BACD}$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-6: Every string has a length at most $50$.</li><li>Inputs 7-9: All strings consist only of lowercase letters '$\\texttt{a}$'\nthrough '$\\texttt{e}$'</li><li>Inputs 10-15: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1278"
    },
    {
      "title": "Problem 2. Following Directions",
      "subtitle": "USACO 2023 January Contest, Silver",
      "id": 1279,
      "year": "2023",
      "division": "silver",
      "number": "2",
      "problem": "\n<p>**Note: The time limit for this problem is 8s, four times the default.**\n\n</p><p>Farmer John has a big square field split up into an $(N+1)\\times (N+1)$\n($1\\le N\\le 1500$) grid of cells. Let cell $(i, j)$ denote the cell in the $i$th\nrow from the top and $j$th column from the left. There is one cow living in\nevery cell $(i, j)$ such that $1 \\le i, j \\le N$, and each such cell also\ncontains a signpost pointing either to the right or downward. Also, every cell\n$(i, j)$ such that either $i=N+1$ or $j=N+1$, except for $(N+1, N+1)$, contains \na vat of cow feed. Each vat contains cow feed of varying price; the vat at\n$(i, j)$ costs $c_{i, j}$ ($1 \\le c_{i,j} \\le 500$) to feed each cow. \n\n</p><p>Every day at dinner time, Farmer John rings the dinner bell, and each cow keeps \nfollowing the directions of the signposts until it reaches a vat, and is then\nfed from that vat. Then the cows all return to their original positions for the\nnext day.\n\n</p><p>To maintain his budget, Farmer John wants to know the total cost to feed all the\ncows each day. However, during every day, before dinner, the cow in in some cell\n$(i, j)$ flips the direction of its signpost (from right to down or vice versa).\nThe signpost remains in this direction for the following days as well, unless it\nis  flipped back later. \n\n</p><p>Given the coordinates of the signpost that is flipped on each day, output the\ncost for every day (with $Q$ days in total,\n$1 \\le Q \\le 1500$).\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ ($1 \\le N \\le 1500$).\n\n<p>The next $N+1$ lines contain the rows of the grid from top to bottom, containing\nthe initial directions of the signposts and the costs $c_{i, j}$ of each vat.\nThe first $N$ of these lines contain a string of $N$ directions R or D\n(representing signposts pointing right or down, respectively), followed by the\ncost $c_{i, N+1}$. The $(N+1)$-th line contains $N$ costs $c_{N+1, j}$.\n\n</p><p>The next line contains $Q$ ($1 \\le Q \\le 1500$).\n\n</p><p>Then follow $Q$ additional lines, each consisting of two integers $i$ and $j$ \n($1 \\le i, j \\le N$), which are the coordinates of the cell whose signpost is\nflipped on the corresponding day.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n$Q+1$ lines: the original value of the total cost, followed by the value of the \ntotal cost after each flip.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\nRR 1\nDD 10\n100 500\n4\n1 1\n1 1\n1 1\n2 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">602\n701\n602\n701\n1501\n</pre>\n\n<p>Before the first flip, the cows at $(1, 1)$ and $(1, 2)$ cost $1$ to feed, the\ncow at $(2, 1)$ costs $100$ to feed, and the cow at $(2, 2)$ costs $500$ to\nfeed, for a total cost of $602$. After the first flip, the direction of the\nsignpost at $(1,1)$ changes from R to D, and the cow at $(1, 1)$ now costs $100$\nto feed (while the others remain unchanged), so the total cost is now $701$. The\nsecond and third flips switch the same sign back and forth. After the fourth\nflip, the cows at $(1, 1)$ and  $(2, 1)$ now cost $500$ to feed, for a total\ncost of $1501$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Inputs 2-4: $1 \\le N, Q \\le 50$</li><li>Inputs 5-7: $1 \\le N, Q \\le 250$</li><li>Inputs 2-10: The initial direction in each cell, as well as the queries, are\nuniformly randomly generated.</li><li>Inputs 11-15: No additional constraints.</li></ul>\n</div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1279"
    },
    {
      "title": "Problem 3. Moo Route",
      "subtitle": "USACO 2023 January Contest, Silver",
      "id": 1280,
      "year": "2023",
      "division": "silver",
      "number": "3",
      "problem": "\n<p>Farmer Nhoj dropped Bessie in the middle of nowhere! At time $t=0$, Bessie is\nlocated at $x=0$ on an infinite number line. She frantically searches for an\nexit by moving left or right by $1$ unit each second. However, there actually is\nno exit and after $T$ seconds, Bessie is back at $x=0$, tired and resigned. \n\n</p><p>Farmer Nhoj tries to track Bessie but only knows how many times Bessie crosses\n$x=.5, 1.5, 2.5, \\ldots, (N-1).5$, given by an array $A_0,A_1,\\dots,A_{N-1}$\n($1\\leq N \\leq 10^5$, $1 \\leq A_i \\leq 10^6$, $\\sum A_i\\le 10^6$). Bessie never\nreaches $x&gt;N$ nor\n$x&lt;0$.\n\n</p><p>In particular, Bessie's route can be represented by a string of\n$T = \\sum_{i=0}^{N-1} A_i$ $L$s and $R$s where the $i$th character represents\nthe direction Bessie moves in during the $i$th second. The number of direction\nchanges is defined as the number of occurrences of $LR$s plus the number of\noccurrences of $RL$s. \n\n</p><p>Please help Farmer Nhoj find any route Bessie could have taken that is\nconsistent with $A$ and minimizes the number of direction changes. It is\nguaranteed that there is at least one valid route.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$. The second line contains $A_0,A_1,\\dots,A_{N-1}$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput a string $S$ of length $T = \\sum_{i=0}^{N-1} A_i$ where $S_i$ is $L$ or\n$R$, indicating the direction Bessie travels in during second $i$. If there are\nmultiple routes minimizing the number of direction changes, output any.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n2 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">RRLRLL\n</pre>\n\n<p>There is only 1 valid route, corresponding to the route\n$0\\to 1 \\to 2 \\to 1\\to 2 \\to 1\\to 0$. Since this is the only possible route, it\nalso has the minimum number of direction changes.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n2 4 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">RRRLLRRLLL\n</pre>\n\n<p>There are 3 possible routes:\n\n</p><p></p><pre>RRLRRLRLLL\nRRRLRLLRLL\nRRRLLRRLLL\n</pre>\n\n<p>The first two routes have 5 direction changes, while the last one has only 3. \nThus the last route is the only correct output.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-5: $N\\le 2$</li><li>Inputs 3-10: $T = A_0 + A_1 + \\cdots + A_{N-1} \\leq 5000$</li><li>Inputs 11-20: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang and Claire Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1280"
    },
    {
      "title": "Problem 1. Bakery",
      "subtitle": "USACO 2023 February Contest, Silver",
      "id": 1302,
      "year": "2023",
      "division": "silver",
      "number": "1",
      "problem": "\n<p>Bessie has opened a bakery!\n\n</p><p>In her bakery, Bessie has an oven that can produce a cookie in $t_C$ units of\ntime or a muffin in $t_M$ units of time ($1\\le t_C,t_M\\le 10^9$). Due to space\nconstraints, Bessie can only produce one pastry at a time, so to produce $A$\ncookies and $B$ muffins, it takes $A \\cdot t_C + B \\cdot t_M$ units of time. \n\n</p><p>Bessie's $N$ ($1\\le N\\le 100$) friends would each like to visit the bakery one\nby one. The $i$th friend will order $a_i$ ($1 \\leq a_i\\leq 10^9$) cookies and\n$b_i$ ($1 \\leq b_i \\leq 10^9$) muffins immediately upon entering. Bessie doesn't\nhave  space to store pastries, so she only starts making pastries upon receiving\nan order. Furthermore, Bessie's friends are very busy, so the $i$th friend is\nonly willing to wait $c_i$ ($a_i + b_i \\leq c_i \\leq 2 \\cdot 10^{18}$) units of\ntime before getting sad and leaving.\n\n</p><p>Bessie really does not want her friends to be sad. With one mooney, she can\nupgrade her oven so that it takes one less unit of time to produce a cookie or\none less unit of time to produce a muffin. She can't upgrade her oven a\nfractional amount of times, but she can choose to upgrade her oven as many times\nas she needs before her friends arrive, as long as the time needed to produce a\ncookie and to produce a muffin both remain strictly positive.\n\n</p><p>For each of $T$ ($1 \\leq T \\leq 100$) test cases, please help Bessie find out\nthe minimum amount of moonies that Bessie must spend so that her bakery can\nsatisfy all of her friends.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$, the number of test cases.\n\n<p>Each test case starts with one line containing $N$, $t_C$, $t_M$. Then, the next\n$N$ lines each contain three integers $a_i,b_i, c_i$.\n\n</p><p>Consecutive test cases are separated by newlines.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe minimum amount of moonies that Bessie needs to spend for each test case, on\nseparate lines.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n\n3 7 9\n4 3 18\n2 4 19\n1 1 6\n\n5 7 3\n5 9 45\n5 2 31\n6 4 28\n4 1 8\n5 2 22\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">11\n6\n</pre>\n\n<p>In the first test case, Bessie can pay 11 moonies to decrease the time required\nto produce a cookie by 4 and a muffin by 7, so that her oven produces cookies in\n3 units of time and muffins in 2 units of time. Then she can satisfy the first\nfriend in 18 units of time, the second friend in 14 units of time, and the third\nfriend in 5 units of time, so none of them will get sad and leave.\n\n</p><p>In the second test case, Bessie should decrease the time required to produce a\ncookie by 6 and a muffin by 0.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-4: $N \\leq 10, t_C, t_M \\leq 1000$</li><li>Inputs 5-11: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1302"
    },
    {
      "title": "Problem 2. Cow-libi",
      "subtitle": "USACO 2023 February Contest, Silver",
      "id": 1303,
      "year": "2023",
      "division": "silver",
      "number": "2",
      "problem": "\n<p>**Note: The time limit for this problem is 4s, two times the default.**\n\n</p><p>Somebody has been grazing in Farmer John's $(1 \\le G \\le 10^5)$\nprivate gardens! Using his expert forensic knowledge, FJ has been able to\ndetermine the precise time each garden was grazed.  He has also determined that\nthere was a single cow that was responsible for every grazing incident.\n\n</p><p>In response to these crimes each of FJ's $N$ $(1 \\le N \\le 10^5)$\ncows have provided an alibi that proves the cow was in a specific location at a\nspecific time.  Help FJ test whether each of these alibis demonstrates the cow's\ninnocence.\n\n</p><p>A cow can be determined to be innocent if it is impossible for her to have\ntravelled between all of the grazings and her alibi.  Cows travel at a rate of 1\nunit distance per unit time.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input will contain $G$ and $N$ separated by a space.\n\n<p>The next $G$ lines contain the integers $x$, $y$, and $t$\n$(-10^9 \\le x, y \\le 10^9; 0 \\le t \\le 10^9)$ separated by a space\ndescribing the location and time of the grazing.  It will always be possible for\na single cow to travel between all grazings.\n\n</p><p>The next $N$ lines contain $x$, $y$, and $t$\n$(-10^9 \\le x, y \\le 10^9; 0 \\le t \\le 10^9)$ separated by a space\ndescribing the location and time of each cow's alibi.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput a single integer: the number of cows with alibis that prove their\ninnocence.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 4\n0 0 100\n50 0 200\n0 50 50\n1000 1000 0\n50 0 200\n10 0 170\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>There were two grazings; the first at $(0, 0)$ at time $100$ and the\nsecond at $(50, 0)$ at time $200$.\n\n</p><p>The first cow's alibi does not prove her innocence.  She has just enough time to\narrive at the first grazing.\n\n</p><p>The second cow's alibi does prove her innocence.  She is nowhere near any of the\ngrazings.\n\n</p><p>Unfortunately for the third cow, being at the scene of the crime does not prove\ninnocence.\n\n</p><p>Finally, the fourth cow is innocent because it's impossible to make it from her\nalibi to the final grazing in time.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Inputs 2-4: $1 \\le G, N \\le 10^3$. Also, for both the fields and alibis,\n$-10^6 \\le x, y \\le 10^6$ and  $0 \\le t \\le 10^6$. </li><li>Inputs 5-11: No additional constraints.</li></ul>\n</div>\n\n<p>\n\n</p><p>Problem credits: Mark Gordon\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1303"
    },
    {
      "title": "Problem 3. Moo Route II",
      "subtitle": "USACO 2023 February Contest, Silver",
      "id": 1304,
      "year": "2023",
      "division": "silver",
      "number": "3",
      "problem": "\n<p><strong>**Note: The time limit for this problem is 4s, twice the default.**</strong>\n\n</p><p>Bessie is on vacation!  Due to some recent technological advances, Bessie will\ntravel via technologically sophisticated  flights, which can even time travel.\nFurthermore, there are no issues if two \"parallel\" versions of Bessie ever meet.\n\n</p><p>In the country there are $N$ airports numbered $1, 2, \\ldots, N$ and $M$\ntime-traveling flights ($1\\leq N, M \\leq 200000$). Flight $j$ leaves airport\n$c_j$ at time $r_j$, and arrives in airport $d_j$ at time $s_j$ \n($0 \\leq r_j, s_j \\leq 10^9$, $s_j &lt; r_j$ is possible).  In addition, she must\nleave $a_i$ time for a layover at airport $i$\n($1\\le a_i\\le 10^9$).\n(That is to say, if Bessie takes a flight arriving in airport $i$ at time $s$,\nshe can then transfer to a  flight leaving the airport at time $r$ if\n$r \\geq s + a_i$. The layovers do not affect when Bessie arrives at an airport.)\n\n</p><p>Bessie starts at city $1$ at time $0$. For each airport from $1$ to $N$, what is\nthe earliest time when Bessie can get to at it?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$ and $M$.\n\n<p>The next $M$ lines describe flights.  The $j$th of these lines contains $c_j$,\n$r_j$, $d_j$, $s_j$ in that order. ($1\\leq c_j, d_j \\leq N$,\n$0\\leq r_j, s_j \\leq 10^9$)\n\n</p><p>The next line describes airports.  It contains $N$ space separated integers,\n$a_1, \\ldots, a_N$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThere are $N$ lines of output.  Line $i$ contains the earliest time when Bessie\ncan get to airport $i$,  or -1 if it is not possible for Bessie to get to that\nairport.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 3\n1 0 2 10\n2 11 2 0\n2 1 3 20\n10 1 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n0\n20\n</pre>\n\n<p>Bessie can take the 3 flights in the listed order, which allows her to arrive at\nairports  1 and 2 at time 0, and airport 3 at time 20.\n\n</p><p>Note that this route passes through airport 2 twice, first from time 10-11 and\nthen from time 0-1.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 3\n1 0 2 10\n2 10 2 0\n2 1 3 20\n10 1 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n10\n-1\n</pre>\n\n<p>In this case, Bessie can take flight 1, arriving at airport 2 at time 10.\nHowever, she does not arrive in time to also take flight 2, since the departure\ntime is 10 and she cannot make a 1 time-unit layover.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-5: $r_j &lt; s_j$ for all $j$, i.e. all flights arrive after they\ndepart.</li><li>Inputs 6-10: $N, M \\leq 5000$</li><li>Inputs 11-20: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1304"
    },
    {
      "title": "Problem 1. Milk Sum",
      "subtitle": "USACO 2023 US Open Contest, Silver",
      "id": 1326,
      "year": "2023",
      "division": "silver",
      "number": "1",
      "problem": "\n<p><strong>**Note: The time limit for this problem is 4s, 2x the default.**</strong>\n\n</p><p>Farmer John's $N$ cows ($1\\le N\\le 1.5\\cdot 10^5$) have integer milk production\nvalues $a_1,\\dots,a_N$.  That is, the $i$th cow produces $a_i$ units of milk per\nminute, with $0 \\leq a_i \\leq 10^8$.  \n\n</p><p>Each morning, Farmer John starts with all $N$ cows hooked up to his milking\nmachine in the barn.  He is required to unhook them one by one, sending them out\nfor their daily exercise routine.  The first cow he sends out is unhooked after\njust 1 minute of milking, the second cow he sends out is unhooked after another\nminute of milking, and so on.  Since the first cow (say, cow $x$) only spends\none minute on the milking machine, she contributes only $a_x$ units of total\nmilk.  The second cow (say, cow $y$) spends two total minutes on the milking\nmachine, and therefore contributes $2a_y$ units of total milk.  The third cow\n(say, cow $z$) contributes $3a_z$ total units, and so on.  Let $T$ represent the\nmaximum possible amount of milk, in total, that Farmer John can collect, if he\nunhooks his cows in an optimal order.\n\n</p><p>Farmer John is curious how $T$ would be affected if some of the milk production\nvalues in his herd were different.  For each of $Q$ queries ($1\\le Q\\le 1.5\\cdot 10^5$),\neach specified by two integers $i$ and $j$, please calculate what would be the \nnew value of $T$ if $a_i$ were set to $j$ ($0 \\leq j \\leq 10^8$).  Note that\neach query is considering a temporary potential change independent of all other\nqueries; that is, $a_i$ reverts back to its original value before the next query\nis considered.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$. \n\n<p>The second line contains $a_1\\dots a_N$.\n\n</p><p>The third line contains $Q$.\n\n</p><p>The next $Q$ lines each contain two space-separated integers $i$ and $j$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease print the value of $T$ for each of the $Q$ queries on separate lines.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1 10 4 2 6\n3\n2 1\n2 8\n4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">55\n81\n98\n</pre>\n\n<p>For the first query, $a$ would become $[1,1,4,2,6]$, and\n$T =\n1 \\cdot 1 + 2 \\cdot 1 + 3 \\cdot 2 + 4 \\cdot 4 + 5 \\cdot 6 = 55$.\n\n</p><p>For the second query, $a$ would become $[1,8,4,2,6]$, and\n$T =\n1 \\cdot 1 + 2 \\cdot 2 + 3 \\cdot 4 + 4 \\cdot 6 + 5 \\cdot 8 = 81$.\n\n</p><p>For the third query, $a$ would become $[1,10,4,5,6]$, and\n$T =\n1 \\cdot 1 + 2 \\cdot 4 + 3 \\cdot 5 + 4 \\cdot 6 + 5 \\cdot 10 = 98$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-4: $N,Q\\le 1000$</li><li>Inputs 5-11: No additional\nconstraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1326"
    },
    {
      "title": "Problem 2. Field Day",
      "subtitle": "USACO 2023 US Open Contest, Silver",
      "id": 1327,
      "year": "2023",
      "division": "silver",
      "number": "2",
      "problem": "\n<p><strong>**Note: The time limit for this problem in Python is 15s.  Other languages have the default time limit of 2s.**</strong>\n\n</p><p>Each of Farmer John's $N$ barns ($2\\le N\\le 10^5$) has selected a team of $C$ \ncows ($1\\le C\\le 18$) to participate in field day. The breed of every cow is\neither a Guernsey or a Holstein.  \n\n</p><p>The difference between two teams is defined to be the number of positions $i$\n($1 \\leq i \\leq C$) at which the breeds of the cows in the $i$th positions\ndiffer. For every team $t$ from $1 \\ldots N$, please compute the maximum\ndifference between team $t$ and any other team.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $C$ and $N$.\n\n<p>The next $N$ lines each contain a string of length $C$ of Gs and Hs.  Each line\ncorresponds to a team.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each team, print the maximum difference.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 3\nGHGGH\nGHHHH\nHGHHG\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n3\n5\n</pre>\n\n<p>The first and third teams differ by $5$. The second and third teams differ by\n$3$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-5: $C = 10$</li><li>Inputs 6-9: All answers are at least $C-3$.\n</li><li> Inputs 10-20: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1327"
    },
    {
      "title": "Problem 3. Pareidolia",
      "subtitle": "USACO 2023 US Open Contest, Silver",
      "id": 1328,
      "year": "2023",
      "division": "silver",
      "number": "3",
      "problem": "\n<p><strong>**Note: The time limit for this problem is 4s, 2x the default.**</strong>\n\n</p><p>Pareidolia is the phenomenon where your eyes tend to see familiar patterns in\nimages where none really exist -- for example seeing a face in a cloud.  As you\nmight imagine, with Farmer John's constant proximity to cows, he often sees\ncow-related patterns in everyday objects.  For example, if he looks at the\nstring \"bqessiyexbesszieb\", Farmer John's  eyes ignore some of the letters and\nall he sees is \"bessiebessie\".  \n\n</p><p>Given a string $s$, let $B(s)$ represent the maximum number of repeated copies\nof  \"bessie\" one can form by deleting zero or more of the characters from $s$. \nIn the example above, $B($\"bqessiyexbesszieb\"$) = 2$.\n\n</p><p>Computing $B(s)$ is an interesting challenge, but Farmer John is interested in\nsolving a challenge that is even more interesting: Given a string $t$ of length\nat most $3\\cdot 10^5$ consisting only of characters a-z, compute the sum of\n$B(s)$ over all contiguous substrings $s$ of $t$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe input consists of a nonempty string of length at most $3\\cdot 10^5$ whose\ncharacters are all lowercase English letters.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput a single number, the total number of bessies that can be made across all\nsubstrings of the input string.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">bessiebessie\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">14\n</pre>\n\n<p>Twelve substrings contain exactly 1 \"bessie\", and 1 string contains exactly 2\n\"bessie\"s, so the total is $12\\cdot 1 + 1 \\cdot 2 = 14$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">abcdefghssijebessie\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">28\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-5: The string has length at most 5000.</li><li>Inputs 6-12: No\nadditional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1328"
    },
    {
      "title": "Problem 1. Bovine Acrobatics",
      "subtitle": "USACO 2023 December Contest, Silver",
      "id": 1350,
      "year": "2023",
      "division": "silver",
      "number": "1",
      "problem": "\n<p>Farmer John has decided to make his cows do some acrobatics! First,  FJ weighs\nhis cows and finds that they have $N$ ($1\\le N\\le 2\\cdot 10^5$) distinct\nweights. In particular, for each $i\\in [1,N]$, $a_i$ of his cows have a weight\nof $w_i$\n($1\\le a_i\\le 10^9, 1\\le w_i\\le 10^9$).\n\n</p><p>His most popular stunt involves the cows forming <em>balanced towers</em>. A\n<em>tower</em> is a sequence of cows where each cow is stacked on top of the next.\nA tower is <em>balanced</em> if every cow with a cow directly above it has weight\nat least $K$ ($1\\le K\\le 10^9$) greater than the weight of the cow directly\nabove it. Any cow can be part of at most one balanced tower.\n\n</p><p>If FJ wants to create at most $M$ ($1 \\le M \\le 10^9$) balanced towers of cows, at most\nhow many cows can be part of some tower?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains three space-separated integers, $N$, $M$, and $K$.\n\n<p>The next $N$ lines contain two space-separated integers, $w_{i}$ and $a_i$. It\nis guaranteed that all $w_i$ are distinct.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the maximum number of cows in balanced towers if FJ helps the cows form towers\noptimally.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 5 2\n9 4\n7 6\n5 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">14\n</pre>\n\n<p>FJ can create four balanced towers with cows of weights 5, 7, and 9, and one balanced tower with\ncows of weights 5 and 7.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 5 3\n5 5\n7 6\n9 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>FJ can create four balanced towers with cows of weights 5 and 9, and one balanced tower with a cow\nof weight 7. Alternatively, he can create four balanced towers with cows of weights 5 and\n9, and one balanced tower with a cow of weight 5.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In inputs 3-5, $M \\leq 5000$ and the total number of cows does not exceed\n$5000$.</li><li>In inputs 6-11, the total number of cows does not exceed $2\\cdot 10^5$.</li><li>Inputs 12-17 have no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Eric Hsu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1350"
    },
    {
      "title": "Problem 2. Cycle Correspondence",
      "subtitle": "USACO 2023 December Contest, Silver",
      "id": 1351,
      "year": "2023",
      "division": "silver",
      "number": "2",
      "problem": "\n<p>Farmer John has $N$ barns ($3\\le N\\le 5\\cdot 10^5$), of which $K$\n($3\\le K\\le N$) distinct pairs of barns are connected.\n\n</p><p>First, Annabelle assigns each barn a distinct integer label in the range\n$[1,N]$, and observes that the barns with labels $a_1,\\dots,a_K$  are connected\nin a cycle, in that order. That is, barns $a_i$ and $a_{i+1}$ are connected for\nall $1\\le i&lt;K$, and barns $a_K$ and $a_1$ are also connected. All $a_i$ are\ndistinct.\n\n</p><p>Next, Bessie also assigns each barn a distinct integer label in the range\n$[1,N]$ and observes that the barns with labels $b_1,\\dots,b_K$ are connected in\na cycle, in that order. All $b_i$ are distinct.\n\n</p><p>Some (possibly none or all) barns are assigned the same label by Annabelle and\nBessie. Compute the maximum possible number of barns that are assigned the same\nlabel by Annabelle and Bessie.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $K$.\n\n<p>The next line contains $a_1,\\dots, a_K$. \n\n</p><p>The next line contains $b_1,\\dots, b_K$.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe maximum number of fixed points.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 3\n1 2 3\n2 3 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\n\n<p>Annabelle and Bessie could have assigned the same label to every barn.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 3\n1 2 3\n4 5 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n</pre>\n\n<p>Annabelle and Bessie could not have assigned the same label to any barn.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 4\n1 2 3 4\n4 3 2 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>Annabelle and Bessie could have assigned labels $2,3,4,6$ to the same barns.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 4-5: $N \\le 8$</li><li>Inputs 6-8: $N \\le 5000$</li><li>Inputs\n9-15: No additional constraints</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1351"
    },
    {
      "title": "Problem 3. Target Practice",
      "subtitle": "USACO 2023 December Contest, Silver",
      "id": 1352,
      "year": "2023",
      "division": "silver",
      "number": "3",
      "problem": "\n<p>Bessie is a robovine, also known as a cowborg. She is on a number line trying to\nshoot a series of $T$ $(1 \\leq T \\leq 10^5)$ targets located at distinct\npositions. Bessie  starts at position $0$ and follows a string of $C$\n$(1 \\leq C \\leq 10^5)$ commands,  each one of L, F, or R:\n\n</p><p></p><ul><li>L: Bessie moves one unit to the left.</li><li>R: Bessie moves one unit to the right.</li><li>F: Bessie fires. If there is a target at Bessie's current position, it is\nhit and destroyed, and cannot be hit again.</li></ul>\n\n<p>If you are allowed to change up to one command in the string  to a different\ncommand before Bessie starts following it, what is the maximum number of targets\nthat Bessie can hit?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$ and $C$.\n\n<p>The next line contains the locations of the $T$ targets, distinct integers in the range\n$[-C,C]$.\n\n</p><p>The next line contains the command string of length $C$, containing only the\ncharacters F, L, and R.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint the maximum number of targets that Bessie can hit after changing up to one\ncommand  in the string.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 7\n0 -1 1\nLFFRFRR\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>If you make no changes to the string, Bessie will hit two targets:\n\n</p><p></p><pre>Command | Position | Total Targets Hit\n--------+----------+-------------------\nStart   |  0       | 0 \nL       | -1       | 0\nF       | -1       | 1\nF       | -1       | 1 (can't destroy target more than once)\nR       |  0       | 1\nF       |  0       | 2\nR       |  1       | 2\nR       |  2       | 2\n</pre>\n\n<p>If you change the last command from R to F, Bessie will hit all three targets:\n\n</p><p></p><pre>Command | Position | Total Targets Hit\n--------+----------+-------------------\nStart   |  0       | 0 \nL       | -1       | 0\nF       | -1       | 1\nF       | -1       | 1 (can't destroy target more than once)\nR       |  0       | 1\nF       |  0       | 2\nR       |  1       | 2\nF       |  1       | 3\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 5\n0\nFFFFF\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>If the commands are left unchanged, the only target at 0 will be destroyed.\nSince a target cannot be destroyed multiple times, the answer is 1.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 6\n1 2 3 4 5\nFFRFRF\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 4-6: $T,C \\le 1000$</li><li>Inputs 7-15: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Suhas Nagar\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1352"
    },
    {
      "title": "Problem 1. Cowmpetency",
      "subtitle": "USACO 2024 January Contest, Silver",
      "id": 1374,
      "year": "2024",
      "division": "silver",
      "number": "1",
      "problem": "\n<p>Farmer John is hiring a new herd leader for his cows. To that end, he has\ninterviewed $N$ ($2 \\leq N \\leq 10^5$) cows for the position. After interviewing\nthe $i$th candidate, he assigned the candidate an integer \"cowmpetency\" score\n$c_i$ ranging from $1$ to $C$ inclusive ($1 \\leq C \\leq 10^9$) that is\ncorrelated with their leadership abilities.\n\n</p><p>Because he has interviewed so many cows, Farmer John does not remember all of\ntheir cowmpetency scores. However, he does remembers $Q$ ($1 \\leq Q &lt; N$) pairs\nof numbers $(a_j, h_j)$ where cow $h_j$ was the first cow with a <strong>strictly\ngreater</strong> cowmpetency score than cows $1$ through $a_j$ (so\n$1 \\leq a_j &lt; h_j \\leq N$).\n\n</p><p>Farmer John now tells you the sequence $c_1, \\dots, c_N$ (where $c_i = 0$ means\nthat he has forgotten cow $i$'s cowmpetency score) and the $Q$ pairs of\n$(a_j, h_j)$. Help him determine the <strong>lexicographically smallest</strong> sequence\nof cowmpetency scores consistent with this information, or that no such sequence\nexists! A sequence of scores is lexicographically smaller than another sequence\nof scores if it assigns a smaller score to the first cow at which the two\nsequences differ.\n\n</p><p>Each input contains $T$ $(1 \\leq T \\leq 20)$ independent test cases. The sum of\n$N$ across all test cases is guaranteed to not exceed  $3 \\cdot 10^5$. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$, the number of independent test cases.  Each test\ncase is described as follows:\n<ol><li>First, a line containing $N$, $Q$, and $C$.</li><li>Next, a line containing\nthe sequence $c_1, \\dots, c_N$ $(0 \\leq c_i \\leq C)$.</li><li>Finally, $Q$\nlines each containing a pair $(a_j, h_j)$. It is guaranteed that all $a_j$\nwithin a test case are distinct.</li></ol>\n\n<p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output a single line containing the lexicographically\nsmallest sequence of cowmpetency scores consistent with what Farmer John remembers, or $-1$ if such a sequence does not\nexist.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1\n7 3 5\n1 0 2 3 0 4 0\n1 2\n3 4\n4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 2 2 3 4 4 1\n</pre>\nWe can see that the given output satisfies all of Farmer John's remembered\npairs.\n\n<p></p><ul><li>$\\max(c_1) = 1$, $c_2 = 2$ and $1&lt;2$ so the first pair is satisfied</li><li>$\\max(c_1,c_2,c_3) = 2$, $c_4 = 3$ and $2&lt;3$ so the second pair is\nsatisfied</li><li>$\\max(c_1,c_2,c_3,c_4) = 3$, $c_5 = 4$ and $3&lt;4$ so the third\npair is satisfied</li></ul>\nThere are several other sequences consistent with Farmer John's memory, such as\n<pre>1 2 2 3 5 4 1\n1 2 2 3 4 4 5\n</pre>\nHowever, none of these are lexicographically smaller than the given output.\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n7 6 10\n0 0 0 0 0 0 0\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n8 4 9\n0 0 0 0 1 6 0 6\n1 3\n6 7\n4 7\n2 3\n2 1 1\n0 0\n1 2\n10 4 10\n1 2 0 2 1 5 8 6 0 3\n4 7\n1 2\n5 7\n3 7\n10 2 8\n1 0 0 0 0 5 7 0 0 0\n4 6\n6 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 2 3 4 5 6 7\n1 1 2 6 1 6 7 6\n-1\n1 2 5 2 1 5 8 6 1 3\n-1\n</pre>\n\n<p>In test case 3, since $C=1$, the only potential sequence is\n</p><pre>1 1\n</pre>\nHowever, in this case, cow 2 does not have a greater score than cow 1, so we\ncannot satisfy the condition.\n\n<p>In test case 5, $a_1$ and $h_1$ tell us that cow 6 is the first cow to have a\nstrictly greater score than cows 1 through 4. Therefore, the largest score for\ncows 1 through 6 is that of cow 6:  5. Since cow 7 has a score of 7, cow 7 is\nthe first cow to have a greater score than cows 1 through 6. So, the second\nstatement that cow 9 is the first cow to have a greater score than cows 1\nthrough 6 cannot be true.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 3 satisfies $N \\leq 10$ and $Q, C \\leq 4$.</li><li>Inputs 4-8 satisfy\n$N \\leq 1000$.</li><li>Inputs 9-12 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Suhas Nagar\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1374"
    },
    {
      "title": "Problem 2. Potion Farming",
      "subtitle": "USACO 2024 January Contest, Silver",
      "id": 1375,
      "year": "2024",
      "division": "silver",
      "number": "2",
      "problem": "\n<p>You are playing your favorite mobile game and you are trying to farm potions so\nthat you  may have a chance at defeating the legendary cow boss. The game map is a\nseries of $N$ $(2 \\leq N \\leq 10^5)$ rooms labeled $1\\dots N$  connected by\n$N-1$ edges that form a tree. \n\n</p><p>You can explore the map by making a series of \"traversals\". A traversal is a\nsimple path from room $1$ to any other room in the tree. Once you finish one\ntraversal, you can start another traversal from room $1$. The map is complete\nonce every one of its rooms is visited by at least one traversal. Your main goal\nis to complete the map in the minimum number of traversals. \n\n</p><p>Your secondary goal is to farm as many potions as possible. Before a traversal\nbegins, a potion will spawn at some room in the map. You can pick up the potion\nby visiting the room that the potion spawned at in the current traversal. If you\ndo not pick up the potion, then it will disappear once the current traversal\nends, so you cannot pick it up in future traversals.\n\n</p><p>As you are a smart programmer, after looking at the game files, you were able to\nfigure out where the potions will appear before your next $N$ traversals. If you\ncomplete the map in the minimum number of traversals, what is the maximum amount\nof potions that you can farm from the map?  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of the input contains an integer $N$, denoting  the number of\nrooms in the map.\n\n<p>Then follow $N$ space-separated integers $p_1 \\: p_2 \\: \\ldots \\: p_N$ where \n$1 \\leq p_i \\leq N$, where $p_i$ is the room that a potion will appear at before\nthe $i$th traversal.\n\n</p><p>Finally, $N-1$ lines follow with two space-separated integers $a \\: b$\n$(1 \\leq a, b \\leq N)$  representing an edge between rooms $a$ and $b$. It is\nguaranteed that these edges form a tree.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput one line containing a single integer, the maximum amount of potions  that\nyou can farm from the map in the minimum number of traversals. \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n5 4 3 2 1\n1 2\n1 3\n3 4\n3 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\nIn this case, the minimum number of traversals required to complete the map is\n$3$.\n\n<p>One optimal plan that picks up two potions in three traversals is as follows:\n</p><ul><li>Traversal 1: $1 \\rightarrow 3 \\rightarrow 5$ (Pick up potion at 5)</li><li>Traversal 2: $1 \\rightarrow 3 \\rightarrow 4$ (Pick up potion at 4)</li><li>Traversal 3: $1 \\rightarrow 2$ (Forced to complete the map and ignore potion\nat 3)</li></ul>\n\n<p>Alternatively, we could have also planned our traversals as follows:\n</p><ul><li>Traversal 1: $1 \\rightarrow 2$ (no potions)</li><li>Traversal 2: $1 \\rightarrow 3 \\rightarrow 4$ (Pick up potion at 4)</li><li>Traversal 3: $1 \\rightarrow 3 \\rightarrow 5$ (Pick up potion at 3)</li></ul>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-7: $N\\le 1000$</li><li>Inputs 8-15: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Suhas Nagar\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1375"
    },
    {
      "title": "Problem 3. Cowlendar",
      "subtitle": "USACO 2024 January Contest, Silver",
      "id": 1376,
      "year": "2024",
      "division": "silver",
      "number": "3",
      "problem": "\n<p>Bessie has woken up on a strange planet.  In this planet, there are $N$\n($1\\le N\\le 10^4$) months, with $a_1, \\ldots, a_N$ days, respectively\n($1\\leq a_i \\leq 4 \\cdot 10^9$, all $a_i$ are integers). In addition, on the\nplanet, there are also weeks, where each week is $L$ days, with $L$ being a\npositive integer. Interestingly, Bessie knows the following:\n</p><ul><li> For the correct $L$, each month is at least $4$ weeks long. </li><li> For\nthe correct $L$,  there are at most $3$ distinct values of $a_i\\bmod L$.</li></ul>\n\n<p>Unfortunately, Bessie has forgotten what $L$ is! Help her by printing the sum of\nall possible values of $L$.\n\n</p><p><strong>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains a single integer $N$. The second line contains $N$\nspace-separated integers, $a_1, \\ldots, a_N$. \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nA single integer, the sum of all possible values of $L$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">12\n31 28 31 30 31 30 31 31 30 31 30 31\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">28\n</pre>\n\n<p>The possible values of $L$ are 1, 2, 3, 4, 5, 6, and 7.  For example, $L=7$ is\nvalid because each month is at least length $4 \\cdot 7 = 28$ days long, and each\nmonth is either 0, 2, or 3 mod 7. \n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n31 35 28 29\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">23\n</pre>\n\n<p>The possible values of $L$ are 1, 2, 3, 4, 6, and 7. For example, $L=6$ is valid\nbecause each month is at least length $4 \\cdot 6 = 24$ days long, and each month\nis either 1, 4, or 5 mod 6. \n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-4: $1 \\leq a_i \\leq 10^6$</li><li>Inputs 5-14: No additional\nconstraints</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1376"
    },
    {
      "title": "Problem 1. Target Practice II",
      "subtitle": "USACO 2024 February Contest, Silver",
      "id": 1398,
      "year": "2024",
      "division": "silver",
      "number": "1",
      "problem": "\n<p><strong>Note: The time limit for this problem is 2.5s, 1.25 times the default.</strong>\n\n</p><p><strong>Note: The large size of integers involved in this problem may require the use\nof 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n\n</p><p>The Paris Moolympics are coming up and Farmer John is training his team of cows\nin archery! He has set up the following exercise on the 2D coordinate plane.\n\n</p><p>There are $N (1 \\leq N \\leq 4 \\cdot 10^4)$ axis-aligned rectangular targets and\n$4N$ cows. Every cow must be assigned to a different target vertex. At moment\n$i$, for\n$1 \\leq i \\leq N$:\n</p><ol><li> Target $i$ appears.</li><li> The $4$ cows assigned to its vertices shoot\nat them.</li><li> If a cow's shot passes through the interior of the target\nbefore it hits the assigned vertex or misses, the cows <strong>fail</strong> the\nexercise.</li><li> The target disappears to make space for the next one.</li></ol>\n\n<p>Each cow is located on the $y$-axis $(x = 0)$, and each target is a rectangle\nwhere target $i$ has its lower left coordinate at $(X_1, y_1^{(i)})$ and its\nupper right coordinate at $(x_2^{(i)}, y_2^{(i)})$. The coordinates also satisfy\n$1 \\leq X_1 &lt; x_2^{(i)}\\leq 10^9$ and $1 \\leq y_1^{(i)} &lt;  y_2^{(i)} \\leq 10^9$\n(Note: $X_1$ is the same for every target).\n\n</p><p>In addition, each cow has a \"focus\" angle they are working on. Therefore, they\nwill turn at a specific angle when shooting. Given that their shot travels in a\nstraight line from their position towards their assigned vertex, the trajectory\nof cow $i$'s arrow can be described by $s_i$ $(0 &lt; |s_i| &lt; 10^9)$, the slope of\nthe trajectory.\n\n</p><p>So that he can carefully examine the cows' technique, Farmer John wants to\nminimize the distance between the furthest cows. If Farmer John were to\noptimally assign each cow to a target vertex and place them on the $y$-axis, can\nyou help him determine what the minimum distance between the furthest cows would\nbe or if the cows will always fail the exercise?\n\n</p><p>Each input contains $T$ ($1 \\leq T \\leq 10$) independent test cases. The sum of\n$N$ across all test cases is guaranteed to not exceed $4\\cdot 10^4$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$ ($1 \\leq T \\leq 10$), the number of independent test\ncases. Each test case is described as follows:\n\n<p>The first line of each test case contains two integers, $N$ and $X_1$, the\nnumber of targets and the left-most $x$-coordinate of the targets respectively.\n\n</p><p>This is followed by $N$ lines with the $i$-th line consisting of three integers,\n$y_1^{(i)}$, $y_2^{(i)}$, and $x_2^{(i)}$, the lower $y$-coordinate, the upper\n$y$-coordinate, and the right $x$-coordinate of the $i$-th target respectively.\n\n</p><p>The last line consists of $4N$ integers, $s_1, s_2, \\dots, s_{4N}$ where $s_i$\ndenotes the slope of cow $i$'s shot trajectory.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe minimum possible distance between the furthest cows or $-1$ if the cows will\nalways fail the exercise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n2 1\n1 3 6\n4 6 3\n1 -1 2 -2 3 -3 4 -4\n2 1\n1 3 6\n4 6 3\n1 1 2 2 3 3 4 4\n2 1\n1 3 3\n4 6 3\n1 -1 2 -2 3 -3 4 -4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">17\n-1\n11\n</pre>\n\n<p>One optimal assignment for test case 1 is the following target vertices for cows\n1-8 respectively:\n</p><div class=\"math\">$$(6, 1), (6,3), (3,4), (3,6), (1,4), (1,3), (1,6), (1,1)$$</div>\nThis gives the following $y$ locations for cows 1-8 respectively:\n<div class=\"math\">$$-5, 9, -2, 12, 1, 6, 2, 5$$</div>\n\n<p>This gives a minimum distance of $12-(-5) = 17$.\n\n</p><p>One reason the second test case is impossible is because it is impossible to\nshoot the vertex at $(6, 3)$ (the top right vertex of target 1) without the shot\npassing through the interior of target 1.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 2: $|S_i|$ is the same for all $1 \\leq i \\leq 4N$.</li><li>Input 3-9:\nThe sum of $N$ across all testcases is at most $1000$.</li><li>Inputs 10-15: No\nadditional constraints.</li></ul>\n\n<p></p></div>\n\n<p>Problem credits: Suhas Nagar\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1398"
    },
    {
      "title": "Problem 2. Test Tubes",
      "subtitle": "USACO 2024 February Contest, Silver",
      "id": 1399,
      "year": "2024",
      "division": "silver",
      "number": "2",
      "problem": "\n<p>Bessie has recently gotten into chemistry. At the moment, she has two different\ncolors $1$ and $2$ of various liquids that don't mix well with one another. She\nhas two test tubes of infinite capacity filled with $N$ $(1 \\leq N \\leq 10^5)$\nunits each of some mixture of liquids of these two colors. Because the liquids\ndon’t mix,  once they settled, they divided into layers of separate colors.\nBecause of this, the two tubes can be viewed as strings $f_1f_2\\ldots f_N$ and\n$s_1s_2\\ldots s_N$  where $f_i$ represents the color of the liquid that is $i$\nunits from the bottom of the first tube, and $s_i$ represents the color of the\nliquid that is $i$ units from the bottom of the second tube. It is guaranteed\nthat there is at least one unit of each color of liquid.\n\n</p><p>Bessie wants to separate these liquids so that each test tube contains all units\nof one color of liquid. She has a third empty beaker of infinite capacity to\nhelp her in this task. When Bessie makes a \"pour\", she moves all liquid of color\n$i$ at the top of one test tube or beaker into another.\n\n</p><p>Determine the minimum number of pours to separate all the liquid into the two\ntest tubes, and the series of moves needed to do so. It does not matter which\ntest tube ends up with which color, but the beaker must be empty..\n\n</p><p>There will be $T$ ($1 \\leq T \\leq 10$) test cases, with a parameter $P$ for each\ntest case.\n\n</p><p>Suppose the minimum number of pours to separate the liquids into the original\ntubes is $M$.\n\n</p><p></p><ul><li>If $P=1$, you will receive credit if you print only $M$.</li><li>If $P=2$, you will receive credit if you print an integer $A$ such that\n$M \\leq A \\leq M+5$, followed by $A$ lines that construct a solution with that\nnumber of moves. Each line should contain the source and the destination tube\n($1$, $2$, or $3$ for the beaker). The source tube must be nonempty before the\nmove and a tube may not be poured into itself.</li><li>If $P=3$, you will receive credit if you print $M$, followed by a valid\nconstruction using that number of moves.</li></ul>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$, the. number of test cases. For each test case, the\nnext line contains $N$ and $P$ representing the amount each test tube is\ninitially filled to, and the query type. The following line contains\n$f_1f_2f_3\\ldots f_N$ representing  the first test tube. $f_i \\in \\{ 1,2 \\}$ and\n$f_1$ represents the bottom of the test tube. The subsequent line contains\n$s_1s_2s_3\\ldots s_N$ representing the second test tube. $s_i \\in \\{ 1,2 \\}$ and\n$s_1$ represents the bottom of the test tube.\n\n<p>It is guaranteed that there will be at least one $1$ and one $2$ across both\ninput strings.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, you will print a single number representing the minimum\npours to separate the liquid in the test tubes. Depending on the query type, you\nmay also need to provide a valid construction.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n4 1\n1221\n2211\n4 2\n1221\n2211\n4 3\n1221\n2211\n6 3\n222222\n111112\n4 3\n1121\n1222\n4 2\n1121\n1222\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n4\n1 2\n1 3\n2 1\n3 2\n4\n1 2\n1 3\n2 1\n3 2\n1\n2 1\n5\n2 3\n1 2\n1 3\n1 2\n3 1\n6\n2 3\n1 2\n1 3\n1 2\n2 1\n3 2\n</pre>\nIn the first three test cases, the minimum number of pours to separate the tubes\nis $4$. We can see how the following moves separate the test tubes:\n\n<p>Initial state:\n</p><pre>1: 1221\n2: 2211\n3: \n</pre>\nAfter the move \"1 2\":\n<pre>1: 122\n2: 22111\n3: \n</pre>\nAfter the move \"1 3\":\n<pre>1: 1\n2: 22111\n3: 22\n</pre>\nAfter the move \"2 1\":\n<pre>1: 1111\n2: 22\n3: 22\n</pre>\nAfter the move \"3 2\":\n<pre>1: 1111\n2: 2222\n3:\n</pre>\n\n<p>In the last test case, the minimum amount of pours is $5$. However, since $P=2$,\nthe given construction with $6$ moves is valid since it is within $5$ pours from\nthe optimal answer.\n</p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-6: $P = 1$</li><li>Inputs 7-11: $P=2$</li><li>Inputs 12-21: No additional constraints.</li></ul>\n\n<p>Additionally, it is guaranteed that $T=10$ for all inputs besides the sample.\n</p></div>\n\n<p>\n\n</p><p>Problem credits: Suhas Nagar\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1399"
    },
    {
      "title": "Problem 3. Moorbles",
      "subtitle": "USACO 2024 February Contest, Silver",
      "id": 1400,
      "year": "2024",
      "division": "silver",
      "number": "3",
      "problem": "\n<p>Bessie and Elsie are playing a game of Moorbles. The game works as follows:\nBessie and Elsie each start out with some amount of marbles. Bessie holds out\n$A$ of her marbles in her hoof and Elsie guesses if $A$ is Even or Odd. If Elsie\nis correct, she wins the $A$ marbles from Bessie and if she guesses incorrectly,\nshe loses $A$ of her marbles to Bessie (if Elsie has less than $A$ marbles, she\nloses all her marbles). A player loses when they lose all of their marbles.\n\n</p><p>After some amount of turns in the game, Elsie has $N$ $(1 \\leq N \\leq 10^9)$\nmarbles. She thinks it is hard to win, but she is playing to not lose. After\nbeing around Bessie enough, Elsie has a good read on Bessie's habits and\nrecognizes that on turn $i$, there are only $K$ $(1 \\leq K \\leq 4)$ different\namounts of marbles that Bessie may put out. There are only $M$\n$(1 \\leq M \\leq 3 \\cdot 10^5)$ turns before Bessie gets bored and stops playing.\nCan you identify a lexicographically minimum turn sequence such that Elsie will\nnot lose, regardless of how Bessie plays?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains a single integer $T$ ($1 \\leq T \\leq 10$) representing\nthe number of test cases. Each test case is described as follows:\n<ul><li> First, one line containing three integers $N$, $M$, and $K$, representing\nthe number of marbles Elsie has, the number of turns, and the number of\npotential moves Bessie can make respectively.</li><li>Then, $M$ lines where\nline $i$ contains $K$ distinct space separated integers\n$a_{i,1} \\; a_{i,2} \\ldots a_{i,K}$ ($1 \\leq a_{i, j} \\leq 10^3$) representing\nthe possible amounts of marbles that Bessie might play on turn $i$.</li></ul>\nIt is guaranteed that the sum of $M$ over all test cases is at most\n$3 \\cdot 10^5$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output the lexicographically minimum move sequence for Elsie\nto guarantee not losing, or $-1$ if she will lose. The move sequence should be\non a single line and consist of $M$ space-separated tokens each equal to either\n\"Even\" or \"Odd\".\n\n<p>Note: \"Even\" is lexicographically smaller than \"Odd\".\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n10 3 2\n2 5\n1 3\n1 3\n10 3 3\n2 7 5\n8 3 4\n2 5 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">Even Even Odd\n-1\n</pre>\n\n<p>In the first case, the only lexicographically smaller sequence of moves is \"Even\nEven Even\", but Bessie can make Elsie lose in that case by first playing $5$,\nwhich reduces Elsie's number of marbles from $10$ to $5$, then playing $3$, which\nreduces Elsie's number of marbles from $5$ to $2$, then playing $3$, which wipes out\nall of her marbles.\n\n</p><p>If Elsie instead plays the correct move sequence \"Even Even Odd\", then if Bessie\nplays the same way, at the end when she plays $3$, Elsie will gain those $3$\nmarbles, increasing her number of marbles to $5$. It can further be shown that\nBessie cannot play in a different way to take all of Elsie's marbles given that\nElsie plays \"Even Even Odd\".\n\n</p><p>In the second case, it can be shown that for any move sequence that Elsie could\nchoose, Bessie can play in a way to take all of Elsie's marbles.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1\n20 8 2\n3 5\n3 5\n3 5\n3 5\n3 5\n3 5\n3 5\n3 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">Even Even Even Odd Even Odd Even Odd\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Input 3: $M \\leq 16$.</li><li>Inputs 4-6: $M \\leq 1000$.</li><li>Inputs\n7-12: No further constraints.</li></ul>\n</div>\n\n<p>\n\n</p><p>Problem credits: Suhas Nagar\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1400"
    }
  ],
  "gold": [
    {
      "title": "Problem 1. Angry Cows",
      "subtitle": "USACO 2016 January Contest, Gold",
      "id": 597,
      "year": "2016",
      "division": "gold",
      "number": "1",
      "problem": "Bessie the cow has designed what she thinks will be the next big hit video game:\n\"Angry Cows\".  The premise,  which she believes is completely original, is that\nthe player shoots a cow with a slingshot  into a one-dimensional scene\nconsisting of a set of hay bales located at various points on a number line; the\ncow lands with sufficient force to detonate the hay bales in close proximity to\nher landing site, which in turn might set of a chain reaction that causes \nadditional hay bales to explode.  The goal is to use a single cow to start a\nchain reaction that detonates all the hay bales.\n\n<p>There are $N$ hay bales located at distinct integer positions\n$x_1, x_2, \\ldots, x_N$ on the number line.  If a cow is launched with power $R$\nlanding at position $x$, this will causes a blast of \"radius $R$\", engulfing all\nhay bales within the range $x-R \\ldots x+R$.  These hay bales then themselves\nexplode (all simultaneously), each with a blast radius of $R-1$.  Any\nnot-yet-exploded bales caught in these blasts then all explode (all\nsimultaneously) with blast radius $R-2$, and so on.\n\n</p><p>Please determine the minimum amount of power $R$ with which a single cow may be\nlaunched so that, if it lands at an appropriate location, it will cause\nsubsequent detonation of every single hay bale in the scene.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file angry.in):</h4>\nThe first line of input contains $N$ ($2 \\leq N \\leq 50,000$).  The remaining\n$N$ lines all  contain integers $x_1 \\ldots x_N$ (each in the range\n$0 \\ldots 1,000,000,000$).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file angry.out):</h4>\nPlease output the minimum power $R$ with which a cow must be launched in order\nto detonate all the hay bales.  Answers should be rounded and printed to exactly\n1 decimal point.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n8\n10\n3\n11\n1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3.0\n</pre>\n\n<p>In this example, a cow launched with power 3 at, say, location 5, will cause\nimmediate detonation of  hay bales at positions 3 and 8.  These then explode\n(simultaneously) each with blast radius 2, engulfing bales at positions 1 and\n10, which next explode (simultaneously) with blast radius 1, engulfing the final\nbale at position 11, which finally explodes with blast radius 0.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=597"
    },
    {
      "title": "Problem 2. Radio Contact",
      "subtitle": "USACO 2016 January Contest, Gold",
      "id": 598,
      "year": "2016",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John has lost his favorite cow bell, and Bessie the cow has agreed to\nhelp him find it!  They both fan out and search the farm along different paths,\nbut stay in contact via radio so they can keep in touch with each-other.\nUnfortunately, the batteries in their radios are running low, so they want to\nplan their movements so as to conserve power, by trying to stay always within a\nshort distance apart.\n\n<p>Farmer John starts at location ($f_x, f_y$) and plans to follow a path\nconsisting of  $N$ steps, each of which is either 'N' (north), 'E' (east), 'S'\n(south), or 'W' west.  Bessie starts at location ($b_x, b_y$) and follows a\nsimilar path consisting of $M$ steps.  Both paths may share points in common. \nAt each time step, Farmer John can either stay put at his current location, or\ntake one step forward along his path, in whichever direction happens to be next\n(assuming he has not yet reached the final location in his path). Bessie can\nmake a similar choice.  At each time step (excluding the first step where they\nstart at their initial locations), their radios consume energy equal to the\nsquare of the distance between them.  \n\n</p><p>Please help FJ and Bessie plan a joint movement strategy that will minimize the\ntotal amount of energy consumed up to and including the final step where both of\nthem first reach the final locations on their respective paths.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file radio.in):</h4>\nThe first line of input contains $N$ and $M$ ($1 \\leq N, M \\leq 1000$).   The\nsecond line contains integers $f_x$ and $f_y$, and the third line contains $b_x$\nand $b_y$ ($0 \\leq f_x, f_y, b_x, b_y \\leq 1000$). The next line contains  a\nstring of length $N$ describing FJ's path, and the final line contains a string\nof  length $M$ describing Bessie's path.\n\n<p>It is guranteed that Farmer John and Bessie's coordinates are always in the\nrange ($0 \\leq x,y \\leq 1000$) throughout their journey.  Note that East points in the positive x direction and North points in the positive y direction.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file radio.out):</h4>\nOutput a single integer specifying the minimum energy FJ and Bessie can use\nduring their travels.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 7\n3 0\n5 0\nNN\nNWWWWWN\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">28\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=598"
    },
    {
      "title": "Problem 3. Lights Out",
      "subtitle": "USACO 2016 January Contest, Gold",
      "id": 599,
      "year": "2016",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John has installed a fancy new milking machine in his barn, but it draws\nso much power that it occasionally causes the power to go out! This happens so\noften that Bessie has memorized a map of the barn, making it easier for her to\nfind the exit of the barn in the dark. She is curious though about the impact of\npower loss on her ability to exit the barn quickly. For example, she wonders how\nmuch farther she might need to walk find the exit in the dark.\n\n<p>The barn is described by a simple (non self-intersecting) polygon with integer \nvertices $(x_1, y_1) \\ldots (x_n, y_n)$ listed in clockwise order.  Its edges\nalternate between horizontal (parallel to the x-axis) and vertical (parallel to\nthe y-axis); the first edge can be of either type. The exit is located at\n$(x_1, y_1)$.  Bessie starts inside the barn located at some vertex \n$(x_i, y_i)$ for $i &gt; 1$.  She can walk only around the perimeter of the barn,\neither clockwise or counterclockwise, Her goal is to travel a minimum distance\nto reach the exit. This is relatively easy to do with the lights on, of course,\nsince she will travel either clockwise or counterclockwise from her current\nlocation to the  exit -- whichever direction is shorter.\n\n</p><p>One day, the lights go out, causing Bessie to panic and forget\nwhich vertex she is standing at.  Fortunately, she still remembers the\nexact map of the barn, so she can possibly figure out her position by\nwalking around and using her sense of touch.  Whenever she is standing\nat a vertex (including at her initial vertex), she can feel the exact\ninterior angle at that vertex, and she can tell if that vertex is the\nexit.  When she walks along an edge of the barn, she can determine the\nexact length of the edge after walking along the entire edge.  Bessie\ndecides on the following strategy: she will move clockwise around the\nperimeter of the barn until she has felt enough angles and edges to\ndeduce the vertex at which she is currently located.  At that point,\nshe can easily figure out how to get to the exit by traveling a\nminimum amount of remaining distance, either by continuing to move\nclockwise or by switching direction and moving counter-clockwise.\n\n</p><p>Please help Bessie determine the largest amount by which her travel distance\nwill increase in the worst case (over all possibilities for her starting vertex)\nfor travel in the dark versus in a lit barn.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file lightsout.in):</h4>\nThe first line of the input contains $N$ ($4 \\leq N \\leq 200$).  Each of the\nnext $N$ lines contains two integers, describing the points $(x_i, y_i)$ in\nclockwise order around the barn.  These integers are in the range\n$-100,000 \\ldots 100,000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file lightsout.out):</h4>\nOutput the largest amount that Bessie's travel distance will increase in the\nworst case starting position using the strategy in the problem statement.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n0 0\n0 10\n1 10\n1 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this example, Bessie can feel that she is initially standing at a 90-degree\nangle, but she cannot tell if she is initially standing at vertex 2, 3, or 4.\nAfter taking a step along one edge in the clockwise direction, Bessie either\nreaches the exit or can uniquely determine her location based on the length of\nthis edge.  The distances she obtains are:\n</p><p>If starting at vertex 2: she travels 12 units in the dark (1 unit to reach\nvertex 3, then 11 units to continue to the exit).  She only needs to travel 10\nunits in a lit barn.  This is an extra distance of 2 for this vertex.\n</p><p>If starting at vertex 3: she travels 11 units in both cases.\n</p><p>If starting at vertex 4: she travels 1 unit in both cases.\n</p><p>The worst-case difference over all starting points is therefore 12 - 10 = 2.  That\nis, Bessie can guarantee that using her strategy, no matter where she starts,\nshe will travel at most 2 extra units of distance farther in the dark than in the light.  \n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=599"
    },
    {
      "title": "Problem 1. Circular Barn",
      "subtitle": "USACO 2016 February Contest, Gold",
      "id": 621,
      "year": "2016",
      "division": "gold",
      "number": "1",
      "problem": "Being a fan of contemporary architecture, Farmer John has built a new barn in the\nshape of a perfect circle.  Inside, the barn consists of a ring of $n$ rooms, \nnumbered clockwise from $1 \\ldots n$ around the perimeter of the barn\n($3 \\leq n \\leq 100,000$).   Each room has doors to its two neighboring rooms,\nand also a door opening to the exterior of the barn.\n\n<p>Farmer John owns $n$ cows, and he wants exactly one cow to end up in each room\nin the barn.  However, the cows, being slightly confused, line up at haphazard\ndoors, with possibly multiple cows lining up at the same door.  Precisely $c_i$\ncows line up outside the door to room $i$, so $\\sum c_i = n$.\n\n</p><p>To manage the process of herding the cows so that one cow ends up in each room,\nFarmer John wants to use the following approach: each cow enters at the door at\nwhich she initially lined up, then walks clockwise through the rooms until she\nreaches a suitable destination.  Given that a cow walking through $d$ doors\nconsumes $d^2$ energy, please determine the minimum amount of energy needed to\ndistribute the cows so one ends up in each room.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cbarn.in):</h4>\nThe first line of input contains $n$.  Each of the remaining $n$ lines contain\n$c_1 \\ldots c_n$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cbarn.out):</h4>\nPlease write out the minimum amount of energy consumed by the cows.  \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10\n1\n0\n0\n2\n0\n0\n1\n2\n2\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">33\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=621"
    },
    {
      "title": "Problem 2. Circular Barn Revisited",
      "subtitle": "USACO 2016 February Contest, Gold",
      "id": 622,
      "year": "2016",
      "division": "gold",
      "number": "2",
      "problem": "After the last debacle involving Farmer John's circular barn, one would think he\nhad learned his lesson about non-traditional architecture.  However, he thinks\nhe can still make his circular barn (from the preceding problem) function\nproperly by allowing multiple cows into each room.  To recap, the barn consists\nof a ring of $n$ rooms,  numbered clockwise from $1 \\ldots n$ around the\nperimeter of the barn ($3 \\leq n \\leq 100$).  Each room has doors to its two\nneighboring rooms, and also a door opening to the exterior of the barn.\n\n<p>Farmer John wants exactly $r_i$ cows to end up in room $i$\n($1 \\leq r_i \\leq 1,000,000$). To herd the cows into the barn in an orderly\nfashion, he plans to unlock $k$ exterior doors ($1 \\leq k \\leq 7$), allowing the\ncows to enter through only those doors. Each cow then walks clockwise through\nthe rooms until she reaches a suitable destination.  Farmer John wants to unlock\nthe exterior doors that will cause his cows to collectively walk a minimum total\namount of distance after entering the barn (they can initially line up however\nthey like outside the $k$ unlocked doors; this does not contribute to the total\ndistance in question).  Please determine the minimum total distance his cows\nwill need to walk, if he chooses the best $k$ such doors to unlock.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cbarn2.in):</h4>\nThe first line of input contains $n$ and $k$.  Each of the remaining $n$ lines\ncontain $r_1 \\ldots r_n$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cbarn2.out):</h4>\nPlease write out the minimum amount of distance the cows need to travel.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 2\n2\n5\n4\n2\n6\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">14\n</pre>\n\n<p>Farmer John can unlock doors 2 and 5.  11 cows enter at door 2 and walk a total\ndistance of 8 to get to rooms 2, 3, and 4.  10 cows enter at door 5 and walk a\ntotal distance of 6 to get to rooms 5, 6 and 1.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=622"
    },
    {
      "title": "Problem 3. Fenced In",
      "subtitle": "USACO 2016 February Contest, Gold",
      "id": 623,
      "year": "2016",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John has realized that many of his cows are strangely agoraphobic (being\nfearful of large open spaces). To try and make them less afraid of grazing, he\npartitions his large field into a number of smaller regions by building\nvertical (north-south) and horizontal (east-west) fences.  \n\n<p>The large field is a rectangle with corner points at $(0,0)$ and $(A,B)$.  FJ\nbuilds $n$ vertical fences  ($0 \\leq n \\leq 2000$) at distinct locations\n$a_1 \\ldots a_n$ ($0 &lt; a_i &lt; A$); each fence runs from $(a_i, 0)$ to $(a_i, B)$.\nHe also builds $m$ horizontal fences ($0 \\leq m \\leq 2000$) at locations\n$b_1 \\ldots b_m$ ($0 &lt; b_i &lt; B$); each such fence runs from $(0, b_i)$ to\n$(A, b_i)$. Each vertical fence crosses through each horizontal fence,\nsubdividing the large field into a  total of $(n+1)(m+1)$ regions.\n\n</p><p>Unfortunately, FJ completely forgot to build gates into his fences, making it\nimpossible for cows to leave their enclosing region and travel around the entire\nfield!  He wants to remedy this situation by removing pieces of some of his\nfences to allow cows to travel between adjacent regions.  He wants to select\ncertain pairs of adjacent regions and remove the entire length of fence\nseparating them; afterwards, he wants cows to be able to wander through these\nopenings so they can travel anywhere in his larger field.\n\n</p><p>For example, FJ might take a fence pattern looking like this:\n\n</p><p></p><pre>+---+--+\n|   |  |\n+---+--+\n|   |  |  \n|   |  |\n+---+--+\n</pre>\n\n<p>and open it up like so:\n\n</p><p></p><pre>+---+--+\n|      |  \n+---+  +  \n|      |  \n|      |\n+---+--+\n</pre>\n\n<p>Please help FJ determine the minimum total length of fencing he must remove to\naccomplish his goal.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file fencedin.in):</h4>\nThe first line of input contains $A$, $B$, $n$, and $m$\n($1 \\leq A, B \\leq 1,000,000,000$). The next $n$ lines contain $a_1 \\ldots a_n$,\nand the next $m$ lines after that contain $b_1 \\ldots b_m$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file fencedin.out):</h4>\nPlease write the minimum length of fencing FJ must remove.  Note that this might\nbe too large to fit into a standard 32-bit integer, so you may need to\nuse 64-bit integer types (e.g., \"long long\" in C/C++).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">15 15 5 2\n2\n5\n10\n6\n4\n11\n3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">44\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=623"
    },
    {
      "title": "Problem 1. Splitting the Field",
      "subtitle": "USACO 2016 US Open Contest, Gold",
      "id": 645,
      "year": "2016",
      "division": "gold",
      "number": "1",
      "problem": "Farmer John's $N$ cows ($3 \\leq N \\leq 50,000$) are all located at distinct\npositions in his two-dimensional field.  FJ wants to enclose all of the cows\nwith a rectangular fence whose sides are parallel to the x and y axes, and he\nwants this fence to be as small as possible so that it contains every cow (cows\non the boundary are allowed).  \n\n<p>FJ is unfortunately on a tight budget due to low milk production last quarter.\nHe would therefore like to enclose a smaller area to reduce maintenance costs,\nand the only way he can see to do this is by building two enclosures instead of\none.  Please help him compute how much less area he needs to enclose, in total,\nby using two enclosures instead of one.  Like the original enclosure, the two\nenclosures must collectively contain all the cows (with cows on boundaries\nallowed), and they must have sides parallel to the x and y axes.  The two\nenclosures are not allowed to overlap -- not even on their boundaries. Note that\nenclosures of zero area are legal, for example if an enclosure has zero width\nand/or zero height.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file split.in):</h4>\nThe first line of input contains $N$.  The next $N$ lines each contain two\nintegers specifying the location of a cow.  Cow locations are positive integers\nin the range $1 \\ldots 1,000,000,000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file split.out):</h4>\nWrite a single integer specifying amount of total area FJ can save by using two \nenclosures instead of one.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n4 2\n8 10\n1 1\n9 12\n14 7\n2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">107\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=645"
    },
    {
      "title": "Problem 2. Closing the Farm",
      "subtitle": "USACO 2016 US Open Contest, Gold",
      "id": 646,
      "year": "2016",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John and his cows are planning to leave town for a long vacation,  and so\nFJ wants to temporarily close down his farm to save money in the meantime.\n\n<p>The farm consists of $N$ barns connected with $M$ bidirectional paths between\nsome pairs of barns ($1 \\leq N, M \\leq 200,000$).  To shut the farm down, FJ\nplans to close one barn at a time.   When a barn closes, all paths adjacent to\nthat barn also close, and can no longer be used. \n\n</p><p>FJ is interested in knowing at each point in time (initially, and after each\nclosing) whether his farm is \"fully connected\" -- meaning that it is possible to\ntravel from  any open barn to any other open barn along an appropriate series of\npaths. Since FJ's farm is initially in somewhat in a state of disrepair, it may\nnot even start out fully connected.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file closing.in):</h4>\nThe first line of input contains $N$ and $M$. The next $M$ lines each describe a\npath in terms of the pair of barns it connects (barns are conveniently numbered\n$1 \\ldots N$).  The final $N$ lines give a permutation of $1 \\ldots N$\ndescribing the order in which the  barns will be closed.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file closing.out):</h4>\nThe output consists of $N$ lines, each containing \"YES\" or \"NO\".  The first line\nindicates whether the initial farm is fully connected, and line $i+1$ indicates\nwhether the farm is fully connected after the $i$th closing.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3\n1 2\n2 3\n3 4\n3\n4\n1\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YES\nNO\nYES\nYES\n</pre>\n\n<p>\n</p><p>Problem credits: Yang Liu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=646"
    },
    {
      "title": "Problem 3. 248",
      "subtitle": "USACO 2016 US Open Contest, Gold",
      "id": 647,
      "year": "2016",
      "division": "gold",
      "number": "3",
      "problem": "Bessie likes downloading games to play on her cell phone, even though she  does\nfind the small touch screen rather cumbersome to use with her large hooves.  \n\n<p>She is particularly intrigued by the current game she is playing.\nThe game starts with a sequence of $N$ positive integers ($2 \\leq N\n\\leq 248$), each in the range $1 \\ldots 40$.  In one move, Bessie can\ntake two adjacent numbers with equal values and replace them a single\nnumber of value one greater (e.g., she might replace two adjacent 7s\nwith an 8).  The goal is to maximize the value of the largest number\npresent in the sequence at the end of the game.  Please help Bessie\nscore as highly as possible!\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file 248.in):</h4>\nThe first line of input contains $N$, and the next $N$ lines give the sequence\nof $N$ numbers at the start of the game.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file 248.out):</h4>\nPlease output the largest integer Bessie can generate.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1\n1\n1\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example shown here, Bessie first merges the second and third 1s to\nobtain the sequence 1 2 2, and then she merges the 2s into a 3.  Note that it is\nnot optimal  to join the first two 1s.\n\n</p><p>\n</p><p>Problem credits: Mark Chen\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=647"
    },
    {
      "title": "Problem 1. Moocast",
      "subtitle": "USACO 2016 December Contest, Gold",
      "id": 669,
      "year": "2016",
      "division": "gold",
      "number": "1",
      "problem": "Farmer John's $N$ cows ($1 \\leq N \\leq 1000$) want to organize an emergency\n\"moo-cast\" system for broadcasting important messages among themselves.  \n\n<p>Instead of mooing at each-other over long distances, the cows decide to equip\nthemselves with walkie-talkies, one for each cow.  These walkie-talkies each\nhave a limited  transmission radius, but cows can relay messages to one-another\nalong a path consisting of several hops, so it is not necessary for every cow to\nbe able to transmit directly to every other cow.\n\n</p><p>The cows need to decide how much money to spend on their walkie-talkies.  If\nthey spend \\$X, they will each get a walkie-talkie capable of transmitting up to\na distance of $\\sqrt{X}$.  That is, the squared distance between two cows must\nbe at most $X$ for them to be able to communicate.\n\n</p><p>Please help the cows determine the minimum integer value of $X$ such that a broadcast\nfrom any cow will ultimately be able to reach every other cow.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file moocast.in):</h4>\nThe first line of input contains $N$.\n\n<p>The next $N$ lines each contain the $x$ and $y$ coordinates of a single cow. \nThese are both integers in the range $0 \\ldots 25,000$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file moocast.out):</h4>\nWrite a single line of output containing the integer $X$ giving the minimum\namount the cows must spend on walkie-talkies.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 3\n5 4\n7 2\n6 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">17\n</pre>\n\n<p>Problem credits: Richard Peng\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=669"
    },
    {
      "title": "Problem 2. Cow Checklist",
      "subtitle": "USACO 2016 December Contest, Gold",
      "id": 670,
      "year": "2016",
      "division": "gold",
      "number": "2",
      "problem": "Every day, Farmer John walks through his pasture to check on the well-being of\neach of his cows.   On his farm he has two breeds of cows, Holsteins and\nGuernseys.  His $H$ Holsteins are conveniently numbered $1 \\ldots H$, and his\n$G$ Guernseys are conveniently numbered $1 \\ldots G$\n($1 \\leq H \\leq 1000, 1 \\leq G \\leq 1000$).  Each cow is located at a point in\nthe 2D plane (not necessarily distinct).\n\n<p>Farmer John starts his tour at Holstein 1, and ends at Holstein $H$.  He wants\nto visit each cow along the way, and for convenience in maintaining his\nchecklist of cows visited so far, he wants to visit the Holsteins and Guernseys\nin the order in which they are numbered.  In the sequence of all $H+G$ cows he\nvisits, the Holsteins numbered $1 \\ldots H$ should appear as a (not necessarily\ncontiguous) subsequence, and likewise for the Guernseys. Otherwise stated, the\nsequence of all $H+G$ cows should be formed by  interleaving the list of\nHolsteins numbered $1 \\ldots H$ with the list of Guernseys numbered\n$1 \\ldots G$.\n\n</p><p>When FJ moves from one cow to another cow traveling a distance of $D$, he\nexpends $D^2$ energy.  Please help him determine the minimum amount of energy\nrequired to visit all his cows according to a tour as described above.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file checklist.in):</h4>\nThe first line of input contains $H$ and $G$, separated by a space.\n\n<p>The next $H$ lines contain the $x$ and $y$ coordinates of the $H$ Holsteins, and\nthe next $G$ lines after that contain coordinates of the Guernseys.  Each\ncoordinate is an integer in the range $0 \\ldots 1000$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file checklist.out):</h4>\nWrite a single line of output, giving the minimum energy required for FJ's tour\nof all the cows.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\n0 0\n1 0\n2 0\n0 3\n1 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">20\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=670"
    },
    {
      "title": "Problem 3. Lasers and Mirrors",
      "subtitle": "USACO 2016 December Contest, Gold",
      "id": 671,
      "year": "2016",
      "division": "gold",
      "number": "3",
      "problem": "For some reason, Farmer John's cows always seem to be running laser light shows.\n\n<p>For their latest show, the cows have procured a large powerful laser -- so large,\nin fact, that they cannot seem to move it easily from the location where it was\ndelivered. They would like to somehow send the light from the laser to the barn\non the other side of FJ's property.  Both the laser and the barn can be\nconsidered to be located at points in the 2D plane on a map of FJ's farm.  The\ncows plan to point the laser so that it sends a beam of light out either\nhorizontally or vertically (i.e.,  aligned with the x or y axes).  They will\nthen bounce this beam off a number of mirrors to direct it to the barn.\n\n</p><p>On the farm there are $N$ fence posts ($1 \\leq N \\leq 100,000$) located at\ndistinct 2D points (also distinct from the laser and the barn) at which the cows\ncan mount mirrors.  The cows can choose not to mount a mirror on a fence post,\nin which case the laser would simply pass straight over the top of the post\nwithout changing direction.  If the cows do mount a mirror on a fence post, they\nalign it diagonally like / or \\ so that it will re-direct a horizontal beam of\nlight in a vertical direction or vice versa.\n\n</p><p>Please compute the minimum possible number of mirrors the cows need to use in\norder to re-direct the laser to the barn.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file lasers.in):</h4>\nThe first line of input contains 5 space-separated integers:\n$N, x_L, y_L, x_B, y_B$, where $(x_L, y_L)$ is the location of the laser and\n$(x_B, y_B)$ is the location of the barn.  All coordinates are between $0$ and\n$1,000,000,000$.\n\n<p>The next $N$ lines each contain the $x$ and $y$ locations of a fence post, both\nintegers in the range\n$0 \\ldots 1,000,000,000$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file lasers.out):</h4>\nPlease output the minimum number of mirrors needed to direct the laser to the\nbarn, or -1 if this is impossible to do.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 0 0 7 2\n3 2\n0 2\n1 6\n3 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=671"
    },
    {
      "title": "Problem 1. Balanced Photo",
      "subtitle": "USACO 2017 January Contest, Gold",
      "id": 693,
      "year": "2017",
      "division": "gold",
      "number": "1",
      "problem": "Farmer John is arranging his $N$ cows in a line to take a photo\n($1 \\leq N \\leq 100,000$).  The height of the $i$th cow in sequence is $h_i$,\nand the heights of all cows are distinct.\n\n<p>As with all photographs of his cows, FJ wants this one to come out looking as\nnice as possible.  He decides that cow $i$ looks \"unbalanced\" if $L_i$ and $R_i$\ndiffer by more than factor of 2, where $L_i$ and $R_i$ are the number of cows\ntaller than $i$ on her left and right, respectively.  That is, $i$ is unbalanced\nif the larger of $L_i$ and $R_i$ is strictly more than twice the smaller of\nthese two numbers.  FJ is hoping that not too many of his cows are unbalanced.\n\n</p><p>Please help FJ compute the total number of unbalanced cows.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file bphoto.in):</h4>\nThe first line of input contains $N$.  The next $N$ lines contain\n$h_1 \\ldots h_N$, each a nonnegative integer at most 1,000,000,000.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file bphoto.out):</h4>\nPlease output a count of the number of cows that are unbalanced.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n34\n6\n23\n0\n5\n99\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example, the cows of heights 34, 5, and 2 are unbalanced.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=693"
    },
    {
      "title": "Problem 2. Hoof, Paper, Scissors",
      "subtitle": "USACO 2017 January Contest, Gold",
      "id": 694,
      "year": "2017",
      "division": "gold",
      "number": "2",
      "problem": "You have probably heard of the game \"Rock, Paper, Scissors\".  The cows like to\nplay a similar game they call \"Hoof, Paper, Scissors\". \n\n<p>The rules of \"Hoof, Paper, Scissors\" are simple.  Two cows play against\neach-other.  They both count to three and then each simultaneously makes a\ngesture that represents either a hoof, a piece of paper, or a pair of scissors. \nHoof beats scissors (since a hoof can smash a pair of scissors), scissors beats\npaper (since scissors can cut paper), and paper beats hoof (since the hoof can\nget a papercut).   For example, if the first cow makes a \"hoof\" gesture and the\nsecond a \"paper\" gesture, then the second cow wins.  Of course, it is also\npossible to tie, if both cows make the same gesture.\n\n</p><p>Farmer John wants to play against his prize cow, Bessie, at $N$ games of  \"Hoof,\nPaper, Scissors\" ($1 \\leq N \\leq 100,000$).  Bessie, being an expert at the\ngame, can predict each of FJ's gestures before he makes it.  Unfortunately,\nBessie, being a cow, is also very lazy.  As a result, she tends to play the same\ngesture multiple times in a row.  In fact, she is only willing to switch\ngestures at most $K$ times over the entire set of games ($0 \\leq K \\leq 20$).  \nFor example, if $K=2$, she might play\n\"hoof\" for the first few games, then switch to \"paper\" for a while, then\nfinish the remaining games playing \"hoof\".\n\n</p><p>Given the sequence of gestures FJ will be playing, please determine the  maximum\nnumber of games that Bessie can win.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file hps.in):</h4>\nThe first line of the input file contains $N$ and $K$. \n\n<p>The remaining $N$ lines contains FJ's gestures, each either H, P, or S.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file hps.out):</h4>\nPrint the maximum number of games Bessie can win, given that she can only change\ngestures at most $K$ times.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 1\nP\nP\nH\nP\nS\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>\n</p><p>Problem credits: Mark Chen and Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=694"
    },
    {
      "title": "Problem 3. Cow Navigation",
      "subtitle": "USACO 2017 January Contest, Gold",
      "id": 695,
      "year": "2017",
      "division": "gold",
      "number": "3",
      "problem": "Bessie has gotten herself stuck on the wrong side of Farmer John's barn again,\nand since her vision is so poor, she needs your help navigating across the barn.\n\n<p>The barn is described by an $N \\times N$ grid of square cells\n($2 \\leq N \\leq 20$), some being empty and some containing impassable haybales. \nBessie starts in the  lower-left corner (cell 1,1) and wants to move to the\nupper-right corner (cell $N,N$).   You can guide her by telling her a sequence\nof instructions, each of which is either \"forward\", \"turn left 90 degrees\", or\n\"turn right 90 degrees\".  You want to issue the shortest sequence of\ninstructions that will guide her to her destination.  If you instruct Bessie to\nmove off the grid (i.e., into the barn wall) or into a haybale, she will not\nmove and will skip to the next command in your sequence.  \n\n</p><p>Unfortunately, Bessie doesn't know if she starts out facing up (towards cell\n1,2) or right (towards cell 2,1).  You need to give the  shortest sequence of\ndirections that will guide her to the goal regardless of which case is true. \nOnce she reaches the goal she will ignore further commands.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cownav.in):</h4>\nThe first line of input contains $N$.\n\n<p>Each of the $N$ following lines contains a string of exactly $N$ characters,\nrepresenting the barn. The first character of the last line is cell 1,1. The\nlast character of the first line is cell N, N. \n\n</p><p>Each character will either be an H to represent a haybale or an E to represent\nan empty square.\n\n</p><p>It is guaranteed that cells 1,1 and $N,N$ will be empty, and furthermore it is\nguaranteed that there is a path of empty squares from cell 1,1 to cell $N, N$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cownav.out):</h4>\nOn a single line of output, output the length of the shortest sequence of\ndirections that will guide Bessie to the goal, irrespective whether she starts\nfacing up or right.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\nEHE\nEEE\nEEE\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>In this example, the instructions \"Forward, Right, Forward, Forward, Left,\nForward, Left, Forward, Forward\" will guide Bessie to the destination\nirrespective of her starting orientation.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=695"
    },
    {
      "title": "Problem 1. Why Did the Cow Cross the Road",
      "subtitle": "USACO 2017 February Contest, Gold",
      "id": 717,
      "year": "2017",
      "division": "gold",
      "number": "1",
      "problem": "Why did the cow cross the road?  Well, one reason is that Farmer John's farm\nsimply has a lot of roads, making it impossible for his cows to travel around\nwithout crossing many of them.\n\n<p>FJ's farm is arranged as an $N \\times N$ square grid of fields\n($3 \\leq N \\leq 100$), with a set of $N-1$ north-south roads and $N-1$ east-west\nroads running through the interior of the farm serving as dividers between the\nfields.  A tall fence runs around the external perimeter, preventing cows from\nleaving the farm.  Bessie the cow can move freely from any field to any other\nadjacent field (north, east, south, or west), as long as she carefully looks\nboth ways before crossing the road separating the two fields.  It takes her $T$\nunits of time to cross a road ($0 \\leq T \\leq 1,000,000$).\n\n</p><p>One day, FJ invites Bessie to visit his house for a friendly game of chess. \nBessie starts out in the north-west corner field and FJ's house is in the\nsouth-east corner field, so Bessie has quite a walk ahead of her. Since she gets\nhungry along the way, she stops at every third field she visits to eat grass\n(not including her starting field, but including possibly the final field in\nwhich FJ's house resides).  Some fields are grassier than others, so the amount\nof time required for stopping to eat depends on the field in which she stops.  \n\n</p><p>Please help Bessie determine the minimum amount of time it will take to reach\nFJ's house.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file visitfj.in):</h4>\nThe first line of input contains $N$ and $T$.  The next $N$ lines each contain\n$N$ positive integers (each at most 100,000) describing the amount of time\nrequired to eat grass in each field.  The first number of the first line is the \nnorth-west corner.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file visitfj.out):</h4>\nPrint the minimum amount of time required for Bessie to travel to FJ's house.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 2\n30 92 36 10\n38 85 60 16\n41 13 5 68\n20 97 13 80\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">31\n</pre>\n\n<p>The optimal solution for this example involves moving east 3 squares (eating the\n\"10\"), then moving south twice and west once (eating the \"5\"), and finally\nmoving south and east to the goal.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=717"
    },
    {
      "title": "Problem 2. Why Did the Cow Cross the Road II",
      "subtitle": "USACO 2017 February Contest, Gold",
      "id": 718,
      "year": "2017",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John raises $N$ breeds of cows ($1 \\leq N \\leq 1000$), conveniently\nnumbered $1 \\ldots N$.  Some pairs of breeds are friendlier than others, a\nproperty that turns out to be easily characterized in terms of breed ID: breeds\n$a$ and $b$ are friendly if $|a - b| \\leq 4$, and unfriendly otherwise.\n\n<p>A long road runs through FJ's farm.  There is a sequence of $N$ fields on\none side of the road (one designated for each breed), and a sequence of $N$ fields on the\nother side of the road (also one for each breed).  To help his cows cross\nthe road safely, FJ wants to draw crosswalks over the road.  Each crosswalk\nshould connect a field on one side of the road to a field on the other side\nwhere the two fields have friendly breed IDs (it is fine for the cows to wander\ninto fields for other breeds, as long as they are friendly).\nEach field can be accessible\nvia at most one crosswalk (so crosswalks don't meet at their endpoints).\n\n</p><p>Given the ordering of $N$ fields on both sides of the road through FJ's farm,\nplease help FJ\ndetermine the maximum number of crosswalks he can draw over his road, such that\nno two intersect.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file nocross.in):</h4>\nThe first line of input contains $N$.  The next $N$\nlines describe the order, by breed ID, of fields on one side of the road; each\nbreed ID is an integer in the range $1 \\ldots N$.  The last $N$ lines describe\nthe order, by  breed ID, of the fields on the other side of the road.  Each\nbreed ID appears exactly once in each ordering.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file nocross.out):</h4>\nPlease output the maximum number of disjoint \"friendly crosswalks\" Farmer John\ncan draw across the road.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n1\n2\n3\n4\n5\n6\n6\n5\n4\n3\n2\n1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=718"
    },
    {
      "title": "Problem 3. Why Did the Cow Cross the Road III",
      "subtitle": "USACO 2017 February Contest, Gold",
      "id": 719,
      "year": "2017",
      "division": "gold",
      "number": "3",
      "problem": "The layout of Farmer John's farm is quite peculiar, with a large circular road\nrunning around the perimeter of the main field on which his cows graze during\nthe day. Every morning, the cows cross this road on their way towards the field,\nand every evening they all cross again as they leave the field and return to the\nbarn.\n\n<p>As we know, cows are creatures of habit, and they each cross the road the same\nway every day.  Each cow crosses into the field at a different point from where\nshe crosses out of the field, and all of these crossing points are distinct from\neach-other. Farmer John owns $N$ cows, conveniently identified with the integer\nIDs $1 \\ldots N$, so there are precisely $2N$ crossing points around the road. \nFarmer John records these crossing points concisely by scanning around the\ncircle clockwise, writing down the ID of the cow for each crossing point,\nultimately forming a sequence with $2N$ numbers in which each number appears\nexactly twice.  He does not record which crossing points are entry points and\nwhich are exit points.\n\n</p><p>Looking at his map of crossing points, Farmer John is curious how many times\nvarious pairs of cows might cross paths during the day.  He calls a pair of cows\n$(a,b)$ a \"crossing\" pair if cow $a$'s path from entry to exit must cross cow\n$b$'s path from entry to exit.  Please help Farmer John count the total number\nof crossing pairs.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file circlecross.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 50,000$), and the next $2N$\nlines describe the cow IDs for the sequence of entry and exit points around the\nfield.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file circlecross.out):</h4>\nPlease print the total number of crossing pairs.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n3\n2\n4\n4\n1\n3\n2\n1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=719"
    },
    {
      "title": "Problem 1. Bovine Genomics",
      "subtitle": "USACO 2017 US Open Contest, Gold",
      "id": 741,
      "year": "2017",
      "division": "gold",
      "number": "1",
      "problem": "Farmer John owns $N$ cows with spots and $N$ cows without spots.  Having just\ncompleted a course in bovine genetics, he is convinced that the spots on his\ncows are caused by mutations in the bovine genome.\n\n<p>At great expense, Farmer John sequences the genomes of his cows.  Each genome is\na string of length $M$ built from the four characters A, C, G, and T.  When he\nlines up the genomes of his cows, he gets a table like the following, shown here\nfor $N=3$ and $M=8$:\n\n</p><p></p><pre>Positions:    1 2 3 4 5 6 7 8\n\nSpotty Cow 1: A A T C C C A T\nSpotty Cow 2: A C T T G C A A\nSpotty Cow 3: G G T C G C A A\n\nPlain Cow 1:  A C T C C C A G\nPlain Cow 2:  A C T C G C A T\nPlain Cow 3:  A C T T C C A T\n</pre>\n\n<p>Looking carefully at this table, he surmises that the sequence from position 2\nthrough position 5 is sufficient to explain spottiness.  That is, by looking at\nthe characters in just these these positions (that is, positions $2 \\ldots 5$),\nFarmer John can predict which of his cows are spotty and which are not. For example,\nif he sees the characters GTCG in these locations, he knows the cow must be spotty.\n\n</p><p>Please help FJ find the length of the shortest sequence of positions that  can\nexplain spottiness.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cownomics.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 500$) and $M$\n($3 \\leq M \\leq 500$). The next $N$ lines each contain a string of $M$\ncharacters; these describe the genomes of the spotty cows.  The final $N$ lines\ndescribe the genomes of the plain cows.  No spotty cow has the same exact \ngenome as a plain cow.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cownomics.out):</h4>\nPlease print the length of the shortest sequence of positions that is sufficient\nto explain spottiness.  A sequence of positions explains spottiness if the\nspottiness trait can be predicted with perfect accuracy among Farmer John's\npopulation of cows by looking at just those locations in the genome.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 8\nAATCCCAT\nACTTGCAA\nGGTCGCAA\nACTCCCAG\nACTCGCAT\nACTTCCAT\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=741"
    },
    {
      "title": "Problem 2. Modern Art",
      "subtitle": "USACO 2017 US Open Contest, Gold",
      "id": 742,
      "year": "2017",
      "division": "gold",
      "number": "2",
      "problem": "Art critics worldwide have only recently begun to recognize the creative genius\nbehind the  great bovine painter, Picowso.\n\n<p>Picowso paints in a very particular way.  She starts with an $N \\times N$ blank\ncanvas, represented by an $N \\times N$ grid of zeros, where a zero indicates an\nempty cell of the canvas.  She then draws $N^2$ rectangles on the canvas, one in\neach of $N^2$ colors (conveniently numbered $1 \\ldots N^2$).  For example, she\nmight start by painting a rectangle in color 2, giving this intermediate canvas:\n\n</p><p></p><pre>2 2 2 0 \n2 2 2 0 \n2 2 2 0 \n0 0 0 0\n</pre>\n\n<p>She might then paint a rectangle in color 7:\n\n</p><p></p><pre>2 2 2 0 \n2 7 7 7 \n2 7 7 7 \n0 0 0 0\n</pre>\n\n<p>And then she might paint a small rectangle in color 3:\n\n</p><p></p><pre>2 2 3 0 \n2 7 3 7 \n2 7 7 7 \n0 0 0 0\n</pre>\n\n<p>Each rectangle has sides parallel to the edges of the canvas, and a rectangle\ncould be as large as the entire canvas or as small as a single cell.  Each color\nfrom $1 \\ldots N^2$ is used exactly once, although later colors might completely\ncover up some of the earlier colors.\n\n</p><p>Unfortunately, since Picowso has become so famous, her painting style is being\ncopied by many of her competitors.  In fact, one competitor, Moonet, is trying\nto make exact copies of Picowso's paintings!\n\n</p><p>Picowso is curious how long it will take to duplicate one of her paintings.  \nShe figures that to do so, one could paint a collection of rectangles on the\ncanvas as long as they don't overlap (since overlapping would cause the paints\nto mix).  After waiting  for these to dry, one could again paint a collection of\ndisjoint rectangles.  This  new set of rectangles can overlap the first set of\nrectangles, since the first set is now dry.  We proceed in this fashion, where\nin each round we paint a set of disjoint rectangles and then wait for them to\ndry.  At most one rectangle of each color can be drawn during the entire\nprocess, since otherwise the result would not be in the authentic Picowso style.\n\n</p><p>Please help determine the minimum number of rounds necessary to duplicate a\ngiven Picowso painting.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file art.in):</h4>\nThe first line of input contains $N$, the size of the canvas\n($1 \\leq N \\leq 40$).  The next $N$ lines describe the final picture of the\ncanvas, each containing $N$ integers that are in the range $0 \\ldots N^2$.  The\ninput is guaranteed to have been drawn as described above, by painting\nsuccessive rectangles in different colors.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file art.out):</h4>\nPlease output the minimum number of rounds required to produce a duplicate of\nthe given painting.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n2 2 3 0\n2 7 3 7\n2 7 7 7\n0 5 5 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example, round one consists of drawing rectangles of colors 2 and 5. \nRound two involves drawing the rectangle of color 7, and the third and final\nround involves drawing the rectangle of color 3 (of course, the rectangle of\ncolor 5 could have been drawn during rounds 2 or 3 also).\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=742"
    },
    {
      "title": "Problem 3. Modern Art 2",
      "subtitle": "USACO 2017 US Open Contest, Gold",
      "id": 743,
      "year": "2017",
      "division": "gold",
      "number": "3",
      "problem": "Having become bored with standard 2-dimensional artwork (and also frustrated at\nothers copying her work), the great bovine artist Picowso has decided to switch\nto a more minimalist, 1-dimensional style.\n\n<p>Although, her paintings can now be described by a 1-dimensional array of colors\nof length $N$ ($1 \\leq N \\leq 100,000$), her painting style remains unchanged:\nshe starts with a blank canvas and layers upon it a sequence of \"rectangles\" of\npaint, which in this 1-dimensional case are simply intervals.  She uses each of\nthe colors $1 \\ldots N$ exactly once, although just as before, some colors might\nend up being completely  covered up by the end.\n\n</p><p>To Picowso's great dismay, her competitor Moonet seems to have figured out how\nto copy even these 1-dimensional paintings, using a similar strategy to the\npreceding problem: Moonet will paint a set of disjoint intervals, wait for them\nto dry, then paint another  set of disjoint intervals, and so on.  Moonet can\nonly paint at most one interval of each color over the entire process.  Please compute\nthe number of such rounds needed for Moonet to copy a given 1-dimensional\nPicowso painting.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file art2.in):</h4>\nThe first line of input contains $N$, and the next $N$ lines contain an integer\nin the range $0 \\ldots N$ indicating the color of each cell in the 1-dimensional\npainting (0 for a blank cell).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file art2.out):</h4>\nPlease output the minimum number of rounds needed to copy this painting, or -1\nif this could not have possibly been an authentic work of Picowso (i.e., if she\ncould not have painted it using a layered sequence of intervals, one of each\ncolor).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n0\n1\n4\n5\n1\n3\n3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this example, the interval of color 1 must be painted in an earlier round\nthan the intervals of colors 4 and 5, so at least two rounds are needed.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=743"
    },
    {
      "title": "Problem 1. A Pie for a Pie",
      "subtitle": "USACO 2017 December Contest, Gold",
      "id": 765,
      "year": "2017",
      "division": "gold",
      "number": "1",
      "problem": "Bessie and Elsie have each baked $N$ pies ($1 \\leq N \\leq 10^5$). Each of the\n$2N$ pies has a tastiness value according to Bessie and a (possibly different)\ntastiness value according to Elsie.\n\n<p>Bessie is thinking about giving one of her pies to Elsie. If Elsie receives a\npie from Bessie, she will feel obligated to give one of her pies to Bessie. So\nas to not appear stingy nor flamboyant, Elsie will try to pick a pie that is at\nleast as tasty (in Elsie's eyes) as the pie she received, but no more than $D$\nunits tastier ($0 \\leq D \\leq 10^9$). Such a pie may not exist, in which case\nElsie will adopt a pseudonym and exile herself to Japan.\n\n</p><p>But if Elsie does give Bessie a pie in return, Bessie will similarly try to give\nElsie a pie which is at least as tasty but no more than $D$ units tastier (in\nBessie's eyes) as the pie Elsie just gave her. Should this be impossible, Bessie\ntoo will exile herself. Otherwise she will give her chosen pie to Elsie. This\ncycle will continue until one of the cows is exiled, an unhappy outcome, or one\nof the cows receives a pie which she accords a tastiness value of $0$, in which\ncase the gift exchange will end and both cows will be happy.\n\n</p><p>Note that a pie may not be gifted twice, nor can either cow return a pie gifted\nto her.\n\n</p><p>For each of the $N$ pies Bessie could select as her initial gift to Elsie, determine the\nminimum number of pies that could possibly be gifted in the resulting exchange\nbefore the cows are happy.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file piepie.in):</h4>\nThe first line contains the two integers $N$ and $D$.\n\n<p>The next $2N$ lines contain two space-separated integers each, respectively\ndenoting the value of a particular pie according to Bessie, and the value of\nthat pie according to Elsie.\n\n</p><p>The first $N$ lines refer to Bessie's pies, and the remaining $N$ lines refer to\nElsie's pies.\n\n</p><p>It is guaranteed that all tastiness values are in the range $[0,10^9]$.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file piepie.out):</h4>\nThere should be $N$ lines in the output. Line $i$ should contain a single\ninteger: the minimum number of pies that could be gifted in a happy gift\nexchange started with Bessie's pie $i$. If no gift exchange starting with pie\n$i$ is happy, then line $i$ should contain the single integer $-1$ instead.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 1\n1 1\n5 0\n4 2\n1 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n1\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=765"
    },
    {
      "title": "Problem 2. Barn Painting",
      "subtitle": "USACO 2017 December Contest, Gold",
      "id": 766,
      "year": "2017",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John has a large farm with $N$ barns ($1 \\le N \\le 10^5$), some of which\nare already painted and some not yet painted. Farmer John wants to paint these \nremaining barns so that all the barns are painted, but he only has three paint colors\navailable.  Moreover, his prize cow Bessie becomes confused if\ntwo barns that are directly reachable from one another are the same color, so he\nwants to make sure this situation does not happen.\n\n<p>It is guaranteed that the connections between the $N$ barns do not form\nany 'cycles'.  That is, between any two barns, there is at most one sequence\nof connections that will lead from one to the other.\n\n</p><p>How many ways can Farmer John paint the remaining yet-uncolored barns?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file barnpainting.in):</h4>\n\n<p>The first line contains two integers $N$ and $K$ ($0 \\le K \\le N$), respectively\nthe number of barns on the farm and the number of barns that have already been\npainted.\n\n</p><p>The next $N-1$ lines each contain two integers $x$ and $y$ \n($1 \\le x, y \\le N, x \\neq y$) describing a path directly connecting barns $x$\nand $y$.\n\n</p><p>The next $K$ lines each contain two integers $b$ and $c$ ($1 \\le b \\le N$,\n$1 \\le c \\le 3$) indicating that barn $b$ is painted with color $c$.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file barnpainting.out):</h4>\n\n<p>Compute the number of valid ways to paint the remaining barns, modulo\n$10^9 + 7$, such that no two barns which are directly connected are the same\ncolor.\n\n</p><p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 1\n1 2\n1 3\n1 4\n4 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n</pre>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=766"
    },
    {
      "title": "Problem 3. Haybale Feast",
      "subtitle": "USACO 2017 December Contest, Gold",
      "id": 767,
      "year": "2017",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John is preparing a delicious meal for his cows! In his barn, he has $N$\nhaybales ($1 \\le N \\le 100,000$). The $i$th haybale has a certain flavor $F_i$\n($1 \\le F_i \\le 10^9$) and a certain spiciness $S_i$ ($1 \\le S_i \\le 10^9$). \n\n<p>The meal will consist of a single course, being a contiguous interval containing\none or more consecutive haybales (Farmer John cannot change the order of the\nhaybales).  The total flavor of the meal is the sum of the flavors in the\ninterval. The spiciness of the meal is the maximum spiciness of all haybales in\nthe interval.\n\n</p><p>Farmer John would like to determine the minimum spiciness his single-course meal\ncould achieve, given that it must have a total flavor of at least $M$\n($1 \\le M \\le 10^{18}$).  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file hayfeast.in):</h4>\nThe first line contains the integers $N$ and $M$, the number of haybales and the\nminimum total flavor the meal must have, respectively. The next $N$ lines \ndescribe the $N$ haybales with two integers per line, first the flavor $F$ and\nthen the spiciness $S$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file hayfeast.out):</h4>\nPlease output the minimum spiciness in a single course meal that satisfies the minimum flavor\nrequirement. There will always be at least one single-course meal that satisfies\nthe flavor requirement.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 10\n4 10\n6 15\n3 5\n4 9\n3 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>\n</p><p>Problem credits: Christopher Chang and Allen Chen\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=767"
    },
    {
      "title": "Problem 1. MooTube",
      "subtitle": "USACO 2018 January Contest, Gold",
      "id": 789,
      "year": "2018",
      "division": "gold",
      "number": "1",
      "problem": "In his spare time, Farmer John has created a new video-sharing service, which he\nnames MooTube.  On MooTube, Farmer John's cows can record, share, and discover\nmany amusing videos.  His cows already have posted $N$ videos\n($1 \\leq N \\leq 100,000$), conveniently numbered $1 \\ldots N$.  However, FJ can't\nquite figure out how to help his cows find new videos they might like.\n\n<p>FJ wants to create a list of \"suggested videos\" for every MooTube video.  This\nway, cows will be recommended the videos most relevant to the ones they already\nwatch.\n\n</p><p>FJ devises a metric of \"relevance,\" which determines, as the name suggests, how\nrelevant two videos are to each other.  He picks $N-1$ pairs of videos and\nmanually computes their pairwise relevance.  Then, FJ visualizes his videos as a\nnetwork, where each video is a node and the $N-1$ pairs of videos he manually\nconsidered are connected.  Conveniently, FJ has picked his $N-1$ pairs so that\nany video can be  reached from any other video along a path of connections in\nexactly one way. FJ decides that the relevance of any pair of videos should be\ndefined as the minimum relevance of any connection along this path.  \n\n</p><p>Farmer John wants to pick a value $K$ so that next to any given MooTube video,\nall other videos with relevance at least $K$ to that video will be suggested. \nHowever, FJ is worried that too many videos will be suggested to his cows, which\ncould distract them from milk production!  Therefore, he wants to carefully set\nan appropriate value of $K$.  Farmer John would like your help answering a\nnumber of questions about the suggested videos for certain values of $K$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file mootube.in):</h4>\nThe first line of input contains $N$ and $Q$ ($1 \\leq Q \\leq 100,000$).\n\n<p>The next $N-1$ lines each describe a pair of videos FJ manually compares.  Each\nline includes three integers $p_i$, $q_i$, and $r_i$\n($1 \\leq p_i, q_i \\leq N, 1 \\leq r_i \\leq 1,000,000,000$), indicating that\nvideos $p_i$ and $q_i$ are connected with relevance $r_i$.  \n\n</p><p>The next $Q$ lines describe Farmer John's $Q$ questions.  Each line contains two\nintegers, $k_i$ and $v_i$ ($1 \\leq k_i \\leq 1,000,000,000, 1 \\leq v_i \\leq N$),\nindicating that FJ's $i$th question asks how many videos will be suggested to\nviewers of video $v_i$ if $K = k_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file mootube.out):</h4>\nOutput $Q$ lines.  On line $i$, output the answer to FJ's $i$th question.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3\n1 2 3\n2 3 2\n2 4 4\n1 2\n4 1\n3 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n0\n2\n</pre>\n\n<p>Farmer John finds that videos one and two have relevance three, that videos two\nand three have relevance two, and that videos two and four have relevance four. \nBased on this, videos one and three have relevance min(3, 2) = 2, videos one and\nfour have relevance min(3, 4) = 3, and videos three and four have relevance\nmin(2, 4) = 2.\n\n</p><p>Farmer John wants to know how many videos will be suggested from video two if\n$K=1$, from video one if $K=3$, and from video one if $K=4$.  We see that with\n$K=1$, videos 1, 3, and 4 will be suggested on video two.  With $K=4$, no videos\nwill be suggested from video one.  With $K=3$, however, videos 2 and 4 will be\nsuggested from video one.\n\n</p><p>\n</p><p>Problem credits: Jay Leeds\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=789"
    },
    {
      "title": "Problem 2. Cow at Large",
      "subtitle": "USACO 2018 January Contest, Gold",
      "id": 790,
      "year": "2018",
      "division": "gold",
      "number": "2",
      "problem": "Cornered at last, Bessie has gone to ground in a remote farm. The farm consists\nof $N$ barns ($2 \\leq N \\leq 10^5$) and $N-1$ bidirectional tunnels between\nbarns, so that there is a unique path between every pair of barns. Every barn\nwhich has only one tunnel is an exit. When morning comes, Bessie will surface at\nsome barn and attempt to reach an exit.\n\n<p>But the moment Bessie surfaces, the law will be able to pinpoint her location.\nSome farmers will then start at various exit barns, and attempt to catch Bessie.\nThe farmers move at the same speed as Bessie (so in each time step, each farmer\ncan move from one barn to an adjacent barn). The farmers know where Bessie is at\nall times, and Bessie knows where the farmers are at all times. The farmers\ncatch Bessie if at any instant a farmer is in the same barn as Bessie, or\ncrossing the same tunnel as Bessie. Conversely, Bessie escapes if she reaches an\nexit barn before any farms catch her.\n\n</p><p>Bessie is unsure about her chances of success, which depends on the number of\nfarmers that the law is able to deploy. Given that Bessie surfaces at barn $K$,\nhelp Bessie determine the minimum number of farmers who would be needed to catch\nBessie, assuming that the farmers distribute themselves optimally among the exit\nbarns.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file atlarge.in):</h4>\nThe first line of the input contains $N$ and $K$.  Each of the following $N-1$\nlines specify two integers, each in the range $1 \\ldots N$, describing a tunnel\nbetween two barns.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file atlarge.out):</h4>\nPlease output the minimum number of farmers needed to ensure catching Bessie.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 1\n1 2\n1 3\n3 4\n3 5\n4 6\n5 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=790"
    },
    {
      "title": "Problem 3. Stamp Painting",
      "subtitle": "USACO 2018 January Contest, Gold",
      "id": 791,
      "year": "2018",
      "division": "gold",
      "number": "3",
      "problem": "Bessie has found herself in possession of an $N$-unit long strip of canvas\n($1 \\leq N \\leq 10^6$), and she intends to paint it. However, she has been\nunable to acquire paint brushes. In their place she has $M$ rubber stamps of\ndifferent colors ($1 \\leq M \\leq 10^6$), each stamp $K$ units wide\n($1 \\leq K \\leq 10^6$). Astounded by the possibilities that lie before her, she\nwishes to know exactly how many different paintings she could conceivably\ncreate, by stamping her stamps in some order on the canvas.\n\n<p>To use a stamp, it must first be aligned with exactly $K$ neighboring units on\nthe canvas. The stamp cannot extend beyond the ends of the canvas, nor can it\ncover fractions of units. Once placed, the stamp paints the $K$ covered units\nwith its color. Any given stamp may be used multiple times, once, or even never\nat all. But by the time Bessie is finished, every unit of canvas must have been\npainted at least once.\n\n</p><p>Help Bessie find the number of different paintings that she could paint, modulo\n$10^9 + 7$. Two paintings that look identical but were painted by different\nsequences of stamping operations are counted as the same.\n\n</p><p>For at least 75% of the input cases, $N,K \\leq 10^3$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file spainting.in):</h4>\nThe first and only line of input has three integers, $N$, $M$, and $K$. It is\nguaranteed that $K \\leq N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file spainting.out):</h4>\nA single integer: the number of possible paintings, modulo $10^9 + 7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\nIf the two stamps have colors A and B, the possible paintings are AAA, AAB, ABB,\nBAA, BBA, and BBB.\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=791"
    },
    {
      "title": "Problem 1. Snow Boots",
      "subtitle": "USACO 2018 February Contest, Gold",
      "id": 813,
      "year": "2018",
      "division": "gold",
      "number": "1",
      "problem": "It's winter on the farm, and that means snow! There are $N$ tiles on the path\nfrom the farmhouse to the barn, conveniently numbered $1 \\dots N$, and tile $i$\nis covered in $f_i$ feet of snow. \n\n<p>In his farmhouse cellar, Farmer John has $B$ pairs of boots, numbered\n$1 \\dots B$. Some pairs are more heavy-duty than others, and some pairs are more\nagile than others. In particular, pair $i$ lets FJ step in snow at most $s_i$\nfeet deep, and lets FJ move at most $d_i$ forward in each step.\n\n</p><p>Farmer John starts off on tile $1$ and must reach tile $N$ to wake up the cows.\nTile $1$ is sheltered by the farmhouse roof, and tile $N$ is sheltered by the\nbarn roof, so neither of these tiles has any snow. Help Farmer John determine\nwhich pairs of snow boots will allow him to make the trek.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file snowboots.in):</h4>\nThe first line contains two space-separated integers $N$ and $B$\n($1 \\leq N,B \\leq 10^5$).\n\n<p>The second line contains $N$ space-separated integers; the $i$th integer is\n$f_i$, the depth of snow on tile $i$ ($0 \\leq f_i \\leq 10^9$). It's guaranteed\nthat $f_1 = f_N = 0$.\n\n</p><p>The next $B$ lines contain two space-separated integers each. The first integer\non line $i+2$ is $s_i$, the maximum depth of snow in which pair $i$ can step.\nThe second integer on line $i+2$ is $d_i$, the maximum step size for pair $i$.\nIt's guaranteed that $0 \\leq s_i \\leq 10^9$ and $1 \\leq d_i \\leq N-1$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file snowboots.out):</h4>\nThe output should consist of $B$ lines. Line $i$ should contain a single\ninteger: $1$ if Farmer John can trek from tile $1$ to\ntile $N$ wearing the $i$th pair of boots, and $0$ otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8 7\n0 3 8 5 6 9 0 0\n0 5\n0 6\n6 2\n8 1\n10 1\n5 3\n150 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n1\n1\n0\n1\n1\n1\n</pre>\n\n<p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=813"
    },
    {
      "title": "Problem 2. Directory Traversal",
      "subtitle": "USACO 2018 February Contest, Gold",
      "id": 814,
      "year": "2018",
      "division": "gold",
      "number": "2",
      "problem": "Bessie the cow is surprisingly computer savvy.  On her computer in the barn, she\nstores all of her precious files in a collection of directories; for example:\n\n<p></p><pre>bessie/\n  folder1/\n    file1\n    folder2/\n      file2\n  folder3/\n    file3\n  file4\n</pre>\n\n<p>There is a single \"top level\" directory, called bessie.\n\n</p><p>Bessie can navigate to be inside any directory she wants. From a given\ndirectory, any file can be referenced by a \"relative path\".  In a relative path,\nthe symbol \"..\" refers to the parent directory. If Bessie were in folder2, she\ncould refer to the four files as follows:\n\n</p><p></p><pre>../file1\nfile2\n../../folder3/file3\n../../file4\n</pre>\n\n<p>Bessie would like to choose a directory from which the sum of the lengths of the\nrelative paths to all the files is minimized.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file dirtraverse.in):</h4>\nThe first line contains an integer N ($2 \\leq N \\leq 100,000$), giving the total\nnumber of files and directories.  For the purposes of input, each object (file\nor directory) is assigned a unique integer ID between 1 and $N$, where ID 1 \nrefers to the top level directory.  \n\n<p>Next, there will be $N$ lines. Each line  starts with the name of a file or\ndirectory. The name will have only lower case characters a-z and digits 0-9, and\nwill be at most 16 characters long. Following the name is an integer, $m$. If\n$m$ is 0, then this entity is a file. If $m &gt; 0$, then this entity is a\ndirectory, and it has a total of $m$ files or directories inside it.  Following $m$\nthere will be $m$ integers giving the IDs of the entities in this directory.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file dirtraverse.out):</h4>\nOutput the minimal possible total length of all relative paths to files. Note\nthat this value may be too large to fit into a 32-bit integer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8\nbessie 3 2 6 8\nfolder1 2 3 4\nfile1 0\nfolder2 1 5\nfile2 0\nfolder3 1 7\nfile3 0\nfile4 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">42\n</pre>\n\n<p>This input describes the example directory structure given above.\n\n</p><p>The best solution is to be in folder1. From this directory, the relative paths\nare:\n\n</p><p></p><pre>file1\nfolder2/file2\n../folder3/file3\n../file4\n</pre>\n\n<p>\n</p><p>Problem credits: Mark Gordon\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=814"
    },
    {
      "title": "Problem 3. Taming the Herd",
      "subtitle": "USACO 2018 February Contest, Gold",
      "id": 815,
      "year": "2018",
      "division": "gold",
      "number": "3",
      "problem": "Early in the morning, Farmer John woke up to the sound of splintering wood. It\nwas the cows, and they were breaking out of the barn again!\n\n<p>Farmer John was sick and tired of the cows' morning breakouts, and he decided\nenough was enough: it was time to get tough. He nailed to the barn wall a\ncounter tracking the number of days since the last breakout. So if a breakout\noccurred in the morning, the counter would be $0$ that day; if the most recent\nbreakout was $3$ days ago, the counter would read $3$. Farmer John meticulously\nlogged the counter every day.\n\n</p><p>The end of the year has come, and Farmer John is ready to do some accounting.\nThe cows will pay, he says! But something about his log doesn't look quite\nright...  \n\n</p><p>Farmer John wants to find out how many breakouts have occurred since he started\nhis log. However, he suspects that the cows have tampered with his log, and all\nhe knows for sure is that he started his log on the day of a breakout. Please\nhelp him determine, for each number of breakouts that might have occurred since\nhe started the log, the minimum number of log entries that must have been\ntampered with.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file taming.in):</h4>\nThe first line contains a single integer $N$ ($1 \\leq N \\leq 100$), denoting the\nnumber of days since Farmer John started logging the cow breakout counter.\n\n<p>The second line contains $N$ space-separated integers. The $i$th integer is a\nnon-negative integer $a_i$ (at most $100$), indicating that on day $i$ the\ncounter was at $a_i$, unless the cows tampered with that day's log entry.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file taming.out):</h4>\nThe output should consist of $N$ integers, one per line. The $i$th\ninteger should be the minimum over all possible breakout sequences with $i$\nbreakouts, of the number of log entries that are inconsistent with that\nsequence.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n1 1 2 0 0 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n2\n1\n2\n3\n4\n</pre>\n\n<p>If there was only 1 breakout, then the correct log would look like 0 1 2 3 4 5,\nwhich is 4 entries different from the given log.\n\n</p><p>If there were 2 breakouts, then the correct log might look like 0 1 2 3 0 1,\nwhich is 2 entries different from the given log. In this case, the breakouts\noccurred on the first and fifth days.\n\n</p><p>If there were 3 breakouts, then the correct log might look like 0 1 2 0 0 1,\nwhich is just 1 entry different from the given log. In this case, the breakouts\noccurred on the first, fourth, and fifth days.\n\n</p><p>And so on.\n\n</p><p>\n</p><p>Problem credits: Brian Dean and Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=815"
    },
    {
      "title": "Problem 1. Out of Sorts",
      "subtitle": "USACO 2018 US Open Contest, Gold",
      "id": 837,
      "year": "2018",
      "division": "gold",
      "number": "1",
      "problem": "Keeping an eye on long term career possibilities beyond the farm, Bessie the cow\nhas started learning algorithms from various on-line coding websites.\n\n<p>Her favorite algorithm thus far is \"bubble sort\".  Here is Bessie's initial\nimplementation, in cow-code, for sorting an array $A$ of length $N$.\n\n</p><p></p><pre>sorted = false\nwhile (not sorted):\n   sorted = true\n   moo\n   for i = 0 to N-2:\n      if A[i+1] &lt; A[i]:\n         swap A[i], A[i+1]\n         sorted = false\n</pre>\n\n<p>Apparently, the \"moo\" command in cow-code does nothing more than print out\n\"moo\".  Strangely, Bessie seems to insist on including it at various points in\nher code.\n\n</p><p>After testing her code on several arrays, Bessie learns an interesting\nobservation: while large  elements can be pulled to the end of the array very\nquickly, it can take small elements a very long time to \"bubble\" to the front of\nthe array (she suspects this is how the algorithm gets its name).  In order to\ntry and alleviate this problem, Bessie tries to modify her code so that it scans\nforward and then backward in each iteration of the main loop, so that both large\nand small elements have a chance to be pulled long distances in each iteration\nof the main loop.  Her code now looks like this:\n\n</p><p></p><pre>sorted = false\nwhile (not sorted):\n   sorted = true\n   moo\n   for i = 0 to N-2:\n      if A[i+1] &lt; A[i]:\n         swap A[i], A[i+1]\n   for i = N-2 downto 0:\n      if A[i+1] &lt; A[i]:\n         swap A[i], A[i+1]\n   for i = 0 to N-2:\n      if A[i+1] &lt; A[i]:\n         sorted = false\n</pre>\n\n<p>Given an input array, please predict how many times \"moo\" will be printed by\nBessie's modified code.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file sort.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100,000$).  The next $N$\nlines  describe $A[0] \\ldots A[N-1]$, each being an integer in the range\n$0 \\ldots 10^9$. Input elements are not guaranteed to be distinct.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file sort.out):</h4>\nPrint the number of times \"moo\" is printed.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1\n8\n5\n3\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=837"
    },
    {
      "title": "Problem 2. Milking Order",
      "subtitle": "USACO 2018 US Open Contest, Gold",
      "id": 838,
      "year": "2018",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John's $N$ cows ($1 \\leq N \\leq 10^5$), numbered $1 \\ldots N$ as always, \nhappen to have too much time on their hooves.  As a result, they have worked out\na complex social hierarchy related to the order in which Farmer John milks them\nevery morning.  \n\n<p>After weeks of study, Farmer John has made $M$ observations about his cows'\nsocial structure ($1 \\leq M \\leq 50,000$).  Each observation is an ordered list\nof some of his cows, indicating that these cows should be milked in the same\norder in which they appear in this list.  For example, if one of Farmer John's\nobservations is the list 2, 5, 1, Farmer John should milk cow 2 sometime before\nhe milks cow 5, who should be milked sometime before he milks cow 1.\n\n</p><p>Farmer John's observations are prioritized, so his goal is to maximize the value\nof $X$ for which his milking order meets the conditions outlined in the first\n$X$ observations.  If multiple milking orders satisfy these first $X$\nconditions, Farmer John believes that it is a longstanding tradition that cows\nwith lower numbers outrank those with higher numbers, so he would like to milk\nthe lowest-numbered cows first.  More formally, if multiple milking orders\nsatisfy these conditions, Farmer John would like to use the lexicographically\nsmallest one.  An ordering $x$ is lexicographically smaller than an ordering $y$\nif for some $j$, $x_i = y_i$ for all $i &lt; j$ and $x_j &lt; y_j$ (in other words,\nthe two orderings are identical up to a certain point, at which $x$ is smaller\nthan $y$).\n\n</p><p>Please help Farmer John determine the best order in which to milk his cows.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file milkorder.in):</h4>\nThe first line contains $N$ and $M$.  The next $M$ lines each describe an\nobservation. Line $i+1$ describes observation $i$, and starts with the number of\ncows $m_i$ listed in the  observation followed by the list of $m_i$ integers\ngiving the ordering of cows in the observation.  The sum of the $m_i$'s is at\nmost $200,000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file milkorder.out):</h4>\nOutput $N$ space-separated integers, giving a permutation of $1 \\ldots N$\ncontaining the order in which Farmer John should milk his cows.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3\n3 1 2 3\n2 4 2\n3 3 4 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 4 2 3\n</pre>\n\n<p>Here, Farmer John has four cows and should milk cow 1 before cow 2 and cow 2\nbefore cow 3 (the first observation), cow 4 before cow 2 (the second\nobservation), and cow 3 before cow 4 and cow 4 before cow 1 (the third\nobservation).   The first two observations can be satisfied simultaneously, but\nFarmer John cannot meet all of these criteria at once, as to do so would require\nthat cow 1 come before cow 3 and cow 3 before cow 1.  \n\n</p><p>This means there are two possible orderings: 1 4 2 3 and 4 1 2 3, the first\nbeing lexicographically smaller.\n\n</p><p>\n</p><p>Problem credits: Jay Leeds\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=838"
    },
    {
      "title": "Problem 3. Talent Show",
      "subtitle": "USACO 2018 US Open Contest, Gold",
      "id": 839,
      "year": "2018",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John is bringing his $N$ cows, conveniently numbered $1 \\ldots N$, to the\ncounty fair, to compete in the annual bovine talent show!  His $i$th cow has a\nweight $w_i$ and talent level $t_i$, both integers.\n\n<p>Upon arrival, Farmer John is quite surprised by the new rules for this year's \ntalent show:\n\n</p><p>(i) A group of cows of total weight at least $W$ must be entered into the show\n(in order to ensure strong teams of cows are competing, not just strong \nindividuals), and\n\n</p><p>(ii) The group with the largest ratio of total talent to total weight shall win.\n\n</p><p>FJ observes that all of his cows together have weight at least $W$, so he should\nbe able to enter a team satisfying (i).  Help him determine the optimal ratio of\ntalent to weight he can achieve for any such team.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file talent.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 250$) and $W$\n($1 \\leq W \\leq 1000$). The next $N$ lines each describe a cow using two\nintegers $w_i$ ($1 \\leq w_i \\leq 10^6$) and $t_i$ ($1 \\leq t_i \\leq 10^3$).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file talent.out):</h4>\nPlease determine the largest possible ratio of total talent over total weight\nFarmer John can achieve using a group of cows of total weight at least $W$.  If\nyour answer is $A$, please print out the floor of $1000A$ in order to keep the\noutput integer-valued (the floor operation discards any fractional part by\nrounding down to an integer, if the number in question is not already an\ninteger).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 15\n20 21\n10 11\n30 31\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1066\n</pre>\n\n<p>In this example, the best talent-to-weight ratio overall would be to use just\nthe single cow with talent 11 and weight 10, but since we need at least  15\nunits of weight, the optimal solution ends up being to use this cow plus the cow\nwith talent 21 and weight 20.  This gives a talent-to-weight ratio of\n(11+21)/(10+20) = 32/30 = 1.0666666..., which when multiplied by 1000 and\nfloored gives 1066.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=839"
    },
    {
      "title": "Problem 1. Fine Dining",
      "subtitle": "USACO 2018 December Contest, Gold",
      "id": 861,
      "year": "2018",
      "division": "gold",
      "number": "1",
      "problem": "The cows are heading back to the barn at the end of a long day, feeling both\ntired and hungry. \n\n<p>The farm consists of $N$ pastures ($2 \\leq N \\leq 50,000$), conveniently\nnumbered $1 \\dots N$.  The cows all want to travel to the barn in pasture $N$.\nEach of the other $N-1$ pastures contains a cow.  Cows can move from pasture to\npasture via a set of $M$ undirected trails ($1 \\leq M \\leq 100,000$).  The $i$th\ntrail connects a pair of pastures $a_i$ and $b_i$, and requires time $t_i$ to\ntraverse. Every cow can reach the barn through a sequence of trails.\n\n</p><p>Being hungry, the cows are interested in potentially stopping for food on their\nway home.  Conveniently, $K$ of the pastures contain tasty haybales\n($1 \\leq K \\leq N$), with the $i$th such haybale having a yumminess value of\n$y_i$.  Each cow is willing to  stop at a single haybale along her trip to the\nbarn, but only if the amount of time this adds to her path is at most the\nyumminess of the haybale she visits. Note that a cow only \"officially\" visits at\nmost one haybale for dining purposes, although it is fine if her path takes her\nthrough other pastures containing haybales; she simply ignores these.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file dining.in):</h4>\nThe first line contains three space-separated integers $N$, $M$, and $K$. Each\nof the next $M$ lines contains three integers $a_i$, $b_i$, and $t_i$,\ndescribing a trail between pastures $a_i$ and $b_i$ which takes $t_i$ time to\ntraverse ($a_i$ and $b_i$ are different from each-other, and $t_i$ is a positive\ninteger at most $10^4$)\n\n<p>The next $K$ lines each describe a haybale in terms of two integers: the index\nof its pasture, and its yumminess value (a positive integer at most $10^9$).\nMultiple haybales can reside in the same pasture.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file dining.out):</h4>\nThe output should consist of $N-1$ lines. Line $i$ contains the single integer\n$1$ if the cow at pasture $i$ can visit and dine on a haybale on the way to the\nbarn, and $0$ otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 5 1\n1 4 10\n2 1 20\n4 2 3\n2 3 5\n4 3 2\n2 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n1\n1\n</pre>\n\n<p>In this example, the cow in pasture 3 should stop for a meal, since her route would only\nincrease by 6 (from 2 to 8), and this increase is at most the yumminess 7 of the\nhaybale.  The cow in pasture 2 should obviously eat the hay in pasture 2, since\nthis causes no change in her optimal route.  The cow in pasture 1 is an interesting\ncase, as it may first appear that her optimal route (length 10) would increase too\nmuch to justify stopping for the hay.  However, she actually does have a route that\nmakes stopping at the hay beneficial: move to pasture 4, then to pasture 2 (eating the hay),\nthen back to pasture 4. \n\n</p><p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=861"
    },
    {
      "title": "Problem 2. Cowpatibility",
      "subtitle": "USACO 2018 December Contest, Gold",
      "id": 862,
      "year": "2018",
      "division": "gold",
      "number": "2",
      "problem": "It turns out there is one factor that matters far more than any other when\ndetermining whether two cows are compatible as potential friends: whether they\nlike similar flavors of ice cream!\n\n<p>Farmer John's $N$ cows ($2 \\leq N \\leq 50,000$) have each listed their five\nfavorite flavors of ice cream.  To make this list concise, each possible flavor\nis represented by a positive integer ID at most $10^6$.  Two cows are compatible\nif their lists contain at least one common flavor of ice cream.\n\n</p><p>Please determine the number of pairs of cows that are NOT compatible \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowpatibility.in):</h4>\nThe first line of input contains $N$. Each of the following $N$ lines contain 5\nintegers (all different) representing the favorite ice cream flavors of one cow.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowpatibility.out):</h4>\nPlease output the number of pairs of cows that are not compatible. \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 2 3 4 5\n1 2 3 10 8\n10 9 8 7 6\n50 60 70 80 90\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>Here, cow 4 is not compatible with any of cows 1, 2, or 3, and cows 1 and 3 are\nalso not compatible.\n\n</p><p>\n</p><p>Problem credits: Yang Liu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=862"
    },
    {
      "title": "Problem 3. Teamwork",
      "subtitle": "USACO 2018 December Contest, Gold",
      "id": 863,
      "year": "2018",
      "division": "gold",
      "number": "3",
      "problem": "For his favorite holiday, Farmer John wants to send presents to his friends. \nSince he isn't very good at wrapping presents, he wants to enlist the help of\nhis cows. As you might expect, cows are not much better at wrapping presents\nthemselves, a lesson Farmer John is about to learn the hard way.\n\n<p>Farmer John's $N$ cows ($1 \\leq N \\leq 10^4$) are all standing in a row,\nconveniently numbered $1 \\ldots N$ in order.  Cow $i$ has skill level $s_i$ at\nwrapping presents.  These skill levels might vary quite a bit, so FJ decides to\ncombine his cows into teams. A team can consist of any consecutive set of up to\n$K$ cows ($1 \\leq K \\leq 10^3$), and no cow can be part of more than one team. \nSince cows learn from each-other, the skill level of each cow on a team can be\nreplaced by the skill level of the most-skilled cow on that team.\n\n</p><p>Please help FJ determine the highest possible sum of skill levels he can achieve\nby optimally forming teams.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file teamwork.in):</h4>\nThe first line of input contains $N$ and $K$.  The next $N$ lines contain the\nskill levels of the $N$ cows in the order in which they are standing.  Each\nskill level is a positive integer at most $10^5$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file teamwork.out):</h4>\nPlease print the highest possible sum of skill levels FJ can achieve by grouping\nappropriate consecutive sets of cows into teams.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 3\n1\n15\n7\n9\n2\n5\n10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">84\n</pre>\n\n<p>In this example, the optimal solution is to group the first three cows and the\nlast three cows, leaving the middle cow on a team by itself (remember that it is\nfine to have teams of size less than $K$).  This effectively boosts the skill\nlevels of the 7 cows to 15, 15, 15, 9, 10, 10, 10, which sums to 84.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=863"
    },
    {
      "title": "Problem 1. Cow Poetry",
      "subtitle": "USACO 2019 January Contest, Gold",
      "id": 897,
      "year": "2019",
      "division": "gold",
      "number": "1",
      "problem": "Unbeknownst to Farmer John, Bessie is quite the patron of the arts!  Most\nrecently, she has begun studying many of the great poets, and now, she wants to\ntry writing some poetry of her own.\n\n<p>Bessie knows $N$ ($1 \\leq N \\leq 5000$) words, and she wants to arrange them\ninto poems.  Bessie has determined the length, in syllables, of each of her\nwords, and she has also assigned them into \"rhyme classes\".  Every word rhymes\nonly with other words in the same rhyme class.\n\n</p><p>Bessie's poems each include $M$ lines ($1 \\leq M \\leq 10^5$), and each line must\nconsist of $K$ ($1 \\leq K \\leq 5000$) syllables.  Moreover, Bessie's poetry must\nadhere to a specific rhyme scheme.\n\n</p><p>Bessie would like to know how many different poems she can write that satisfy\nthe given constraints.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file poetry.in):</h4>\nThe first line of input contains $N$, $M$, and $K$.\n\n<p>The next $N$ lines of input each contain two numbers $s_i$ ($1 \\leq s_i \\leq K$)\nand $c_i$ ($1 \\leq c_i \\leq N$).  This indicates that Bessie knows a word with\nlength (in syllables) $s_i$ in rhyme class $c_i$.\n\n</p><p>The final $M$ lines of input describe Bessie's desired rhyme scheme and each\ncontain one uppercase letter $e_i$.  All lines corresponding to equal values of\n$e_i$ must end with words in the same rhyme class. Lines with different values\nof $e_i$ don't necessarily end with words in different rhyme classes.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file poetry.out):</h4>\nOutput the number of poems Bessie can write that satisfy these constraints. \nBecause this number may be very large, please compute it modulo 1,000,000,007.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 3 10\n3 1\n4 1\n3 2\nA\nB\nA\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">960\n</pre>\n\n<p>In this example, Bessie knows three words.  The first two words rhyme, and have lengths of three\nsyllables and four syllables, and the last word is three syllables long and\ndoesn't rhyme with the others.  She wants to write a three-line poem such that each line contains ten\nsyllables and the first and last lines rhyme.  There are 960 such poems.  One example of a valid poem is the following (where 1, 2, and 3 represent the\nfirst, second, and third words): 121 123 321\n\n</p><p>\n</p><p>Problem credits: Jay Leeds\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=897"
    },
    {
      "title": "Problem 2. Sleepy Cow Sorting",
      "subtitle": "USACO 2019 January Contest, Gold",
      "id": 898,
      "year": "2019",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John is attempting to sort his $N$ cows ($1 \\leq N \\leq 10^5$),\nconveniently numbered $1 \\dots N$, before they head out to the pastures for\nbreakfast.\n\n<p>Currently, the cows are standing in a line in the order\n$p_1, p_2, p_3, \\dots, p_N$, and Farmer John is standing in front of cow $p_1$.\nHe wants to reorder the cows so that they are in the order $1, 2, 3, \\dots, N$,\nwith cow $1$ next to Farmer John.\n\n</p><p>Today the cows are a bit sleepy, so at any point in time the only cow who is\npaying attention to Farmer John's instructions is the cow directly facing Farmer\nJohn. In one time step, he can instruct this cow to move $k$ paces down the\nline, for any $k$ between $1$ and $N-1$ inclusive. The $k$ cows whom she passes\nwill amble forward, making room for her to insert herself in the line after\nthem.\n\n</p><p>For example, suppose that $N=4$ and the cows start off in the following order:\n\n</p><p></p><pre> FJ: 4, 3, 2, 1 </pre>\n\n<p>The only cow paying attention to FJ is cow $4$. If he instructs her to move $2$\npaces down the line, the order will subsequently look like this:\n\n</p><p></p><pre> FJ: 3, 2, 4, 1 </pre>\n\n<p>Now the only cow paying attention to FJ is cow $3$, so in the second time step\nhe may give cow $3$ an instruction, and so forth until the cows are sorted.\n\n</p><p>Farmer John is eager to complete the sorting, so he can go back to the farmhouse\nfor his own breakfast. Help him find a sequence of instructions that sorts the\ncows in the minimum number of time steps.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file sleepy.in):</h4>\nThe first line of input contains $N$.  The second line contains $N$ space-separated integers:\n$p_1, p_2, p_3, \\dots, p_N$, indicating the starting order of the cows.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file sleepy.out):</h4>\nThe first line should contain a single integer, $K$, giving the minimum number of time\nsteps required to sort the cows.\n\n<p>The second line should contain $K$ space-separated integers,\n$c_1, c_2, \\dots, c_K$, each in the range $1 \\ldots N-1$.  \nFurthermore, if in the $i$-th time step FJ\ninstructs the cow facing him to move $c_i$ paces down the line, then after $K$\ntime steps the cows should be in sorted order.\n\n</p><p>If there are multiple optimal instruction sequences, your program may output any\nof them.\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 2 4 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n2 2 3\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=898"
    },
    {
      "title": "Problem 3. Shortcut",
      "subtitle": "USACO 2019 January Contest, Gold",
      "id": 899,
      "year": "2019",
      "division": "gold",
      "number": "3",
      "problem": "Every evening, Farmer John rings a giant bell that summons his cows to the barn\nfor dinner.  Eager to get to the barn as quickly as possible, they all follow\nthe shortest possible route to get there.\n\n<p>The farm is described by a set of $N$ fields ($1 \\leq N \\leq 10,000$),\nconveniently numbered $1 \\ldots N$, with the barn residing in field 1. The\nfields are connected by a set of $M$ bidirectional trails\n($N-1 \\leq M \\leq 50,000$).  Each trail has a travel time associated with it,\nand there is a path from every field to the barn using some set of trails.\n\n</p><p>Field $i$ contains $c_i$ cows.  Upon hearing the dinner bell, these  cows all\nwalk to the barn along a route that takes the minimum amount of time.  If there\nare several routes tied for the minimum time, the cows take whichever of these\nis \"lexicographically\" smallest (i.e., they break ties between two routes  by\nfavoring the one using the lower-indexed field at the first place where the\nroutes differ, so for example a path that visits fields 7, 3, 6, 1 would be\npreferable to one that visits 7, 5, 1, assuming both had the same travel time).\n\n</p><p>Farmer John is worried about the barn being far away from some fields. He adds\nup the travel time experienced by each cow, summed over all the cows, calling\nthis number the total travel time.  He would like to reduce this number as much\nas possible by adding one extra \"shortcut\" trail which has a travel time of $T$ \n($1 \\leq T \\leq 10,000$), from the barn (field 1) to some other field of his\nchoosing. If a cow stumbles upon the shortcut trail while traveling along  her\nusual path to the barn, she will take it if it gets her to the barn faster. \nOtherwise, a cow will follow her usual route, even if it might have been\npossible to use the shortcut to improve her travel time.\n\n</p><p>Please help Farmer John determine the greatest possible amount of decrease in\ntotal travel time he can achieve by adding his shortcut trail.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file shortcut.in):</h4>\nThe first line of input contains $N$, $M$, and $T$.  The next line contains\n$N$ integers $c_1 \\ldots c_N$, each in the range $0 \\ldots 10,000$.  The next $M$\nlines each describe a trail using three integers $a$, $b$, and $t$, where the\ntrail connects fields $a$ and $b$ and has travel time $t$.  All travel times are\nin the range $1 \\ldots 25,000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file shortcut.out):</h4>\nPlease output the largest possible reduction in total travel time Farmer John\ncan achieve.  \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 6 2\n1 2 3 4 5\n1 2 5\n1 3 3\n2 4 3\n3 4 5\n4 5 2\n3 5 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">40\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=899"
    },
    {
      "title": "Problem 1. Cow Land",
      "subtitle": "USACO 2019 February Contest, Gold",
      "id": 921,
      "year": "2019",
      "division": "gold",
      "number": "1",
      "problem": "Cow Land is a special amusement park for cows, where they roam around, eat\ndelicious grass, and visit different cow attractions (the roller cowster is\nparticularly popular).\n\n<p>There are a total of $N$ different attractions ($2 \\leq N \\leq 10^5$).  Certain\npairs of attractions are connected by pathways, $N-1$ in total, in such a way\nthat there is a unique route consisting of various pathways between any two\nattractions. Each attraction $i$ has an integer enjoyment value $e_i$, which can\nchange over the course of a day, since some attractions are more appealing in\nthe morning and others later in the afternoon.\n\n</p><p>A cow that travels from attraction $i$ to attraction $j$ gets to experience all\nthe attractions on the route from $i$ to $j$.  Curiously, the total enjoyment\nvalue of this entire route is given by the bitwise XOR of all the enjoyment\nvalues along the route, including those of attractions $i$ and $j$.  \n\n</p><p>Please help the cows determine the enjoyment values of the routes they plan to\nuse during their next trip to Cow Land.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowland.in):</h4>\nThe first line of input contains $N$ and a number of queries $Q$\n($1 \\leq Q \\leq 10^5$). The next line contains $e_1 \\ldots e_N$\n($0 \\leq e_i \\leq 10^9$).  The next $N-1$ lines each describe a pathway in terms\nof two integer attraction IDs $a$ and $b$ (both in the range $1 \\ldots N$). \nFinally, the last $Q$ lines each describe either an update to one of the $e_i$\nvalues or a query for the enjoyment of a route.  A line of the form \"1 $i$ $v$\"\nindicates  that $e_i$ should be updated to value $v$, and a line of the form \"2\n$i$ $j$\" is a query for the enjoyment of the route connecting attractions $i$\nand $j$.\n\n<p>In test data worth at most 50% of points, there will be no changes to the values\nof the attractions.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowland.out):</h4>\nFor each query of the form \"2 $i$ $j$\", print on a single line the enjoyment of\nthe route from $i$ to $j$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 5\n1 2 4 8 16\n1 2\n1 3\n3 4\n3 5\n2 1 5\n1 1 16\n2 3 5\n2 1 5\n2 1 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">21\n20\n4\n20\n</pre>\n\n<p>\n</p><p>Problem credits: Charles Bailey\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=921"
    },
    {
      "title": "Problem 2. Dishwashing",
      "subtitle": "USACO 2019 February Contest, Gold",
      "id": 922,
      "year": "2019",
      "division": "gold",
      "number": "2",
      "problem": "Bessie and Elsie are helping Farmer John wash the dishes, a more complicated\nprocess than one might think due to their lack of opposable thumbs.\n\n<p>The two cows decide that Bessie will apply soap, and Elsie will rinse. Bessie is\ngiven a dirty stack of plates labeled $1$ through $N$ ($1 \\leq N \\leq 10^5$)\nElsie has an empty stack, where clean plates will go. There is a counter in\nbetween Bessie and Elsie for soapy stacks.\n\n</p><p>At each step, either:\n</p><ul><li>\nBessie takes a plate from the top of the dirty stack, applies soap, and then\nplaces it on the counter. When placing a soapy plate on the counter, Bessie must\neither (i) place the plate on top of an existing non-empty soapy stack or (ii)\ncreate a new soapy stack to the right of all existing soapy stacks.\n</li><li>\nElsie takes a plate from the top of the leftmost soapy stack. Elsie rinses the\nplate, then places it on top of the clean stack.\n</li></ul>\n\n<p>The goal is for the clean stack to have all plates in order, with the smallest\nlabel on the bottom and the largest label on the top.  It may not be possible\nfor the cows to achieve this goal for the entire stack of plates, so please\ndetermine the length of the largest prefix of the input ordering for which the\ngoal is achievable.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file dishes.in):</h4>\nThe first line of input contains $N$.  The next $N$ lines specify the order of\nthe dishes in Bessie's stack, with the first number being the dish on top of the\nstack.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file dishes.out):</h4>\nPlease output the length of the longest prefix of the input stack that can be\nsuccessfully washed so that the plates end up ordered properly in the clean\nstack.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n4\n5\n2\n3\n1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>\n</p><p>Problem credits: George Xing\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=922"
    },
    {
      "title": "Problem 3. Painting the Barn",
      "subtitle": "USACO 2019 February Contest, Gold",
      "id": 923,
      "year": "2019",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John is not good at multitasking.  He gets distracted often,  making it\nhard to complete long projects. Currently, he is trying to paint one side of his\nbarn,  but he keeps painting small rectangular areas and then getting\nsidetracked by the needs of tending to his cows, leaving some parts of the barn\npainted with more coats of paint than others.\n\n<p>We can describe the side of the barn as a 2D $x$-$y$ plane, on which Farmer John\npaints $N$ rectangles, each with sides parallel to the coordinate axes, each\ndescribed  by the coordinates of its lower-left and upper-right corner points.  \n\n</p><p>Farmer John wants to apply several coats of paint to the barn so it doesn't need\nto be repainted again in the immediate future.  However, he doesn't want to\nwaste time applying an excessive number of coats of paint.  It turns out that\n$K$ coats of  paint is the optimal amount.  However, looking at the amount of\narea covered by $K$ coats of paint, he is not very happy.  He is willing to \npaint up to two additional rectangles to try and increase this area, as long as\nthese two rectangles are disjoint (not sharing any positive amount of area in\ncommon).  Note that he can also decide to paint zero new rectangles or  just one\nnew rectangle if this ends up being the best thing to do.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file paintbarn.in):</h4>\nThe first line of input contains $N$ and $K$ ($1 \\leq K, N \\leq 10^5$). \nEach of the remaining $N$ lines contains four integers $x_1, y_1, x_2, y_2$ \ndescribing a rectangular region being painted, with lower-left corner\n$(x_1, y_1)$ and upper-right corner $(x_2, y_2)$.  All $x$ and $y$ values are in\nthe range $0 \\ldots 200$, and all rectangles have positive area.\n</div>\n\n<p>Like the rectangles he already painted, any new rectangles that Farmer John\npaints must have positive area, and their corner points must have $x$ and $y$\ncoordinates in the range $0 \\ldots 200$.\n\n</p><p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file paintbarn.out):</h4>\nPlease output the maximum area of the barn that could be covered by  exactly $K$\ncoats of paint, if Farmer John paints up to two additional disjoint rectangles.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\n1 1 4 4\n3 3 7 6\n2 2 8 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">26\n</pre>\n\n<p>\n</p><p>Problem credits: Nick Wu and Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=923"
    },
    {
      "title": "Problem 1. Snakes",
      "subtitle": "USACO 2019 US Open Contest, Gold",
      "id": 945,
      "year": "2019",
      "division": "gold",
      "number": "1",
      "problem": "According to legend, St. Patrick banished all of the snakes in Mooland over a\nthousand years ago. However, snakes have since made their way back to Mooland!\nSt. Patrick’s day was on March 17, so Bessie is going to commemorate St.\nPatrick by banishing all of the snakes from Mooland once and for all.\n\n<p>Bessie is equipped with a net to capture snakes distributed in $N$  groups on a\nline $(1 \\leq N \\leq 400)$. Bessie must capture every snake in every group in\nthe order that the groups appear on the line. Each time Bessie captures a group,\nshe can put the snakes in a cage and start with an empty net for the next group.\n\n</p><p>A net with size $s$ means that Bessie can capture any group that contains $g$\nsnakes, where $g \\leq s$.  However, every time Bessie captures\na group of snakes of size $g$ with a net of size $s$, she wastes\n$s - g$ space.  Bessie’s net can start at any size and she can change the\nsize of her net $K$ times $(1 \\leq K &lt; N)$.\n\n</p><p>Please tell Bessie the minimum amount of total wasted space she can accumulate after\ncapturing all the groups.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file snakes.in):</h4>\nThe first line contains $N$ and $K$. The second line\ncontains $N$ integers, $a_1,\\dots,a_N$, where $a_i$ ($0 \\leq a_i \\leq 10^6$) is\nthe number of snakes in the $i$th group.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file snakes.out):</h4>\nOutput one integer giving the minimum amount of wasted space after Bessie \ncaptures all the snakes.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 2\n7 9 8 2 3 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>Bessie’s net starts at a size of 7. After she captures the first group of\nsnakes, she changes her net to a size of 9 and keeps that size until the 4th\ngroup of snakes, when she changes her net to size 3. The total wasted space\nis $(7-7) + (9-9) + (9-8) + (3-2) + (3-3) + (3-2) = 3.$\n\n</p><p>\n</p><p>Problem credits: Patrick Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=945"
    },
    {
      "title": "Problem 2. I Would Walk 500 Miles",
      "subtitle": "USACO 2019 US Open Contest, Gold",
      "id": 946,
      "year": "2019",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John wants to divide his $N$ cows $(N \\leq 7500)$, conveniently \nnumbered $1 \\ldots N$, into $K$ non-empty\ngroups ($2 \\leq K \\leq N$) such that no two cows from two different groups can\ninteract with each other without walking some number of miles.  Cow $x$ and Cow $y$ (where\n$1 \\leq x &lt; y \\leq N$) are willing to walk\n$(2019201913x + 2019201949y)\\text{ mod } 2019201997$ miles to see each other. \n\n<p>Given a division of the $N$ cows into $K$ non-empty groups, let $M$ be the\nminimum of the number of miles any two cows in two different groups are willing\nto walk to see each other.   To test the cows' devotion to each other, Farmer\nJohn wants to optimally divide the $N$ cows into $K$ groups such that $M$ is as\nlarge as possible. \n\nThe memory limit for this problem is set to 512MB, above\nthe usual 256MB limit.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file walk.in):</h4>\nThe input is just one line, containing $N$ and $K$, separated by a space.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file walk.out):</h4>\nPrint out $M$ in an optimal solution. </div> \n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2019201769\n</pre>\n\n<p>In this example, Cow 1 and Cow 2 are willing to walk 2019201817 miles to see\neach other.  Cow 2 and Cow 3 are willing to walk 2019201685 miles. And Cow 1 and\nCow 3 are  willing to walk 2019201769 miles. Thus, by grouping the cows such\nthat  1 is by herself and 2 and 3 are grouped together,\n$M = \\min(2019201817,2019201769) = 2019201769$ (which is the best we can do\nhere).\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=946"
    },
    {
      "title": "Problem 3. Balancing Inversions",
      "subtitle": "USACO 2019 US Open Contest, Gold",
      "id": 947,
      "year": "2019",
      "division": "gold",
      "number": "3",
      "problem": "Bessie and Elsie were playing a game on a boolean array $A$ of length $2N$\n($1 \\leq N \\leq 10^5$). Bessie's score was the number of inversions in the first\nhalf of $A$, and Elsie's score was the number of inversions in the second half\nof $A$.  An inversion is a pair of entries $A[i]=1$ and $A[j]=0$ where $i&lt;j$. \nFor example, an array consisting of a block of 0s followed by a block of 1s has\nno inversions, and an array consisting of a block of $X$ 1s  follows by a block\nof $Y$ 0s has $XY$ inversions.\n\n<p>Farmer John has stumbled upon the game board and is curious to know the minimum\nnumber of swaps between adjacent elements needed so that the game looks like it\nwas a tie. Please help out Farmer John figure out the answer to this question.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file balance.in):</h4>\nThe first line of input contains $N$, and the next line contains $2N$ integers\nthat are either zero or one.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file balance.out):</h4>\nPlease write the number of adjacent swaps needed to make the game tied.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n0 0 0 1 0 1 0 0 0 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>In this example, the first half of the array initially has $1$ inversion, and\nthe second half has $3$ inversions. After swapping the $5$th and $6$th bits with\neach other, both subarrays have $0$ inversions.\n\n</p><p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=947"
    },
    {
      "title": "Problem 1. Milk Pumping",
      "subtitle": "USACO 2019 December Contest, Gold",
      "id": 969,
      "year": "2019",
      "division": "gold",
      "number": "1",
      "problem": "Farmer John has recently purchased a new farm to expand his milk production\nempire. The new farm is connected to a nearby town by a network of pipes, and FJ\nwants to figure out the best set of these pipes to purchase for his use in\npumping milk from the farm to the town.\n\n<p>The network of pipes is described by $N$ junction points (endpoints of pipes),\nconveniently numbered $1 \\ldots N$ ($2 \\leq N \\leq 1000$).  Junction point 1\nrepresents FJ's farm and junction point $N$ is the town.  There are $M$\nbi-directional pipes ($1 \\leq M \\leq 1000$), each joining a pair of junction\npoints.  The $i$th pipe costs $c_i$ dollars for FJ to purchase for his use, and\ncan support a flow rate of $f_i$ liters of milk per second.  \n\n</p><p>FJ wants to purchase a single path worth of pipes, where the endpoints of the\npath are junctions 1 and $N$.  The cost of the path is the sum of the costs of\nthe pipes along the path. The flow rate along the path is the minimum of the\nflow rates of the pipes along the path (since this serves as a bottleneck for\nthe flow traveling down the path). FJ wants to maximize the flow rate of the\npath divided by the cost of the path. It is guaranteed that a path from $1$ to\n$N$ exists.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-5 satisfy $N,M\\le 100.$ </li></ul>\n</div> \n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file pump.in):</h4>\nThe first line of input contains $N$ and $M.$ Each of the following $M$ lines\ndescribes a pipe in terms of four integers: $a$ and $b$ (the two different\njunctions connected by the pipe), $c$ (its cost), and $f$ (its flow rate). Cost\nand flow rate are both positive integers in the range\n$1 \\ldots 1000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file pump.out):</h4>\nPlease print $10^6$ times the optimal solution value, truncated to an integer\n(that is, rounded down to the next-lowest integer if this number is not itself\nan integer).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\n2 1 2 4\n2 3 5 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">428571\n</pre>\n\n<p>In this example, there is only one path from $1$ to $N.$ Its flow is $\\min(3,4)=3$ and its cost\nis $2+5=7.$\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=969"
    },
    {
      "title": "Problem 2. Milk Visits",
      "subtitle": "USACO 2019 December Contest, Gold",
      "id": 970,
      "year": "2019",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John is planning to build $N$ ($1 \\leq N \\leq 10^5$) farms that will be\nconnected by $N-1$ roads, forming a tree (i.e., all farms are reachable from\neach-other, and there are no cycles). Each farm contains a cow with an integer\ntype $T_i$ between $1$ and $N$ inclusive.\n\n<p>Farmer John's $M$ friends ($1 \\leq M \\leq 10^5$) often come to visit him. During\na visit with friend $i$, Farmer John will walk with his friend along the unique\npath of roads from farm $A_i$ to farm $B_i$ (it may be the case that\n$A_i = B_i$). Additionally, they can try some milk from any cow along the path\nthey walk. Since most of Farmer John's friends are also farmers, they have very\nstrong preferences regarding milk. Each of his friends will only drink milk from\na  certain type of cow. Any of Farmer John's friends will only be happy if they\ncan drink their preferred type of milk during their visit.\n\n</p><p>Please determine whether each friend will be happy after visiting.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test case 2 is the second example case below.</li><li>Test case 3 satisfies $N\\le 10^3, M\\le 2\\cdot 10^3$.</li><li>Test cases 4-7 satisfy $C_i\\le 10$ ($C_i$ defined below).</li></ul>\n</div> \n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file milkvisits.in):</h4>\nThe first line contains two integer $N$ and $M$. \n\n<p>The second line contains $N$ space-separated integers $T_1,T_2,\\ldots, T_N.$ The\ntype of the cow in the $i$-th farm is denoted by $T_i.$\n\n</p><p>The next $N-1$ lines each contain two distinct integers $X$ and $Y$ \n($1 \\leq X, Y \\leq N$), indicating that there is an edge between farms $X$ and\n$Y$. \n\n</p><p>The next $M$ lines contain integers $A_i$, $B_i$, and $C_i$. $A_i$ and $B_i$\nrepresent the endpoints of the path walked during friend $i$'s visit, while\n$C_i$ ($1\\le C_i\\le N$) indicates the type of cow whose milk the friend enjoys\ndrinking.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file milkvisits.out):</h4>\nPrint a binary string of length $M.$ The $i$th character of the string should be\n'1' if the $i$th friend will be happy, or '0' otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 5\n1 1 2 1 2\n1 2\n2 3\n2 4\n1 5\n1 4 1\n1 4 2\n1 3 2\n1 3 1\n5 5 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10110</pre>\n\n<p>In this example, the path from 1 and 4 involves farms 1, 2, and 4. All of these\ncontain cows of type 1, so the first friend will be satisfied while the second\none will not.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 4\n1 2 3 3 3 3\n1 2\n2 3\n3 4\n2 5\n5 6\n4 6 1\n4 6 2\n4 6 3\n4 6 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0110</pre>\n\n<p>\n</p><p>Problem credits: Spencer Compton\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=970"
    },
    {
      "title": "Problem 3. Moortal Cowmbat",
      "subtitle": "USACO 2019 December Contest, Gold",
      "id": 971,
      "year": "2019",
      "division": "gold",
      "number": "3",
      "problem": "Bessie has been playing the popular fighting game Moortal Cowmbat for a long\ntime now. However, the game developers have recently rolled out an update that\nis forcing Bessie to change her play style.\n\n<p>The game uses $M$ buttons labeled by the first $M$ lowercase letters\n($1 \\leq M \\leq 26$).  Bessie's favorite combo of moves in the game is a\nlength-$N$ string $S$ of button presses ($1 \\leq N \\leq 10^5$).  However, due to\nthe most recent update, every combo must now be made from a series of \"streaks\",\nwhere a streak is defined as a series of the same button pressed  at least $K$\ntimes in a row ($1 \\leq K \\leq N$). Bessie wants to modify her favorite combo to\nproduce a new combo of the same length $N$,  but made from streaks of button\npresses to satisfy the change in rules.\n\n</p><p>It takes $a_{ij}$ days for Bessie to train herself to press button $j$ instead\nof  button $i$ at any specific location in her combo (i.e. it costs $a_{ij}$ to\nchange a single specific letter in $S$ from $i$ to $j$).  Note that it might\ntake less time to switch from using button $i$ to an intermediate button $k$ and\nthen from  button $k$ to button $j$ rather than from $i$ to $j$ directly (or\nmore generally, there may be a path of changes starting with $i$ and ending with\n$j$ that gives the best overall cost for switching from button $i$ ultimately to\nbutton $j$).\n\n</p><p>Help Bessie determine the smallest possible number of days she needs to create a\ncombo that supports the new requirements.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $N\\le 1000, K\\le 50.$</li><li>Test cases 5-8 satisfy\n$N\\le 30,000, K\\le 50.$ </li></ul>\n</div> \n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowmbat.in):</h4>\nThe first line of input contains $N$, $M$, and $K$. The second line contains\n$S$, and the final $M$ lines contain an $M\\times M$ matrix of values  $a_{ij}$,\nwhere $a_{ij}$ is an integer in the range $0 \\ldots 1000$ and $a_{ii} = 0$ for\nall $i$.  \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowmbat.out):</h4>\nOutput a single number, representing the minimum number of days Bessie needs to\nchange her combo into one that satisfies the new requirements.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 5 2\nabcde\n0 1 4 4 4\n2 0 4 4 4\n6 5 0 3 2\n5 5 5 0 4\n3 7 0 5 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>The optimal solution in this example is to change the a into b, change the d into e, and then\nchange both e’s into c’s. This will take $1+4+0+0=5$ days, and the final\ncombo string will be bbccc.\n\n</p><p>\n</p><p>Problem credits: Eric Wei\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=971"
    },
    {
      "title": "Problem 1. Time is Mooney",
      "subtitle": "USACO 2020 January Contest, Gold",
      "id": 993,
      "year": "2020",
      "division": "gold",
      "number": "1",
      "problem": "Bessie is conducting a business trip in Bovinia, where there are $N$\n($2\\le N\\le 1000$) cities labeled $1\\ldots N$ connected by $M$\n($1\\le M\\le 2000$) one-way roads. Every time Bessie visits city $i,$ Bessie\nearns $m_i$ moonies ($0\\le m_i\\le 1000$). Starting at city 1 Bessie wants to\nvisit cities to make as much mooney as she can, ending back at city 1. To avoid\nconfusion, $m_1=0.$\n\n<p>Mooving between two cities via a road takes one day. Preparing for the trip is\nexpensive; it costs $C\\cdot T^2$ moonies to travel for $T$ days\n($1\\le C\\le 1000$).\n\n</p><p>What is the maximum amount of moonies Bessie can make in one trip? Note that it\nmay be optimal for Bessie to visit no cities aside from city 1, in which case\nthe answer would be zero.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file time.in):</h4>\nThe first line contains three integers $N$, $M$, and $C$.\n\n<p>The second line contains the $N$ integers $m_1,m_2,\\ldots m_N$.\n\n</p><p>The next $M$ lines each contain two space-separated integers $a$ and $b$\n($a\\neq b$) denoting a one-way road from city $a$ to city $b$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file time.out):</h4>\nA single line with the answer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 3 1\n0 10 20\n1 2\n2 3\n3 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">24\n</pre>\n\n<p>The optimal trip is $1\\to 2\\to 3 \\to 1\\to 2\\to 3\\to 1.$ Bessie makes \n$10+20+10+20-1\\cdot 6^2=24$ moonies in total.\n\n</p><p>\n</p><p>Problem credits: Richard Peng and Mark Gordon\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=993"
    },
    {
      "title": "Problem 2. Farmer John Solves 3SUM",
      "subtitle": "USACO 2020 January Contest, Gold",
      "id": 994,
      "year": "2020",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John believes he has made a major breakthrough in algorithm design: he\nclaims to have found a nearly linear time algorithm for the 3SUM problem, an\nalgorithmic problem famous for the fact that no known solution exists running\nin substantially better than quadratic time. One\nformulation of the 3SUM problem is the following: given an array $s_1,\\dots,s_m$\nof integers, count the number of unordered triples of distinct indices $i,j,k$\nsuch that\n$s_i + s_j + s_k = 0$.\n\n<p>To test Farmer John's claim, Bessie has provided an array $A$ of $N$ integers\n($1 \\leq N \\leq 5000$). Bessie also asks $Q$ queries ($1 \\leq Q \\leq 10^5$),\neach of which consists of two indices $1 \\leq a_i \\leq b_i \\leq N$. For each\nquery, Farmer John must solve the 3SUM problem on the subarray\n$A[a_i \\dots b_i]$.\n\n</p><p>Unfortunately, Farmer John has just discovered a flaw in his algorithm. He is\nconfident that he can fix the algorithm, but in the meantime, he asks that you\nhelp him pass Bessie's test!\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $N\\le 500.$</li><li>Test cases 5-7 satisfy\n$N\\le 2000.$</li><li>Test cases 8-15 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file threesum.in):</h4>\nThe first line contains two space-separated integers $N$ and $Q$. The second\nline contains the space-separated elements $A_1,\\dots,A_N$ of array $A$. Each of\nthe subsequent $Q$ lines contains two space-separated integers $a_i$ and $b_i$,\nrepresenting a query.\n\n<p>It is guaranteed that $-10^6 \\leq A_i \\leq 10^6$ for every array element $A_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file threesum.out):</h4>\nThe output should consist of $Q$ lines, with each line $i$ containing a single\ninteger---the answer to the $i$-th query. <strong>Note that you should use 64-bit\nintegers to avoid overflow. </strong>\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 3\n2 0 -1 1 -2 3 3\n1 5\n2 4\n1 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n1\n4\n</pre>\n\n<p>For the first query, the possible triples are $(A_1,A_2,A_5)$ and\n$(A_2,A_3,A_4).$\n\n</p><p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=994"
    },
    {
      "title": "Problem 3. Springboards",
      "subtitle": "USACO 2020 January Contest, Gold",
      "id": 995,
      "year": "2020",
      "division": "gold",
      "number": "3",
      "problem": "Bessie is in a 2D grid where walking is permitted only in directions parallel to\none of the coordinate axes. She starts at the point $(0,0)$ and wishes to reach\n$(N,N)$ ($1\\le N\\le 10^9$). To help her out, there are $P$ ($1\\le P\\le 10^5$)\nspringboards on the grid. Each springboard is at a fixed point $(x_1,y_1)$ and\nif Bessie uses it, she will land at a point\n$(x_2,y_2)$.\n\n<p>Bessie is a progress-oriented cow, so she only permits herself to walk up or\nright, never left nor down. Likewise, each springboard is configured to never go\nleft nor down. What is the minimum distance Bessie needs to walk?\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-5 satisfy $P \\le 1000$.</li><li>Test cases 6-15 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file boards.in):</h4>\nThe fist line contains two space-separated integers $N$ and $P$.\n\n<p>The next $P$ lines each contains four integers, $x_1$, $y_1$, $x_2$, $y_2$,\nwhere $x_1 \\le x_2$ and $y_1 \\le y_2.$\n\n</p><p>All springboard and target locations are distinct.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file boards.out):</h4>\nOutput a single integer, the minimum distance Bessie needs to walk to reach\n$(N,N)$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\n0 1 0 2\n1 2 2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>Bessie's best path is:\n</p><ul><li>\nBessie walks from (0,0) to (0,1) (1 unit).\n</li><li>\nBessie springs to (0,2).\n</li><li>\nBessie walks from (0,2) to (1,2) (1 unit).\n</li><li>\nBessie springs to (2,3).\n</li><li>\nBessie walks from (2,3) to (3,3) (1 unit).\n</li></ul>\nThe total walking length of Bessie's path is 3 units.\n\n<p>\n</p><p>Problem credits: Pedro Paredes\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=995"
    },
    {
      "title": "Problem 1. Timeline",
      "subtitle": "USACO 2020 February Contest, Gold",
      "id": 1017,
      "year": "2020",
      "division": "gold",
      "number": "1",
      "problem": "Bessie attended $N$ milking sessions ($1\\le N\\le 10^5$) over the past $M$ days\n($2 \\le M \\le 10^9$). However, she is having trouble remembering when she\nattended each session.\n\n<p>For each session $i = 1 \\ldots N$, she knows that it occurred no earlier than\nday $S_i$ ($1\\le S_i\\le M$). Additionally, Bessie has $C$ memories\n($1\\le C\\le 10^5$), each described by a triple $(a,b,x)$, where she recalls that\nsession $b$ happened at least $x$ days after $a$. \n\n</p><p>Help Bessie by computing the earliest possible date of occurrence for each\nmilking session.  It is guaranteed that  Bessie did not remember  incorrectly;\nin other words, there exists an assignment of sessions to days in the range\n$1\\ldots M$ such that all constraints from her memories are satisfied.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 2-4 satisfy $N,C \\le 10^3$.</li><li>Test cases 5-10 satisfy no additional constraints.</li></ul>\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file timeline.in):</h4>\nThe first line of input contains $N$, $M$, and $C$.\n\n<p>The next line contains $N$ space-separated integers $S_1,S_2,\\ldots, S_N$.  Each\nis in the range $1 \\ldots M$.\n\n</p><p>The next $C$ lines contain three integers, $a$, $b$, and $x$ indicating that\nsession $b$ happened at least $x$ days after $a$.  For each line, $a \\neq b$,\n$a$ and $b$ are in the range $1 \\ldots N$, and $x$ is in the range $1 \\ldots M$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file timeline.out):</h4>\nOutput $N$ lines giving the earliest possible date of occurrence for each\nsession.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 10 3\n1 2 3 4\n1 2 5\n2 4 2\n3 4 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n6\n3\n8\n</pre>\n\n<p>Session two occurred at least five days after session one, so it cannot have\noccurred before day $1+5=6.$ Session four occurred at least two days after session\ntwo, so it cannot have occurred before day $6+2=8$.\n\n</p><p>\n</p><p>Problem credits: Mark Gordon\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1017"
    },
    {
      "title": "Problem 2. Help Yourself",
      "subtitle": "USACO 2020 February Contest, Gold",
      "id": 1018,
      "year": "2020",
      "division": "gold",
      "number": "2",
      "problem": "Bessie has been given $N$ segments ($1\\le N\\le 10^5$) on a 1D number line. The\n$i$th segment contains all reals $x$ such that $l_i\\le x\\le r_i$.\n\n<p>Define the <strong>union</strong> of a set of segments to be the set of all $x$ that are \ncontained within at least one segment. Define the <strong>complexity</strong> of a set of \nsegments to be the number of connected regions represented in its union.\n\n</p><p>Bessie wants to compute the sum of the complexities over all $2^N$ subsets of\nthe given set of $N$ segments, modulo $10^9+7$.\n\n</p><p>Normally, your job is to help Bessie. But this time, you are Bessie, and there's\nno one to help you. Help yourself!\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 2-3 satisfy $N\\le 16$.</li><li>Test cases 4-7 satisfy $N\\le 1000$.</li><li>Test cases 8-12 satisfy no additional constraints.</li></ul>\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file help.in):</h4>\nThe first line contains $N$.\n\n<p>Each of the next $N$ lines contains two integers $l_i$ and $r_i$. It is\nguaranteed that $l_i&lt; r_i$ and all $l_i,r_i$ are distinct integers in the range\n$1 \\ldots 2N.$\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file help.out):</h4>\nOutput the answer, modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 6\n2 3\n4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n</pre>\n\n<p>The complexity of each nonempty subset is written below.\n\n</p><p></p><div class=\"math\">$$\\{[1,6]\\} \\implies 1, \\{[2,3]\\} \\implies 1, \\{[4,5]\\} \\implies 1$$</div>\n\n<p></p><div class=\"math\">$$\\{[1,6],[2,3]\\} \\implies 1, \\{[1,6],[4,5]\\} \\implies 1, \\{[2,3],[4,5]\\} \\implies 2$$</div>\n\n<p></p><div class=\"math\">$$\\{[1,6],[2,3],[4,5]\\} \\implies 1$$</div>\n\n<p>The answer is $1+1+1+1+1+2+1=8$.\n\n</p><p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1018"
    },
    {
      "title": "Problem 3. Delegation",
      "subtitle": "USACO 2020 February Contest, Gold",
      "id": 1019,
      "year": "2020",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John's farm consists of $N$ pastures ($2 \\leq N \\leq 10^5$) connected by\n$N-1$ roads, so that any pasture is reachable from any other pasture. That is,\nthe farm is a tree. But after 28 years of dealing with the tricky algorithmic\nproblems that inevitably arise from trees, FJ has decided that a farm in the\nshape of a tree is just too complex. He believes that algorithmic problems are\nsimpler on paths.\n\n<p>Thus, his plan is to partition the set of roads into several paths, and delegate\nresponsibility for each path to a worthy farm hand. To avoid contention, he\nwants each path to be the same length. He wonders for which lengths there exists\nsuch a partition.\n\n</p><p>More precisely, for each $1 \\leq K \\leq N-1$, help Farmer John determine whether\nthe roads can be partitioned into paths of length exactly $K$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>In test cases 2-4 the tree forms a star; at most one vertex has degree\ngreater than two.</li><li>Test cases 5-8 satisfy $N\\le 10^3$.</li><li>Test cases 9-15 satisfy no additional constraints..</li></ul>\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file deleg.in):</h4>\nThe first line contains a single integer $N$. \n\n<p>The next $N-1$ lines each contain two space-separated integers $a$ and $b$\ndescribing an edge between vertices $a$ and $b$.  Each of $a$ and $b$ is in the\nrange $1 \\ldots N$. \n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file deleg.out):</h4>\nOutput a bit string of length $N-1.$ For each $1\\le K\\le N-1,$ the $K$th bit of\nthis string from the left should equal one if it is possible to partition the edges of the\ntree into paths of length exactly $K$ and $0$ otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">13\n1 2\n2 3\n2 4\n4 5\n2 6\n6 7\n6 8\n8 9\n9 10\n8 11\n11 12\n12 13\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">111000000000</pre>\n\n<p>It is possible to partition this tree into paths of length $K$ for $K=1,2,3.$\nFor $K=3$, a possible set of paths is as follows:\n\n</p><p></p><div class=\"math\">$$13-12-11-8, 10-9-8-6, 7-6-2-3, 5-4-2-1$$</div>\n\n<p>\n</p><p>Problem credits: Mark Gordon and Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1019"
    },
    {
      "title": "Problem 1. Haircut",
      "subtitle": "USACO 2020 US Open Contest, Gold",
      "id": 1041,
      "year": "2020",
      "division": "gold",
      "number": "1",
      "problem": "Tired of his stubborn cowlick, Farmer John decides to get a haircut. He has $N$\n($1\\le N\\le 10^5$) strands of hair arranged in a line, and strand $i$ is\ninitially $A_i$ micrometers long ($0\\le A_i\\le N$). Ideally, he wants his hair\nto be monotonically increasing in length, so he defines the \"badness\" of his\nhair as the number of inversions: pairs $(i,j)$ such that $i &lt; j$ and\n$A_i &gt; A_j$.\n\n<p>For each of $j=0,1,\\ldots,N-1$, FJ would like to know the badness of his hair if\nall strands with length greater than $j$ are decreased to length exactly $j$.\n\n</p><p>(Fun fact: the average human head does indeed have about $10^5$ hairs!)\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file haircut.in):</h4>\nThe first line contains $N$.\n\n<p>The second line contains $A_1,A_2,\\ldots,A_N.$\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file haircut.out):</h4>\nFor each of $j=0,1,\\ldots,N-1$, output the badness of FJ's hair on a new line.\n\n<p>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n5 2 3 3 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n4\n4\n5\n7\n</pre>\n\n<p>The fourth line of output describes the number of inversions when FJ's hairs are\ndecreased to length 3. Then $A=[3,2,3,3,0]$ has five inversions: \n$A_1&gt;A_2,\\,A_1&gt;A_5,\\,A_2&gt;A_5,\\,A_3&gt;A_5,$ and $A_4&gt;A_5$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test case 2 satisfies $N\\le 100.$</li><li>Test cases 3-5 satisfy $N\\le 5000.$</li><li>Test cases 6-13 satisfy no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1041"
    },
    {
      "title": "Problem 2. Favorite Colors",
      "subtitle": "USACO 2020 US Open Contest, Gold",
      "id": 1042,
      "year": "2020",
      "division": "gold",
      "number": "2",
      "problem": "Each of Farmer John's $N$ cows ($1\\le N\\le 2\\cdot 10^5$) has a favorite color.\nThe cows are conveniently labeled $1\\ldots N$ (as always), and each color can be\nrepresented by an integer in the range $1\\ldots N$.\n\n<p>There exist $M$ pairs of cows $(a,b)$ such that cow\n$b$ admires cow $a$ ($1\\le M\\le 2\\cdot 10^5$). It is possible that $a=b$, in which case a cow admires\nherself. For any color $c$, if cows $x$ and $y$ both admire a cow with favorite\ncolor $c$, then $x$ and $y$ share the same favorite color.\n\n</p><p>Given this information, determine an assignment of cows to favorite colors such\nthat the number of distinct favorite colors among all cows is maximized.  As\nthere are multiple assignments that satisfy this property, output the\nlexicographically smallest one (meaning that you should take the assignment that\nminimizes the colors assigned to cows $1\\ldots N$ in that order).\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file fcolor.in):</h4>\nThe first line contains $N$ and $M$.\n\n<p>The next $M$ lines each contain two space-separated integers $a$ and $b$\n($1\\le a,b\\le N$), denoting that cow $b$ admires cow $a$. The same pair may\nappear more than once in the input.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file fcolor.out):</h4>\nFor each $i$ in $1\\ldots N$, output the color of cow $i$ in the desired\nassignment on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">9 12\n1 2\n4 2\n5 8\n4 6\n6 9\n2 9\n8 7\n8 3\n7 1\n9 4\n3 5\n3 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n2\n3\n1\n1\n2\n3\n2\n3\n</pre>\n\n<p>In the image below, the circles with bolded borders represent the cows with \nfavorite color 1.\n\n</p><figure><img src=\"http://www.usaco.org/current/data/fig_fcolor_gold_open20.png\"><figcaption></figcaption></figure>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $N,M\\le 10^3$. </li><li>Test cases 4-10 satisfy no additional constraints. </li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: William Lin and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1042"
    },
    {
      "title": "Problem 3. Exercise",
      "subtitle": "USACO 2020 US Open Contest, Gold",
      "id": 1043,
      "year": "2020",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John has come up with a new morning exercise routine for the cows\n(again)!\n\n<p>As before, Farmer John's $N$ cows ($1\\le N\\le 10^4$) are standing in a line. \nThe $i$-th cow from the left has label $i$ for each $1\\le i\\le N$. He tells them\nto repeat the following step until the cows are in the same order as when they\nstarted.\n\n</p><p></p><ul><li>Given a permutation $A$ of length $N$, the cows change their order such that\nthe $i$-th cow from the left before the change is $A_i$-th from the left after\nthe change. </li></ul>\n\n<p>For example, if $A=(1,2,3,4,5)$ then the cows perform one step. If \n$A=(2,3,1,5,4)$, then the cows perform six steps. The order of the cows from\nleft to right after each step is as follows:\n\n</p><p></p><ul><li>0 steps: $(1,2,3,4,5)$</li><li>1 step: $(3,1,2,5,4)$</li><li>2 steps: $(2,3,1,4,5)$</li><li>3 steps: $(1,2,3,5,4)$</li><li>4 steps: $(3,1,2,4,5)$</li><li>5 steps: $(2,3,1,5,4)$</li><li>6 steps: $(1,2,3,4,5)$</li></ul>\n\n<p>Find the sum of all positive integers $K$ such that there exists a permutation\nof length $N$ that requires the cows to take exactly $K$ steps. \n\n</p><p>As this number may be very large, output the answer modulo $M$\n($10^8\\le M\\le 10^9+7$, $M$ is prime).\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file exercise.in):</h4>\nThe first line contains $N$ and $M$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file exercise.out):</h4>\nA single integer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 1000000007\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">21\n</pre>\n\n<p>There exist permutations that cause the cows to take $1$, $2$, $3$, $4$, $5$,\nand $6$ steps. Thus, the answer is $1+2+3+4+5+6=21$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 2-5 satisfy $N\\le 10^2$.</li><li>Test cases 6-10 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1043"
    },
    {
      "title": "Problem 1. Replication",
      "subtitle": "USACO 2020 December Contest, Gold",
      "id": 1065,
      "year": "2020",
      "division": "gold",
      "number": "1",
      "problem": "The ill-fated result of watching too many \"do it yourself\" engineering videos on\nthe web, Farmer John has accidentally released a self-replicating robot on his\nfarm! \n\n<p>The farm can be represented by an $N\\times N$ grid ($3\\le N\\le 1000$) where \neach grid cell is either empty or filled with rock, and all border squares are \nfilled with rock.  Some non-rock cells are designated as possible starting \nlocations for the robot.\n\n</p><p>Farmer John initially places the robot at one of the possible starting\npositions. In every hour that follows, all copies of the robot move in one\ncoordinated mass in the same direction, either north, south, east, or west. \nAfter every $D$ hours ($1 \\leq D \\leq 10^9$), every copy of the robot replicates\n--- a robot at cell $(x,y)$ that replicates creates new copies in cells\n$(x+1,y)$, $(x-1,y)$, $(x,y+1)$, and $(x,y-1)$; the original robot remains at\n$(x,y)$.  Over time, multiple robots might come to  occupy the same cell.\n\n</p><p>If moving or replicating would cause any of the robots to move into a rock, then\nall robots shut down immediately.  Note that this implies that the robots must\neventually shut down, due to the border of the farm being rock.\n\n</p><p>Help the cows figure out the number of empty squares that could potentially at\nsome point in time hold a robot.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains two space-separated integers $N$ and $D$. The next $N$ lines of input each contain $N$ characters. Each character is one\nof '.', 'S', or '#'. '.' and 'S' both represent empty cells, with 'S' denoting\na possible starting position for the robot. '#' denotes a rock.\n\n<p>All characters in the first and last row and first and last column are '#'.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nAn integer counting the number of cells that could at some point in time hold a\nrobot.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 1\n##########\n#........#\n#S.......#\n#........#\n##########\n#S....S..#\n##########\n##########\n##########\n##########\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">15\n</pre>\n\n<p>In the following diagrams, x's denote robots.\n\n</p><p>Locations that could be occupied by robots:\n\n</p><p></p><pre>##########\n#xxx.....#\n#xxxx....#\n#xxx.....#\n##########\n#xx..xxx.#\n##########\n##########\n##########\n##########\n</pre>\n\n<p>One possible sequence of events could be as follows:\n\n</p><p></p><ul><li>FJ places the robot at the upper-left-most starting position.</li><li>The robot moves one unit to the right.</li><li>The robot replicates.</li><li>All robots move one unit to the right.</li><li>Another replication would cause a copy of the robot to move into a rock, so\nthe process terminates.</li></ul>\n\n<p></p><pre>##########    ##########    ##########    ##########\n#........#    #........#    #.x......#    #..x.....#\n#x.......#    #.x......#    #xxx.....#    #.xxx....#\n#........#    #........#    #.x......#    #..x.....#\n########## -&gt; ########## -&gt; ########## -&gt; ##########\n#........#    #........#    #........#    #........#\n##########    ##########    ##########    ##########\n##########    ##########    ##########    ##########\n##########    ##########    ##########    ##########\n##########    ##########    ##########    ##########\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 2\n##########\n#.#......#\n#.#......#\n#S.......#\n#.#......#\n#.#......#\n##########\n##########\n##########\n##########\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">28\n</pre>\n\n<p>Locations that could be occupied by robots:\n\n</p><p></p><pre>##########\n#x#.xxx..#\n#x#xxxxx.#\n#xxxxxxxx#\n#x#xxxxx.#\n#x#.xxx..#\n##########\n##########\n##########\n##########\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 2\n##########\n#.S#.....#\n#..#.....#\n#S.......#\n#..#.....#\n#..#.....#\n##########\n##########\n##########\n##########\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>Locations that could be occupied by robots:\n\n</p><p></p><pre>##########\n#xx#.....#\n#xx#.....#\n#xxx.....#\n#xx#.....#\n#x.#.....#\n##########\n##########\n##########\n##########\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 4-5 satisfy $D=10^9$.</li><li>Test cases 6-8 satisfy $D=1$.</li><li>Test cases 9-12 satisfy $N\\le 100$.</li><li>Test cases 13-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1065"
    },
    {
      "title": "Problem 2. Bovine Genetics",
      "subtitle": "USACO 2020 December Contest, Gold",
      "id": 1066,
      "year": "2020",
      "division": "gold",
      "number": "2",
      "problem": "After sequencing the genomes of his cows, Farmer John has moved onto genomic\nediting! As we know, a genome can be represented by a string consisting of As,\nCs, Gs, and Ts.  The maximum length of a genome under consideration by Farmer\nJohn is $10^5$. \n\n<p>Farmer John starts with a single genome and edits it by performing the following\nsteps:\n\n</p><p></p><ol><li>Split the genome between every two consecutive equal characters.</li><li>Reverse each of the resulting substrings.</li><li>Concatenate the reversed substrings together in the same order.</li></ol>\n\n<p>For example, if FJ started with the genome AGGCTTT then he would perform the\nfollowing steps:\n\n</p><p></p><ol><li>Split between the consecutive Gs and Ts to get AG | GCT | T | T.</li><li>Reverse each substring to get GA | TCG | T | T.</li><li>Concatenate the substrings together to get GATCGTT.</li></ol>\n\n<p>Unfortunately, after editing the genome, Farmer John's computer crashed and he\nlost the sequence of the genome he originally started with. Furthermore, some \nparts of the edited genome have been damaged, meaning that they have been \nreplaced by question marks.\n\n</p><p>Given the sequence of the edited genome, help FJ determine the number of \npossibilities for the original genome, modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nA non-empty string where each character is one of A, G, C, T, or ?.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of possible original genomes modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">?\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>The question mark can be any of A, G, C, or T.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">GAT?GTT\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>There are two possible original genomes aside from AGGCTTT, which was described\nabove.\n\n</p><p></p><pre>AGGATTT -&gt; AG | GAT | T | T -&gt; GA | TAG | T | T -&gt; GATAGTT\n\nTAGGTTT -&gt; TAG | GT | T | T -&gt; GAT | TG | T | T -&gt; GATTGTT\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 1-4, the genome has length at most $10$.</li><li>In test cases 5-11, the genome has length at most $10^2$.</li><li>In test cases 12-20, there are no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1066"
    },
    {
      "title": "Problem 3. Square Pasture",
      "subtitle": "USACO 2020 December Contest, Gold",
      "id": 1067,
      "year": "2020",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John's largest pasture can be regarded as a large 2D grid of square\n\"cells\" (picture a huge chess board).  Currently, there are $N$ cows occupying\nsome of these cells ($1 \\leq N \\leq 200$).  \n\n<p>Farmer John wants to build a fence that will enclose a square region of cells;\nthe square must be oriented so its sides are parallel with the $x$  and $y$\naxes, and it could be as small as a single cell.  Please help him count the\nnumber of distinct subsets of cows that he can enclose in such a region.  Note\nthat the empty subset should be counted as one of these.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains a single integer $N$.  Each of the next $N$ lines Each\nof the next $N$ lines contains two space-separated integers,  indicating the\n$(x,y)$ coordinates of a cow's cell.  All $x$ coordinates are distinct from\neach-other, and all $y$ coordinates are distinct from each-other.  All $x$ and\n$y$ values lie in the range $0 \\ldots 10^9$.\n</div>\n\n<p>Note that although the coordinates of cells with cows are nonnegative, the \nsquare fenced area might possibly extend into cells with negative coordinates.\n\n</p><p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of subsets of cows that FJ can fence off. It can be shown that this\nquantity fits within a signed 32-bit integer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n0 2\n2 3\n3 1\n1 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">14\n</pre>\n\n<p>In this example, there are $2^4$ subsets in total. FJ cannot create a fence enclosing only cows 1\nand 3, or only cows 2 and 4, so the answer is $2^4-2=16-2=14$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">16\n17 4\n16 13\n0 15\n1 19\n7 11\n3 17\n6 16\n18 9\n15 6\n11 7\n10 8\n2 1\n12 0\n5 18\n14 5\n13 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">420\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 1-5, all coordinates of cells containing cows are less than\n$20$.</li><li>In test cases 6-10, $N\\le 20$.</li><li>In test cases 11-20, there are no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1067"
    },
    {
      "title": "Problem 1. Uddered but not Herd",
      "subtitle": "USACO 2021 January Contest, Gold",
      "id": 1089,
      "year": "2021",
      "division": "gold",
      "number": "1",
      "problem": "A little known fact about cows is that they have their own version of the\nalphabet, the \"cowphabet\". It consists of the 26 letters 'a' through 'z', but\nwhen a cow speaks the cowphabet, she lists these letters in a specific ordering\nthat might be different from the order 'abcdefghijklmnopqrstuvwxyz' we are used\nto hearing.\n\n<p>To pass the time, Bessie's cousin Mildred has been humming the cowphabet over\nand  over again, and Farmer Nhoj is curious how many times she's hummed it.\n\n</p><p>Given a lowercase string of letters that Farmer Nhoj has heard Mildred say,\ncompute the minimum number of times Mildred must have hummed the entire\ncowphabet in order for Farmer Nhoj to have heard the given string. Farmer Nhoj\nisn't always paying attention to what Mildred hums, and so he might have missed\nsome of the letters that Mildred has hummed. The string you are told consists of\njust the letters that he remembers hearing.\n\n</p><p>Note: the time limit per test case on this problem is twice the default.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe only line of input contains the string  of lowercase letters that Farmer\nNhoj heard Mildred say.  This string has length at least $1$ and at most $10^5$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint the minimum number of times Mildred must have hummed the entire cowphabet.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">mildredree\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3</pre>\n\n<p>Mildred must have hummed the cowphabet at least three times. It is possible for\nMildred to have only hummed the cowphabet three times if the cowphabet starts\nwith \"mildre\" and Farmer Nhoj heard the letters in uppercase as denoted below.\n\n</p><p></p><pre>MILDREabcfghjknopqstuvwxyz\nmilDREabcfghjknopqstuvwxyz\nmildrEabcfghjknopqstuvwxyz\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 1-5, Farmer Nhoj only heard letters that appear in Mildred's\nor Bessie's names.</li><li>In test cases 6-16, Farmer Nhoj never heard any of the letters that appear\nin Mildred's name.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Nick Wu and Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1089"
    },
    {
      "title": "Problem 2. Telephone",
      "subtitle": "USACO 2021 January Contest, Gold",
      "id": 1090,
      "year": "2021",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John's $N$ cows, conveniently numbered $1 \\ldots N$, are standing in a\nline ($1\\le N\\le 5\\cdot 10^4$).  The $i$th cow has a breed identifier $b_i$ in\nthe range $1 \\ldots K$, with $1\\le K\\le 50$.  The cows need your help to figure\nout how to best transmit a message from cow $1$ to cow $N$. \n\n<p>It takes $|i-j|$ time to transmit a message from cow $i$ to cow $j$.  However,\nnot all breeds are willing to communicate with each other, as described by a\n$K \\times K$ matrix $S$, where $S_{ij} = 1$ if a cow of breed $i$ is willing to \ntransmit a message to a cow of breed $j$, and $0$ otherwise.  It is not\nnecessarily true that $S_{ij}=S_{ji}$, and it may even be the case  that\n$S_{ii} = 0$ if cows of breed $i$ are unwilling to communicate with each-other.\n\n</p><p>Please determine the minimum amount of time needed to transmit the message.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $K$.\n\n<p>The next line contains $N$ space-separated integers $b_1,b_2,\\ldots,b_N$.\n\n</p><p>The next $K$ lines describe the matrix $S$.  Each consists of a string of  $K$\nbits, $S_{ij}$ being the $j$th bit of the $i$th string from the top.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint a single integer giving the minimum amount of time needed.  If it is\nimpossible to transmit the message from cow $1$ to cow $N$, then  output $-1$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 4\n1 4 2 3 4\n1010\n0001\n0110\n0100\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\n\n<p>The optimal sequence of transmissions is $1\\to 4\\to 3\\to 5$. The total amount of\ntime is $|1-4|+|4-3|+|3-5|=6$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-5 satisfy $N\\le 1000$.</li><li>Test cases 6-13 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1090"
    },
    {
      "title": "Problem 3. Dance Mooves",
      "subtitle": "USACO 2021 January Contest, Gold",
      "id": 1091,
      "year": "2021",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John’s cows are showing off their new dance mooves! \n\n<p>At first, all $N$ cows ($2\\le N\\le 10^5$) stand in a line with cow $i$ in the\n$i$th position in line.  The sequence of dance mooves is given by $K$\n($1\\le K\\le 2\\cdot 10^5$) pairs of positions\n$(a_1,b_1), (a_2,b_2), \\ldots, \n(a_{K},b_{K})$.  In each minute $i = 1 \\ldots K$\nof the dance, the cows in positions $a_i$ and $b_i$ in line swap.  The same $K$\nswaps happen again in minutes $K+1 \\ldots 2K$, again in minutes\n$2K+1 \\ldots 3K$, and so on, continuing in a cyclic fashion for a total of $M$\nminutes ($1\\le M\\le 10^{18}$).  In other words,\n\n</p><p></p><ul><li>In minute $1$, the cows at positions $a_1$ and $b_1$ swap. </li><li>In minute $2$, the cows at positions $a_2$ and $b_2$ swap. </li><li>...</li><li>In minute $K$, the cows in positions $a_{K}$ and $b_{K}$ swap.</li><li>In minute $K+1$, the cows in positions $a_{1}$ and $b_{1}$ swap.</li><li>In minute $K+2$, the cows in positions $a_{2}$ and $b_{2}$ swap.</li><li>and so on ...</li></ul>\n\n<p>For each cow, please determine the number of unique positions in the line she\nwill ever occupy.\n\n</p><p>Note: the time limit per test case on this problem is twice the default.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains integers $N$, $K$, and $M$.  Each of the next $K$ lines \ncontains $(a_1,b_1) \\ldots (a_K, b_K)$ ($1\\le a_i&lt;b_i\\le N$).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint $N$ lines of output, where the $i$th line contains the number of unique\npositions that cow $i$ reaches.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 4 7\n1 2\n2 3\n3 4\n4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n4\n3\n3\n3\n1\n</pre>\n\n<p>After $7$ minutes, the cows in increasing order of position are $[3,4,5,2,1,6]$.\n\n</p><p></p><ul><li>Cow $1$ reaches positions $\\{1,2,3,4,5\\}$.</li><li>Cow $2$ reaches positions $\\{1,2,3,4\\}$.</li><li>Cow $3$ reaches positions $\\{1,2,3\\}$.</li><li>Cow $4$ reaches positions $\\{2,3,4\\}$.</li><li>Cow $5$ reaches positions $\\{3,4,5\\}$.</li><li>Cow $6$ never moves, so she never leaves position $6$.</li></ul>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 1-5 satisfy $N\\le 100, K\\le 200$.</li><li>Test cases 6-10 satisfy $M=10^{18}$.</li><li>Test cases 11-20 satisfy no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Chris Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1091"
    },
    {
      "title": "Problem 1. Stone Game",
      "subtitle": "USACO 2021 February Contest, Gold",
      "id": 1113,
      "year": "2021",
      "division": "gold",
      "number": "1",
      "problem": "Bessie and Elsie are playing a game with $N$ ($1\\le N\\le 10^5$) piles of stones,\nwhere the $i$-th pile has $a_i$ stones for each $1\\le i\\le N$ \n($1\\le a_i\\le 10^6$). The two cows alternate turns, with Bessie going first.\n\n<p></p><ul><li>First, Bessie chooses some positive integer $s_1$ and removes $s_1$ stones\nfrom some pile with at least $s_1$ stones. </li><li>Then Elsie chooses some positive integer $s_2$ such that $s_1$ divides $s_2$\nand removes $s_2$ stones from some pile with at least $s_2$ stones. </li><li>Then Bessie chooses some positive integer $s_3$ such that $s_2$ divides\n$s_3$ and removes $s_3$ stones from some pile with at least $s_3$ stones and so\non. </li><li>In general, $s_i$, the number of stones removed on turn $i$, must divide\n$s_{i+1}$.</li></ul> \n\n<p>The first cow who is unable to remove stones on her turn loses.\n\n</p><p>Compute the number of ways Bessie can remove stones on her first turn in order\nto guarantee a win (meaning that there exists a strategy such that Bessie wins\nregardless of what choices Elsie makes). Two ways of removing stones are\nconsidered to be different if they remove a different number of stones or they\nremove stones from different piles.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The second line contains $N$ space-separated integers $a_1,\\ldots,a_N$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint the number of ways Bessie can remove stones on her first turn in order\nto guarantee a win.\n\n<p>Note that the large size of integers involved in this problem may require the use of 64-bit integer data types (e.g., a \"long long\" in C/C++).\n\n</p><p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1\n7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>Bessie wins if she removes $4$, $5$, $6$, or $7$ stones from the only pile. Then\nthe game terminates immediately.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n3 2 3 2 3 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n</pre>\n\n<p>Bessie wins if she removes $2$ or $3$ stones from any pile. Then the two players\nwill alternate turns removing the same number of stones, with Bessie making the\nlast move.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 3-5 satisfy $N=2$.</li><li>Test cases 6-10 satisfy $N,a_i\\le 100$.</li><li>Test cases 11-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1113"
    },
    {
      "title": "Problem 2. Modern Art 3",
      "subtitle": "USACO 2021 February Contest, Gold",
      "id": 1114,
      "year": "2021",
      "division": "gold",
      "number": "2",
      "problem": "Having become bored with standard 2-dimensional artwork (and also frustrated at\nothers copying her work), the great bovine artist Picowso has decided to switch\nto a more minimalist, 1-dimensional style. Her latest painting can be described\nby a 1-dimensional array of colors of length $N$ ($1 \\leq N \\leq 300$), where\neach color is specified by an integer in the range $1\\ldots N$.\n\n<p>To Picowso's great dismay, her competitor Moonet seems to have figured out how\nto copy even these 1-dimensional paintings! Moonet will paint a single interval\nwith a single color, wait for it to dry, then paint another interval, and so on.\nMoonet can use each of the $N$ colors as many times as she likes (possibly\nnone). \n\n</p><p>Please compute the number of such brush strokes needed for Moonet to copy\nPicowso's latest 1-dimensional painting.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$.\n\n<p>The next line contains $N$ integers in the range $1 \\ldots N$ indicating the\ncolor of each cell in Picowso's latest 1-dimensional painting.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the minimum number of brush strokes needed to copy the painting.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10\n1 2 3 4 1 4 3 2 1 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\n\n<p>In this example, Moonet may paint the array as follows. We denote an unpainted\ncell by\n$0$.\n\n</p><p></p><ul><li>Initially, the entire array is unpainted:\n\n<p></p><pre>0 0 0 0 0 0 0 0 0 0\n</pre>\n\n<p></p></li><li>Moonet paints the first nine cells with color $1$:\n\n<p></p><pre>1 1 1 1 1 1 1 1 1 0\n</pre>\n\n<p></p></li><li>Moonet paints an interval with color $2$:\n\n<p></p><pre>1 2 2 2 2 2 2 2 1 0\n</pre>\n\n<p></p></li><li>Moonet paints an interval with color $3$:\n\n<p></p><pre>1 2 3 3 3 3 3 2 1 0\n</pre>\n\n<p></p></li><li>Moonet paints an interval with color $4$:\n\n<p></p><pre>1 2 3 4 4 4 3 2 1 0\n</pre>\n\n<p></p></li><li>Moonet paints a single cell with color $1$:\n\n<p></p><pre>1 2 3 4 1 4 3 2 1 0\n</pre>\n\n<p></p></li><li>Moonet paints the last cell with color $6$:\n\n<p></p><pre>1 2 3 4 1 4 3 2 1 6\n</pre>\n</li></ul>\n\n<p>Note that during the first brush stroke, Moonet could have painted the tenth cell with\ncolor $1$ in addition to the first nine cells without affecting the final state\nof the array.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 2-4, only colors $1$ and $2$ appear in the painting.</li><li>In test cases 5-10, the color of the $i$-th cell is in the range \n$\\left[12\\left\\lfloor\\frac{i-1}{12}\\right\\rfloor+1,12\\left\\lfloor\\frac{i-1}{12}\\right\\rfloor+12\\right]$\nfor each $1\\le i\\le N$.</li><li>Test cases 11-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Brian Dean and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1114"
    },
    {
      "title": "Problem 3. Count the Cows",
      "subtitle": "USACO 2021 February Contest, Gold",
      "id": 1115,
      "year": "2021",
      "division": "gold",
      "number": "3",
      "problem": "As is typical, Farmer John's cows have spread themselves out along his largest\npasture, which can be regarded as a large 2D grid of square \"cells\" (picture a\nhuge chessboard).  \n\n<p>The pattern of cows across the pasture is quite fascinating.  For\nevery cell $(x,y)$ with $x\\ge 0$ and $y\\ge 0$, there exists a cow at\n$(x,y)$ if for all integers $k\\ge 0$, the remainders when\n$\\left\\lfloor \\frac{x}{3^k}\\right\\rfloor$ and $\\left\\lfloor\n\\frac{y}{3^k}\\right\\rfloor$ are divided by three have the same\nparity. In other words, both of these remainders are odd (equal to\n$1$), or both of them are even (equal to $0$ or $2$).  For example,\nthe cells satisfying $0\\le x,y&lt;9$ that contain cows are denoted by\nones in the diagram below.\n\n</p><p></p><pre>        x\n    012345678\n\n  0 101000101\n  1 010000010\n  2 101000101\n  3 000101000\ny 4 000010000\n  5 000101000\n  6 101000101\n  7 010000010\n  8 101000101\n</pre>\n\n<p>FJ is curious how many cows are present in certain regions of his\npasture.  He asks $Q$ queries, each consisting of three integers\n$x_i,y_i,d_i$.  For each query, FJ wants to know how many cows lie in\nthe cells along the diagonal range from $(x_i,y_i)$ to\n$(x_i+d_i,y_i+d_i)$ (endpoints inclusive).\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $Q$ ($1\\le Q\\le 10^4$), the number of queries.\n\n<p>The next $Q$ lines each contain three integers $d_i$, $x_i$, and $y_i$\n($0\\le x_i,y_i,d_i\\le 10^{18}$).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n$Q$ lines, one for each query.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8\n10 0 0\n10 0 1\n9 0 2\n8 0 2\n0 1 7\n1 1 7\n2 1 7\n1000000000000000000 1000000000000000000 1000000000000000000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">11\n0\n4\n3\n1\n2\n2\n1000000000000000001\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test case 2 satisfies $d_i\\le 100$ for each query.</li><li>Test cases 3-6 satisfy $x+d=3^{30}-1$ and $y=0$ for each query.</li><li>Test cases 7-12 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1115"
    },
    {
      "title": "Problem 1. United Cows of Farmer John",
      "subtitle": "USACO 2021 US Open, Gold",
      "id": 1137,
      "year": "2021",
      "division": "gold",
      "number": "1",
      "problem": "The United Cows of Farmer John (UCFJ) are sending a delegation to the\nInternational bOvine olympIad (IOI).\n\n<p>There are $N$ cows participating in delegation selection\n($1 \\leq N \\leq 2 \\cdot 10^5$). They are standing in a line, and cow $i$ has\nbreed $b_i$.\n\n</p><p>The delegation will consist of a contiguous interval of at least two cows - that\nis, cows  $l\\ldots r$ for integers $l$ and $r$ satisfying $1\\le l&lt;r\\le N$. The\ntwo outermost cows of the chosen interval will be designated as \"leaders.\" To\navoid intra-breed conflict, every leader must be of a different breed from the\nrest of the delegation (leaders or not).\n\n</p><p>Help the UCFJ determine (for tax reasons) the number of ways they might choose a\ndelegation to send to the IOI.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The second line contains $N$ integers $b_1,b_2,\\ldots,b_N$, each in the range\n$[1,N]$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of possible delegations, on a single line.\n\n<p><strong>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n1 2 3 4 3 2 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">13\n</pre>\n\n<p>Each delegation corresponds to one of the following pairs of leaders:\n</p><div class=\"math\">$$(1,2),(1,3),(1,4),(1,7),(2,3),(2,4),(3,4),(4,5),(4,6),(4,7),(5,6),(5,7),(6,7).$$</div>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-3 satisfy $N\\le 100$.</li><li>Test cases 4-8 satisfy $N\\le 5000$.</li><li>Test cases 9-20 satisfy no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1137"
    },
    {
      "title": "Problem 2. Portals",
      "subtitle": "USACO 2021 US Open, Gold",
      "id": 1138,
      "year": "2021",
      "division": "gold",
      "number": "2",
      "problem": "Bessie is located in a network consisting of $N$ ($2\\le N\\le 10^5$) vertices\nlabeled $1\\ldots N$ and $2N$ portals labeled $1\\ldots 2N$. Each portal connects\ntwo distinct vertices $u$ and $v$ ($u\\neq v$). Multiple portals may connect the\nsame pair of vertices.\n\n<p>Each vertex $v$ is adjacent to four distinct portals. The list of portals that\n$v$ is adjacent to is given by $p_v=[p_{v,1},p_{v,2},p_{v,3},p_{v,4}]$.\n\n</p><p>Your current location can be represented by an ordered pair \n$(\\text{current vertex}, \\text{current portal})$; that is, a pair $(v,p_{v,i})$\nwhere  $1\\le v \\le N$ and $1\\le i\\le 4$. You may use either of the following\noperations to change your current location:\n\n</p><p></p><ol><li>Change the current vertex by moving through the current portal.</li><li>Switch the current portal. At each vertex, the first two portals in the list\nare paired up, while the last two portals in the list are also paired up. That\nis, if your current location is $(v,p_{v,2})$ you may switch to use the portal\n$(v,p_{v,1})$, and vice versa. Similarly, if your current location is\n$(v,p_{v,3})$ you may switch to use the portal $(v,p_{v,4})$ and vice versa. No\nother switches are allowed (e.g., you may not switch from portal $p_{v,2}$ to\nportal $p_{v,4}$).</li></ol>\n\n<p>There are $4N$ distinct locations in total. Unfortunately, it might not be the\ncase that every location is reachable from every other via a sequence of\noperations. Thus, for a cost of $c_v$ ($1\\le c_v\\le 1000$) moonies, you may\npermute the list of portals adjacent to $v$ in any order you choose. After this,\nthe first two portals in the list are paired up, while the last two portals in\nthe list are also paired up. \n\n</p><p>For example, if you permute the portals adjacent to $v$ in the order\n$[p_{v,3},p_{v,1},p_{v,2},p_{v,4}]$, this means that if you are at vertex $v$,\n\n</p><p></p><ul><li>If you are currently at portal $p_{v,1}$, you may switch to use portal \n$p_{v,3}$ and vice versa.</li><li>If you are currently at portal $p_{v,2}$, you may switch to use portal \n$p_{v,4}$ and vice versa.</li><li>You may no longer switch from portal $p_{v,1}$ to $p_{v,2}$, or from  portal\n$p_{v,3}$ to portal $p_{v,4}$, or vice versa.</li></ul>\n\n<p>Compute the minimum total amount of moonies required to modify the network in\norder to make it possible to reach every possible location from every other\nlocation.  It is guaranteed that the test data is constructed in such a way that\nthere exists at least one valid way of modifying the network.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The next $N$ lines each describe a vertex. Line $v+1$ contains five \nspace-separated integers $c_v,p_{v,1},p_{v,2},p_{v,3},p_{v,4}$. \n\n</p><p>It is guaranteed that for each $v$ $p_{v,1},p_{v,2},p_{v,3},p_{v,4}$ are all\ndistinct,  and that every portal appears in the adjacency lists of exactly two\nvertices.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nA single line containing the minimum total amount of moonies required to modify\nthe network in order to make it possible to reach every possible location from\nevery other location.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n10 1 4 8 9\n11 1 2 5 6\n12 9 10 2 3\n3 4 3 6 7\n15 10 8 7 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">13\n</pre>\n\n<p>It suffices to permute the adjacency lists of vertices $1$ and $4$. This\nrequires a total of $c_1+c_4=13$ moonies. We can let $p_1=[1,9,4,8]$ and\n$p_4=[7,4,6,3]$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 2-4, $c_v=1$ for all $v$.</li><li>Test cases 5-12 satisfy no\nadditional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1138"
    },
    {
      "title": "Problem 3. Permutation",
      "subtitle": "USACO 2021 US Open, Gold",
      "id": 1139,
      "year": "2021",
      "division": "gold",
      "number": "3",
      "problem": "Bessie has $N$ ($3\\le N\\le 40$) favorite distinct points on a 2D grid, no three of which\nare collinear. For each $1\\le i\\le N$, the $i$-th point is denoted by two\nintegers $x_i$ and $y_i$\n($0\\le x_i,y_i\\le 10^4$).\n\n<p>Bessie draws some segments between the points as follows.\n\n</p><p></p><ol><li>She chooses some permutation $p_1,p_2,\\ldots,p_N$ of the $N$ points.</li><li>She draws segments between $p_1$ and $p_2$, $p_2$ and $p_3$, and $p_3$ and\n$p_1$.</li><li>Then for each integer $i$ from $4$ to $N$ in order, she draws a line segment\nfrom $p_i$ to $p_j$ for all $j&lt;i$ such that the segment does not intersect any\npreviously drawn segments (aside from at endpoints).</li></ol>\n\n<p>Bessie notices that for each $i$, she drew exactly three new segments. Compute\nthe number of permutations Bessie could have chosen on step 1 that would satisfy\nthis property, modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>Followed by $N$ lines, each containing two space-separated integers $x_i$ and\n$y_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of permutations modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n0 0\n0 4\n1 1\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n</pre>\n\n<p>No permutations work.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n0 0\n0 4\n4 0\n1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">24\n</pre>\n\n<p>All permutations work.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n0 0\n0 4\n4 0\n1 1\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">96\n</pre>\n\n<p>One permutation that satisfies the property is $(0,0),(0,4),(4,0),(1,2),(1,1).$\nFor this permutation,\n\n</p><p></p><ul><li> First, she draws segments between every pair of $(0,0),(0,4),$ and\n$(4,0)$.</li><li> Then she draws segments from $(0,0),$ $(0,4),$ and $(4,0)$ to $(1,2)$.\n</li><li> Finally, she draws segments from $(1,2),$ $(4,0),$ and $(0,0)$ to $(1,1)$.\n</li></ul>\n\n<p>Diagram:\n\n</p><p></p><figure><img src=\"current/data/fig_permutation_gold_open21.png\" width=\"400px/\"><figcaption></figcaption></figure>\n\n<p>The permutation does not satisfy the property if its first four points are\n$(0,0)$, $(1,1)$, $(1,2)$, and $(0,4)$ in some order.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-6 satisfy $N\\le 8$.</li><li>Test cases 7-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1139"
    },
    {
      "title": "Problem 1. Paired Up",
      "subtitle": "USACO 2021 December Contest, Gold",
      "id": 1161,
      "year": "2021",
      "division": "gold",
      "number": "1",
      "problem": "There are a total of $N$ ($1\\le N\\le 10^5$) cows on the number line. The\nlocation of the $i$-th cow is given by $x_i$ ($0 \\leq x_i \\leq 10^9$), and the\nweight of the  $i$-th cow is given by $y_i$ ($1 \\leq y_i \\leq 10^4$).\n\n<p>At Farmer John's signal, some of the cows will form pairs such that \n\n</p><p></p><ul><li>Every pair consists of two distinct cows $a$ and $b$ whose locations are\nwithin  $K$ of each other ($1\\le K\\le 10^9$); that is, $|x_a-x_b|\\le K$.</li><li>Every cow is either part of a single pair or not part of a pair.</li><li>The pairing is <em>maximal;</em> that is, no two unpaired cows can form a\npair.</li></ul>\n\n<p>It's up to you to determine the range of possible sums of weights of the\nunpaired cows. Specifically,\n\n</p><p></p><ul><li>If $T=1$, compute the minimum possible sum of weights of the unpaired\ncows.</li><li>If $T=2$, compute the maximum possible sum of weights of the unpaired\ncows.</li></ul>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $T$, $N$, and $K$.\n\n<p>In each of the following $N$ lines, the $i$-th contains $x_i$ and $y_i$. It is\nguaranteed that $0\\le x_1&lt; x_2&lt; \\cdots&lt; x_N\\le 10^9$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease print out the minimum or maximum possible sum of weights of the unpaired\ncows.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 5 2\n1 2\n3 2\n4 2\n5 1\n7 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6</pre>\n\n<p>In this example, cows $2$ and $4$ can pair up because they are at distance $2$,\nwhich is at most $K = 2$. This pairing is maximal, because cows $1$ and $3$ are\nat distance $3$, cows $3$ and $5$ are at distance $3$, and cows $1$ and $5$ are\nat distance $6$, all of which are more than $K = 2$. The sum of weights of\nunpaired cows is\n$2 + 2 + 2 = 6$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 5 2\n1 2\n3 2\n4 2\n5 1\n7 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2</pre>\n\n<p>Here, cows $1$ and $2$ can pair up because they are at distance $2 \\leq K = 2$,\nand cows $4$ and $5$ can pair up because they are at distance $2 \\leq K = 2$.\nThis pairing is maximal because only cow $3$ remains. The weight of the\nonly unpaired cow here is simply $2$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 15 7\n3 693\n10 196\n12 182\n14 22\n15 587\n31 773\n38 458\n39 58\n40 583\n41 992\n84 565\n86 897\n92 197\n96 146\n99 785\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2470</pre>\n\n<p>The answer for this example is $693+992+785=2470$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 4-8 satisfy $T=1$.</li><li>Test cases 9-14 satisfy $T=2$ and $N\\le 5000$.</li><li>Test cases 15-20 satisfy $T=2$.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1161"
    },
    {
      "title": "Problem 2. HILO",
      "subtitle": "USACO 2021 December Contest, Gold",
      "id": 1162,
      "year": "2021",
      "division": "gold",
      "number": "2",
      "problem": "Bessie knows a number $x+0.5$ where $x$ is some integer between $0$ to $N,$\ninclusive ($1\\le N\\le 2 \\cdot 10^5$).  \n\n<p>Elsie is trying to guess this number. She can ask questions of the form  \"is $i$\nhigh or low?\" for some integer $i$ between $1$ and $N,$ inclusive.  Bessie\nresponds by saying \"HI\" if $i$ is greater than $x+0.5$, or \"LO\" if $i$ is less\nthan $x+0.5$.\n\n</p><p>Elsie comes up with the following strategy for guessing Bessie's number.  Before\nmaking any guesses, she creates a list of $N$ numbers, where every number from\n$1$ to $N$ occurs exactly once (in other words, the list is a permutation of\nsize $N$). Then she goes through the list, guessing numbers that appear in the\nlist in order.\n\n</p><p>However, Elsie skips any unnecessary guesses. That is, if Elsie is about to\nguess some number $i$ and Elsie previously guessed some $j &lt; i$ and Bessie\nresponded with \"HI\", Elsie will not guess $i$ and will move on to the next\nnumber in the list. Similarly, if she is about to guess some number $i$ and she\npreviously guessed some $j &gt; i$ and Bessie responded with \"LO\", Elsie will not\nguess $i$ and will move on to the next number in the list. It can be proven that\nusing this strategy, Elsie always uniquely determines $x$ regardless of the\npermutation she creates.\n\n</p><p>If we concatenate all of Bessie's responses of either \"HI\" or \"LO\" into a single\nstring $S$, then the number of times Bessie says \"HILO\" is the number of length\n$4$ substrings of $S$ that are equal to \"HILO.\"\n\n</p><p>Bessie knows that Elsie will use this strategy; furthermore, she also knows the\nexact permutation that Elsie will use. However, Bessie has not decided on what\nvalue of $x$ to choose.\n\n</p><p>Help Bessie determine how many times she will say \"HILO\" for each value of $x$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N.$ \n\n<p>The second line contains Elsie's permutation of size $N.$\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each $x$ from $0$ to $N$, inclusive, output the number of times Bessie will\nsay HILO on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n5 1 2 4 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n1\n1\n2\n1\n0\n</pre>\n\n<p>For $x=0$, Bessie will say \"HIHI,\" for a total of zero \"HILO\"s.\n\n</p><p>For $x=2$, Bessie will say \"HILOLOHIHI,\" for a total of one \"HILO\".\n\n</p><p>For $x=3$, Bessie will say \"HILOLOHILO\", for a total of two \"HILO\"s.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Tests 1 to 4 satisfy $N \\leq 5000$.</li><li>Tests 5 to 8 have a uniformly\nrandom permutation.</li><li>Tests 9 to 20 satisfy no further constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Richard Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1162"
    },
    {
      "title": "Problem 3. Bracelet Crossings",
      "subtitle": "USACO 2021 December Contest, Gold",
      "id": 1163,
      "year": "2021",
      "division": "gold",
      "number": "3",
      "problem": "Bessie the cow enjoys arts and crafts.  In her free time, she has made $N$\n($1\\le N\\le 50$) bracelets, conveniently numbered $1 \\ldots N$.  The $i$th\nbracelet is painted color $i$ out of a set of $N$ different colors.  After\nconstructing the bracelets, Bessie  placed them on a table for display (which we\ncan think of as the 2D plane). She was careful to arrange the bracelets to\nsatisfy the following three conditions:\n\n<p></p><ol><li>Every bracelet was a single closed polygonal chain -- a series of vertices\n(points) connected sequentially by line segments, where the first and last\npoints are the same (Feel welcome to consult the wikipedia page for\nmore detail: <a href=\"https://en.wikipedia.org/wiki/Polygonal_chain\">polygonal chain</a>),\n</li><li>No bracelet intersected itself (this corresponds to a \"simple\" polygonal\nchain); and</li><li>No two bracelets intersected.</li></ol>\n\n<p>Unfortunately, right after Bessie arranged the bracelets in such a careful\nmanner, Farmer John drove by in his tractor, shaking the table and causing the\nbracelets to shift around and possibly break into multiple (not necessarily\nclosed or simple) polygonal chains! Afterward, Bessie wanted to check whether\nthe three conditions above still held. However, it was dark, so she couldn't see\nthe bracelets anymore. \n\n</p><p>Fortunately, Bessie had a flashlight. She chose $M$ ($1\\le M\\le 50$) vertical\nlines $x=1, x=2, \\ldots, x=M$ and for each line, she swept the beam of the\nflashlight along that line from $y=-\\infty$ to $y=\\infty$, recording the colors\nof all bracelets she saw in the order they appeared. Luckily, no beam crossed\nover any vertex of any polygonal chain or two line segments at the same time.\nFurthermore, for each beam, every color that appeared appeared exactly twice.\n\n</p><p>Can you help Bessie use this information to determine whether it is possible\nthat the bracelets still satisfy all three of the conditions above? \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nEach input case contains $T$ sub-cases ($1 \\leq T \\leq 50$) that must all solved\nindependently to solve the full input case. Consecutive test cases are \nseparated by newlines.\n\n<p>The first line of the input contains $T$.  Each of the $T$ sub-test cases then\nfollow.  \n\n</p><p>The first line of each sub-test case contains two integers $N$ and $M$. Each\nsub-test case then contains $M$ additional lines. For each $i$ from $1$ to $M$,\nthe $i$-th additional line contains an integer $k_i$ ($0\\le k_i\\le 2N$, $k_i$\neven), followed by $k_i$ integers $c_{i1}, c_{i2},\\ldots, c_{ik_i}$\n($c_{ij}\\in [1,N]$, every $c_{ij}$ appears zero or two times). This means that\nwhen Bessie swept her flashlight from $(i,-\\infty)$ to $(i,\\infty)$, she\nencountered the colors $c_{i1}, c_{i2},\\ldots, c_{ik_i}$ in that order.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n\n<p>For each sub-test case, print YES if it is possible for the three conditions\nabove to be satisfied. Otherwise, print NO. \n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n\n1 2\n2 1 1\n2 1 1\n\n1 3\n2 1 1\n0\n2 1 1\n\n2 1\n4 1 2 1 2\n\n4 2\n6 1 2 2 3 3 1\n6 1 2 4 4 2 1\n\n2 2\n4 1 1 2 2\n4 2 2 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YES\nNO\nNO\nYES\nNO\n</pre>\n\n<p>An example of a feasible bracelet configuration for the first sub-case is:\n\n</p><p></p><figure><img src=\"current/data/fig_1_bracelet_gold_dec21.png\" width=\"400px/\"><figcaption></figcaption></figure>\n\n<p>For the fourth sub-case, a feasible arrangement is the following:\n\n</p><p></p><figure><img src=\"current/data/fig_2_bracelet_gold_dec21.png\" width=\"400px/\"><figcaption></figcaption></figure>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test case 2 satisfies $N = 1$.</li><li>Test cases 3-5 satisfy $N=2$.</li><li>Test cases 6-8 satisfy $M=1$.</li><li>Test cases 9-14 satisfy $M=2$.</li><li>Test cases 15-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Richard Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1163"
    },
    {
      "title": "Problem 1. Drought",
      "subtitle": "USACO 2022 January Contest, Gold",
      "id": 1185,
      "year": "2022",
      "division": "gold",
      "number": "1",
      "problem": "The grass has dried up in Farmer John's pasture due to a drought. After hours of\ndespair and contemplation, FJ comes up with the brilliant idea of purchasing\ncorn to feed his precious cows.\n\n<p>FJ’s $N$ ($1 \\leq N \\leq 100$) cows are arranged in a line such that the $i$th\ncow in line has a non-negative integer hunger level of $h_i$. As FJ’s cows are\nsocial animals and insist on eating together, the only way FJ can decrease the\nhunger levels of his cows is to select two adjacent cows $i$ and $i+1$ and feed\neach of them a bag of corn, causing each of their hunger levels to decrease by\none. \n\n</p><p>FJ wants to feed his cows until all of them have the same non-negative hunger\nlevel. Although he doesn't know his cows' exact hunger levels, he\ndoes know an upper bound on the hunger level of each cow; specifically, the\nhunger level $h_i$ of the $i$-th cow is at most $H_i$ ($0\\le H_i\\le 1000$). \n\n</p><p>Your job is to count the number of $N$-tuples of hunger levels\n$[h_1,h_2,\\ldots,h_N]$ that are consistent with these upper bounds such that it\nis possible for FJ to achieve his goal, modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The second line contains $H_1,H_2,\\ldots,H_N$.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of $N$-tuples of hunger levels modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n9 11 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">241\n</pre>\n\n<p>There are $(9+1)\\cdot (11+1)\\cdot (7+1)$ $3$-tuples $h$ that are consistent with\n$H$.\n\n</p><p>One of these tuples is $h=[8,10,5]$. In this case, it is possible to make all\ncows have equal hunger values: give two bags of corn to both cows $2$ and $3$,\nthen  give five bags of corn to both cows $1$ and $2$, resulting in each cow\nhaving  a hunger level of $3$.\n\n</p><p>Another one of these tuples is $h=[0,1,0]$. In this case, it is impossible to \nmake the hunger levels of the cows equal.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n6 8 5 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">137\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p>$N$ is even in even-numbered tests and odd in odd-numbered tests.\n\n</p><p></p><ul><li>Tests 3 and 4 satisfy $N\\le 6$ and $H_i \\le 10$.</li><li>Tests 5 through 10\nsatisfy $N\\le 50$ and $H_i \\le 100$.</li><li>Tests 11 through 20 satisfy no\nfurther constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Arpan Banerjee and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1185"
    },
    {
      "title": "Problem 2. Farm Updates",
      "subtitle": "USACO 2022 January Contest, Gold",
      "id": 1186,
      "year": "2022",
      "division": "gold",
      "number": "2",
      "problem": "Farmer John operates a collection of $N$ farms ($1\\le N\\le 10^5$), conveniently\nnumbered $1\\ldots N$.  Initially, there are no roads connecting these farms to\neach-other, and each farm is actively producing milk.\n\n<p>Due to the dynamic nature of the economy, Farmer John needs to make changes to\nhis farms according to a series of $Q$ update operations\n($0\\le Q\\le 2\\cdot 10^5$). Update operations come in three possible forms:\n\n</p><p></p><ul><li>(D x) Deactivate an active farm $x$, so it no longer produces milk.</li><li>(A x y) Add a road between two active farms $x$ and $y$.</li><li>(R e) Remove the $e$th road that was previously added ($e = 1$ is the  first\nroad that was added).</li></ul>\n\n<p>A farm $x$ that is actively producing milk, or that can reach another active\nfarm via a series of roads, is called a \"relevant\" farm.  For each farm $x$,\nplease calculate the maximum $i$ ($0\\le i\\le Q$) such that $x$  is relevant\nafter the $i$-th update.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$ and $Q$.  The next $Q$ lines each contain an update of one of the following forms:\n\n<p></p><pre>D x\nA x y\nR e\n</pre>\n\n<p>It is guaranteed that for updates of type R, $e$ is at most the number of roads\nthat have been added so far, and no two updates of type R have the same value of\n$e$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease output $N$ lines, each containing an integer in the range $0\\ldots Q$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 9\nA 1 2\nA 2 3\nD 1\nD 3\nA 2 4\nD 2\nR 2\nR 1\nR 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">7\n8\n6\n9\n9\n</pre>\n\n<p>In this example, roads are removed in the order $(2,3), (1,2), (2,4)$. \n\n</p><p></p><ul><li>Farm $1$ is relevant just before $(1,2)$ is removed. </li><li>Farm $2$ is relevant just before $(2,4)$ is removed. </li><li>Farm $3$ is relevant just before $(2,3)$ is removed. </li><li>Farms $4$ and $5$ are still active after all queries. Therefore they both\nstay relevant, and the output for both should be $Q$.</li></ul>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Tests 2 through 5 satisfy $N\\le 10^3$, $Q\\le 2\\cdot 10^3$</li><li>Test cases 6 through 20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1186"
    },
    {
      "title": "Problem 3. Tests for Haybales",
      "subtitle": "USACO 2022 January Contest, Gold",
      "id": 1187,
      "year": "2022",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John's cows have decided to offer a programming contest for the cows on\nFarmer Nhoj's farm.  In order to make the problems as fun as possible, they have\nspent considerable time coming up with challenging input cases. For one problem\nin particular, \"Haybales\", the cows need your help devising challenging inputs. \nThis involve solving the following somewhat intriguing problem:\n\n<p>There is an array of sorted integers $x_1 \\leq x_2 \\leq \\dotsb \\leq x_N$\n($1 \\leq N \\leq 10^5$), and an integer $K$. You don't know the array or $K$, but\nyou do know for each index $i$, the largest index $j_i$ such that\n$x_{j_i} \\leq x_i + K$. It is guaranteed that $i\\le j_i$ and\n$j_1\\le j_2\\le \\cdots \\le j_N\\le N$.\n\n</p><p>Given this information, Farmer John's cows need to construct any array along \nwith some integer $K$ that matches that information. The construction needs to\nsatisfy $0 \\leq x_i \\leq 10^{18}$ for all $i$ and $1 \\leq K \\leq 10^{18}$. \n\n</p><p>It can be proven that this is always possible. Help Farmer John's cows solve\nthis problem!\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$.  The next line contains\n$j_1,j_2,\\ldots,j_N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint $K$, then $x_1,\\ldots,x_N$ on separate lines. Any valid output will be\naccepted.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n2 2 4 5 6 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n1\n6\n17\n22\n27\n32\n</pre>\n\n<p>The sample output is the array $a = [1, 6, 17, 22, 27, 32]$ with $K = 6$.\n$j_1 = 2$ is satisfied because $a_2 = 6 \\leq 1 + 6 = a_1 + K$ but\n$a_3 = 17 &gt; 1 + 6 = a_1 + K$, so $a_2$ is the largest element that is at most\n$a_1$. Similarly,\n</p><ul><li>$j_2 = 2$ is satisfied because $a_2 = 6 \\leq 6 + 6$ but\n$a_3 = 17 &gt; 6 + 6$</li><li>$j_3 = 4$ is satisfied because\n$a_4 = 22 \\leq 17 + 6$ but $a_5 = 27 &gt; 17 + 6$</li><li>$j_4 = 5$ is satisfied\nbecause $a_5 = 27 \\leq 22 + 6$ but $a_5 = 32 &gt; 22 + 6$</li><li>$j_5 = 6$ is\nsatisfied because $a_6 = 32 \\leq 27 + 6$ and $a_6$ is the last element of the\narray</li><li>$j_6 = 6$ is satisfied because $a_6 = 32 \\leq 32 + 6$ and $a_6$\nis the last element of the array</li></ul>\n\n<p>This is not the only possible correct output for the sample input. For example,\nyou could instead output the array $[1, 2, 4, 5, 6, 7]$ with $K = 1$.\n\n</p><p>\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>For 50% of all inputs, $N\\le 5000$</li><li>For the remaining inputs, there are no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Danny Mittal\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1187"
    },
    {
      "title": "Problem 1. Redistributing Gifts",
      "subtitle": "USACO 2022 February Contest, Gold",
      "id": 1209,
      "year": "2022",
      "division": "gold",
      "number": "1",
      "problem": "Farmer John has $N$ gifts labeled $1\\ldots N$ for his $N$ cows, also labeled\n$1\\ldots N$  ($1\\le N\\le 18$). Each cow has a wishlist, which is a permutation\nof all $N$ gifts such that the cow prefers gifts that appear earlier in the list\nover gifts that appear later in the list.\n\n<p>FJ was lazy and just assigned gift $i$ to cow $i$ for all $i$. Now, the cows\nhave gathered amongst themselves and decided to reassign the gifts such that\nafter reassignment, every cow ends up with the same gift as she did originally,\nor a gift that she prefers over the one she was originally assigned. \n\n</p><p>There is also an additional constraint: a gift may only be reassigned to a cow\nif it was originally assigned to a cow of the same type (each cow is either a\nHolstein or a Guernsey). Given $Q$ ($1\\le Q\\le \\min(10^5,2^N)$) length-$N$ breed\nstrings, for each one count the number of reassignments that are consistent with\nit.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The next $N$ lines each contain the preference list of a cow. It is guaranteed\nthat each line forms a permutation of $1\\dots N$.\n\n</p><p>The next line contains $Q$.\n\n</p><p>The final $Q$ lines each contain a breed string, each $N$ characters long and\nconsisting only of the characters G and H. No breed string occurs more than\nonce.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each breed string, print the number of reassignments that are consistent with it\non a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 2 3 4\n1 3 2 4\n1 2 3 4\n1 2 3 4\n5\nHHHH\nHHGG\nGHGH\nHGGG\nGHHG\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n1\n1\n2\n2\n</pre>\n\n<p>In this example, for the first breed string, there are two possible reassignments:\n\n</p><p></p><ul><li>The original assignment: cow $1$ receives gift $1$, cow $2$ receives gift\n$2$, cow $3$ receives gift $3$, and cow $4$ receives gift $4$.</li><li>Cow $1$ receives gift $1$, cow $2$ receives gift $3$, cow $3$ receives gift\n$2$, and cow $4$ receives gift $4$.</li></ul>\n\n<p>For the second breed string, the only reassignment consistent with it is the\noriginal assignment.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>For $T = 2, \\ldots, 13$, test case $T$ satisfies $N = T + 4$.</li><li>Test\ncases 14-18 satisfy $N = 18$.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1209"
    },
    {
      "title": "Problem 2. Cow Camp",
      "subtitle": "USACO 2022 February Contest, Gold",
      "id": 1210,
      "year": "2022",
      "division": "gold",
      "number": "2",
      "problem": "To qualify for cow camp, Bessie needs to earn a good score on the last problem\nof the USACOW Open contest. This problem has $T$ distinct test cases\n($2\\le T\\le 10^3$) weighted equally, with the first test case being the sample\ncase. Her final score will equal the number of test cases that her last\nsubmission passes.\n\n<p>Unfortunately, Bessie is way too tired to think about the problem,  but since\nthe answer to each test case is either \"yes\" or \"no,\" she has a plan! Precisely,\nshe decides to repeatedly submit the following nondeterministic solution:\n\n</p><p></p><pre>if input == sample_input:\n  print sample_output\nelse:\n  print \"yes\" or \"no\" each with probability 1/2, independently for each test case\n</pre>\n\n<p>Note that for all test cases besides the sample, this program may produce a\ndifferent output when resubmitted, so the number of test cases that it passes\nwill vary. \n\n</p><p>Bessie knows that she cannot submit more than $K$ ($1\\le K\\le 10^9$) times in\ntotal because then she will certainly be disqualified. What is the maximum\npossible expected value of Bessie's final score, assuming that she follows the\noptimal strategy?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe only line of input contains two space-separated integers $T$ and $K.$\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe answer as a decimal that differs by at most $10^{-6}$ absolute or relative\nerror from the actual answer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1.875\n</pre>\n\n<p>In this example, Bessie should keep resubmitting until she has reached $3$\nsubmissions or she  receives full credit. Bessie will receive full credit with\nprobability $\\frac{7}{8}$ and half credit with probability $\\frac{1}{8}$, so the\nexpected value of Bessie's  final score under this strategy is\n$\\frac{7}{8}\\cdot 2+\\frac{1}{8}\\cdot 1=\\frac{15}{8}=1.875$.  As we see from this\nformula, the expected value of Bessie's score can be calculated by  taking the\nsum over $x$ of $p(x) \\cdot x$, where $p(x)$ is the probability of receiving a\nscore of\n$x$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2.8750000000000000000\n</pre>\n\n<p>Here, Bessie should only submit twice if she passes fewer than $3$ test cases on\nher first try.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING</h4>\n<ul><li>Test cases 3-6 satisfy $T\\le 25$ and $K\\le 100.$</li><li>Test cases 7-9 satisfy $K\\le 10^6.$</li><li>Test cases 10-17 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1210"
    },
    {
      "title": "Problem 3. Moo Network",
      "subtitle": "USACO 2022 February Contest, Gold",
      "id": 1211,
      "year": "2022",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John's $N$ cows ($1 \\leq N \\leq 10^5$) are spread far apart on his  farm\nand would like to build a communication network so they can more easily exchange\nelectronic text messages (all of which of course contain variations of \"moo\").\n\n<p>The $i$th cow is located at a distinct location $(x_i,y_i)$ where\n$0 \\leq x_i \\leq 10^6$ and $0 \\leq y_i \\leq 10$.  The cost of building a\ncommunication link between cows $i$ and $j$ is the squared distance between\nthem: $(x_i-x_j)^2 + (y_i-y_j)^2$.\n\n</p><p>Please calculate the minimum cost required to build a communication network\nacross which all the cows can communicate.  Two cows can communicate if they are\ndirectly connected by a link, or if there is a sequence of links along which\ntheir message can travel.  \n\n</p><p><strong>**Note: the time limit for this problem is 4s, twice the default.**</strong>\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$, and the next $N$ lines each describe the\n$x$ and $y$ coordinates of a cow, all integers.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease output the minimum cost of a network that will allow all cows to\ncommunicate.  Note that this cost might be too large to fit into a 32-bit\ninteger and may require use of 64-bit integers (e.g., \"long long\" integers in\nC++).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10\n83 10\n77 2\n93 4\n86 6\n49 1\n62 7\n90 3\n63 4\n40 10\n72 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">660\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 2-3 satisfy $N \\le 1000$.</li><li>Test cases 4-15 satisfy no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1211"
    },
    {
      "title": "Problem 1. Apple Catching",
      "subtitle": "USACO 2022 US Open Contest, Gold",
      "id": 1233,
      "year": "2022",
      "division": "gold",
      "number": "1",
      "problem": "<p>It's raining apples! At certain points in time, some number of apples will hit\nthe number line. At certain points in time, some of Farmer John's cows will\narrive on the number line and start catching apples. \n\n</p><p>If an apple hits the number line without a cow to catch it, it is lost forever.\nIf a cow and an apple arrive at the same time, the cow catches it. Each cow can\ntravel one unit per second. Once a cow catches a single apple, she exits the\nnumber line. \n\n</p><p>If FJ's cows collaborate optimally, how many apples can they catch in total?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ ($1\\le N\\le 2\\cdot 10^5$), the number of times\napples hit the number line or FJ's cows appear.\n\n<p>The next $N$ lines each contain four integers $q_i$, $t_i$, $x_i$, and $n_i$\n($q_i\\in \\{1,2\\}, 0\\le t_i\\le 10^9, 0\\le x_i\\le 10^9, 1\\le n_i\\le 10^3$). \n\n</p><p></p><ul><li> If $q_i=1$, this means that $n_i$ of FJ's cows arrive on the number line at\ntime $t_i$ at location $x_i$.</li><li> If $q_i=2$, this means that $n_i$ apples will hit the number line at time\n$t_i$ at location $x_i$. </li></ul>\n\n<p>It is guaranteed that all of the ordered pairs $(t_i,x_i)$ are distinct.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe maximum number of apples FJ's cows may collectively catch.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n2 5 10 100\n2 6 0 3\n2 8 10 7\n1 2 4 5\n1 4 7 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>In this example, none of the $100$ apples that land at time $t=5$ may be caught. Here is a way\nfor $10$ apples to be caught:\n\n</p><p></p><ul><li>All six of FJ's cows that arrive at time $t=4$ catch one of the apples that\nland at time $t=8$.</li><li>One of FJ's cows that arrive at time $t=2$ catches one of the apples that\nland at time $t=8$.</li><li>Three of the remaining cows that arrive at time $t=2$ catch one of the\napples that land at time $t=6$.</li></ul>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n2 5 10 100\n2 6 0 3\n2 8 11 7\n1 2 4 5\n1 4 7 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>Here again, none of the apples that land at time $t=5$ may be caught. Furthermore,\nnone of the cows that arrive at time $t=2$ may catch any of the apples that land\nat time $t=8$. Here is a way for $9$ apples to be caught:\n\n</p><p></p><ul><li>All six of FJ's cows that arrive at time $t=4$ catch one of the apples that\nland at time $t=8$.</li><li>Three of the remaining cows that arrive at time $t=2$ catch one of the\napples that land at time $t=6$.</li></ul>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1233"
    },
    {
      "title": "Problem 2. Pair Programming",
      "subtitle": "USACO 2022 US Open Contest, Gold",
      "id": 1234,
      "year": "2022",
      "division": "gold",
      "number": "2",
      "problem": "<p>A program consists of a sequence of instructions, each of which is of one of the\nfollowing forms:\n\n</p><p></p><ol><li>$\\times d$, where $d$ is a digit in the range $[0,9]$</li><li>$+s$, where $s$ is a string denoting the name of a variable. Within a\nprogram, all variable names must be distinct.</li></ol>\n\n<p>The result of executing a program is defined to be the expression that results\nafter applying each instruction in order, starting with $0$. For example, the result of\nexecuting the program  $[\\times 3,+x,+y,\\times 2,+z]$ is the expression\n$(0\\times 3+x+y)\\times 2+z=2\\times x+2\\times y+z$. Different programs, when\nexecuted may produce the same expressions; for example, executing\n$[+w,\\times 0,+y,+x,\\times 2,+z, \\times 1]$ would also result in the expression\n$2\\times x+2\\times y+z$.\n\n</p><p>Bessie and Elsie each have programs of $N$ ($1\\le N\\le 2000$) instructions. They\nwill interleave these programs to produce a new program of length $2N$.  Note\nthat there are $\\frac{(2N)!}{N!\\times N!}$ ways to do this, but not all such\nprograms, when executed, will produce distinct expressions.\n\n</p><p>Count the number of distinct expressions that may be produced by executing\nBessie and Elsie's interleaved program, modulo $10^9+7$. \n\n</p><p>Each input contains $T$ ($1\\le T\\le 10$)  test cases that should be solved\nindependently. It is guaranteed that the sum of $N$ over all test cases does not\nexceed $2000$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of the input contains $T$, the number of test cases.\n\n<p>The first line of each test case contains $N$.\n\n</p><p>The second line of each test case contains Bessie's program, represented by a\nstring of length $N$. Each character is either a digit $d\\in [0,9]$,\nrepresenting an instruction of type 1, or the character $+$, representing an\ninstruction of type 2.\n\n</p><p>The third line of each test case contains Elsie's program in the same format as\nBessie's.\n\n</p><p>Within a test case, the variable names among all instructions are distinct. Note\nthat their actual names are not provided, as they do not affect the answer.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of distinct expressions that may be produced by executing  Bessie and\nElsie's interleaved programs, modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1\n0\n1\n3\n12+\n+02\n3\n0++\n++9\n4\n5+++\n+6+1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n3\n9\n9\n</pre>\n\n<p>For the first test case, the two possible interleaved programs are\n$[\\times 1, \\times 0]$  and $[\\times 0,\\times 1]$. These will both produce the\nexpression $0$ when executed.\n\n</p><p>For the second test case, executing an interleaving of $[\\times 1,\\times 2, +x]$\nand $[+y, \\times 0,\\times 2]$ could produce one of the expressions $0$, $x$, or\n$2\\times x$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 2 satisfies $N\\le 6$.</li><li>In inputs 3-5, the sum of all $N$ is at most $100$.</li><li>In inputs 6-8, the sum of all $N$ is at most $500$.</li><li>Inputs 9-16 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1234"
    },
    {
      "title": "Problem 3. Balancing a Tree",
      "subtitle": "USACO 2022 US Open Contest, Gold",
      "id": 1235,
      "year": "2022",
      "division": "gold",
      "number": "3",
      "problem": "<p>Farmer John has conducted an extensive study of the evolution of different cow\nbreeds.  The result is a rooted tree with $N$ ($2\\le N\\le 10^5$) nodes  labeled\n$1\\ldots N$, each node corresponding to a cow breed.   For each $i\\in [2,N]$,\nthe parent of node $i$ is node $p_i$ ($1\\le p_i&lt;i$), meaning that breed $i$\nevolved from breed $p_i$. A node $j$ is called an ancestor of node $i$ if\n$j=p_i$ or $j$ is an ancestor of $p_i$.\n\n</p><p>Every node $i$ in the tree is associated with a breed having an integer number\nof spots $s_i$.  The \"imbalance\" of the tree is defined to be the maximum of\n$|s_i-s_j|$ over all pairs of nodes $(i,j)$ such that $j$ is an ancestor of $i$.\n\n</p><p>Farmer John doesn't know the exact value of $s_i$ for each breed, but he knows\nlower and upper bounds on these values.  Your  job is to assign an integer value\nof $s_i \\in [l_i,r_i]$ ($0\\le l_i\\le r_i\\le 10^9$) to each node such that the\nimbalance of the tree is minimized. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$ ($1\\le T\\le 10$), the number of independent test\ncases to be solved, and an integer $B\\in \\{0,1\\}$.\n\n<p>Each test case starts with a line containing $N$, followed by $N-1$ integers\n$p_2,p_3,\\ldots,p_N$.\n\n</p><p>The next $N$ lines each contain two integers $l_i$ and $r_i$.\n\n</p><p>It is guaranteed that the sum of $N$ over all test cases does not exceed $10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output one or two lines, depending on the value of $B$.\n\n<p>The first line for each test case should contain the minimum imbalance.\n\n</p><p>If $B=1,$ then print an additional line with $N$ space-separated integers\n$s_1,s_2,\\ldots, s_N$ containing an assignment of spots that achieves the above\nimbalance. Any valid assignment will be accepted.\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 0\n3\n1 1\n0 100\n1 1\n6 7\n5\n1 2 3 4\n6 6\n1 6\n1 6\n1 6\n5 5\n3\n1 1\n0 10\n0 1\n9 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n1\n4\n</pre>\n\n<p>For the first test case, the minimum imbalance is $3$. One way to achieve\nimbalance $3$ is to set $[s_1,s_2,s_3]=[4,1,7]$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 1\n3\n1 1\n0 100\n1 1\n6 7\n5\n1 2 3 4\n6 6\n1 6\n1 6\n1 6\n5 5\n3\n1 1\n0 10\n0 1\n9 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n3 1 6\n1\n6 5 5 5 5\n4\n5 1 9\n</pre>\n\n<p>This input is the same as the first one aside from the value of $B$. Another way\nto achieve imbalance $3$ is to set $[s_1,s_2,s_3]=[3,1,6]$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 3-4 satisfy $l_i=r_i$ for all $i$.</li><li>Test cases 5-6 satisfy $p_i=i-1$ for all $i$.</li><li>Test cases 7-16 satisfy no additional constraints.</li></ul>\n\n<p>Within each subtask, the first half of the test cases will satisfy $B=0$, and\nthe rest will satisfy $B=1$.\n\n</p><p></p></div>\n\n<p>\n</p><p>Problem credits: Andrew Wang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1235"
    },
    {
      "title": "Problem 1. Bribing Friends",
      "subtitle": "USACO 2022 December Contest, Gold",
      "id": 1257,
      "year": "2022",
      "division": "gold",
      "number": "1",
      "problem": "Bessie wants to watch <em>Bovine Genomics: The Documentary</em>, but she doesn’t\nwant to go alone. Unfortunately, her friends aren’t enthusiastic enough to go\nwith her! Therefore, Bessie needs to bribe her friends to accompany her to the\nmovie theater. She has two tools in her bribery arsenal: <strong>mooney</strong> and\n<strong>ice cream cones</strong>.\n\n<p>Bessie has $N$ ($1 \\le N \\le 2000$) friends. However, not all friends are created equal! Friend $i$ has a popularity score\nof $P_i$ ($1 \\le P_i \\le 2000$), and Bessie wants to maximize the sum of the\npopularity scores of the friends accompanying her. Friend $i$ is only willing to\naccompany Bessie if she gives them $C_i$ ($1 \\le C_i \\le 2000$) moonies. They\nwill also offer her a discount of $1$ mooney if she gives them $X_i$\n($1 \\le X_i \\le 2000$) ice cream cones. Bessie can get as many whole-number\ndiscounts as she wants from a friend, as long as the discounts don’t cause the\nfriend to give her mooney.\n\n</p><p>Bessie has $A$ moonies and $B$ ice cream cones at her disposal\n($0 \\le A, B \\le 2000$). Help her determine the maximum sum of the popularity\nscores she can achieve if she spends her mooney and ice cream cones optimally!\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\n\n<p>Line $1$ contains three numbers $N$, $A$, and $B$, representing the number of\nfriends, the amount of mooney, and the number of ice cream cones Bessie has\nrespectively.\n\n</p><p>Each of the next $N$ lines contains three numbers, $P_i$, $C_i$, and $X_i$,\nrepresenting popularity ($P_i$), mooney needed to bribe friend $i$ to accompany\nBessie ($C_i$), and ice cream cones needed to receive a discount of $1$ mooney\nfrom friend $i$ ($X_i$).\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n\n<p>Output the maximum sum of the popularity scores of the friends accompanying\nBessie, assuming she spends her moonie and ice cream cones optimally.\n\n</p><p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 10 8\n5 5 4\n6 7 3\n10 6 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">15\n</pre>\n\n<p>Bessie can give $4$ moonies and $4$ ice cream cones to cow $1$, and $6$ moonies\nand $3$ ice cream cones to cow $3$, in order to get cows $1$ and $3$ to\naccompany her for a total popularity of $5 + 10 = 15$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-4 satisfy $N \\leq 5$ and $C_i = 1$</li><li>Test cases 5-7 satisfy $B = 0$</li><li>Test cases 8-10 satisfy $N, A, B, P_i, C_i, X_i \\leq 50$</li><li>Test cases 11-15 satisfy $N, A, B, P_i, C_i, X_i \\leq 200$</li><li>Test cases 16-20 satisfy no further constraints</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Timothy Feng, Nathan Wang, and Sam Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1257"
    },
    {
      "title": "Problem 2. Mountains",
      "subtitle": "USACO 2022 December Contest, Gold",
      "id": 1258,
      "year": "2022",
      "division": "gold",
      "number": "2",
      "problem": "<strong>**Note: the time limit for this problem is 5s, 2.5 times the default. The\nmemory limit is twice the default.**</strong>\n\n<p>There are $N$ ($1 \\leq N \\leq 2000$) evenly spaced mountains in a row on the edge of \nFarmer  John's farm.  These can be expressed as an array of heights\n$h_1,h_2,\\dots,h_N$. For a mountain $i$, you can see another mountain $j$ if\nthere are no mountains strictly higher than the line of sight connecting the\ntops of mountain $j$ and $i$. Formally, for two mountains $i &lt; j$, they can see\neach other if there is no $k$ such that $i &lt; k &lt; j$ and $(k, h_k)$ is above the\nline segment connecting $(i, h_i)$ and $(j, h_j)$. There are $Q$\n($1 \\leq Q \\leq 2000$) updates where the height of one mountain increases. Find\nthe total number of unordered pairs of mountains that see each other after each\nupdate.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nLine $1$ contains $N$.\n\n<p>Line $2$ contains $N$ heights $h_1,h_2,\\dots,h_N$ (for each $i$,\n$0 \\leq h_i \\leq 10^9$).\n\n</p><p>Line $3$ contains $Q$.\n\n</p><p>Lines $4$ to $3+Q$ contain $x$, $y$ ($1 \\leq x \\leq N$, $1 \\leq y$) where $x$ is\nthe index of the mountain and $y$ is the amount the height increases by. It is\nguaranteed that the new height of the mountain is at most $10^9$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n$Q$ lines, with the total number of unordered pairs of mountains that see each\nother after each update.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n2 4 3 1 5\n3\n4 3\n1 3\n3 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">7\n10\n7\n</pre>\n\n<p>Initially, the following pairs of mountains can see each other: $(1, 2)$,\n$(2, 3)$, $(2, 5)$, $(3, 4)$, $(3, 5)$, $(4, 5)$, a total of $6$.\n\n</p><p>After the first update, mountain $4$ has a height of $4$, which doesn't block\nany visibility but does make it so that $4$ can now see $2$, making the new\nanswer $7$.\n\n</p><p>After the second update, mountain $1$ has a height of $5$, which doesn't block\nany visibility but does make it so that $1$ can now see $3$, $4$, and $5$,\nmaking the new answer $10$.\n\n</p><p>After the third update, mountain $3$ has a height of $5$, which blocks mountain\n$1$ from seeing mountain $4$, blocks mountain $2$ from seeing mountains $4$ and\n$5$, and doesn't allow itself to see any more mountains since it can already see\nall of them, making the new answer\n$7$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li> Tests 2-5 satisfy $N, Q\\le 100$.\n</li><li> Tests 6-11 satisfy $Q \\leq 10$. </li><li> Tests 12-21 have no additional constraints. </li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Joe Li and Larry Xing\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1258"
    },
    {
      "title": "Problem 3. Strongest Friendship Group",
      "subtitle": "USACO 2022 December Contest, Gold",
      "id": 1259,
      "year": "2022",
      "division": "gold",
      "number": "3",
      "problem": "Farmer John has $N$ cows ($2\\le N\\le 10^5$), conveniently labeled $1 \\ldots N$.\nThere are $M$ ($1\\le M\\le 2\\cdot 10^5$) pairs of friends among these cows.\n\n<p>A group of cows is called a \"friendship group\" if every cow in the group is\nreachable from every other cow in the group via a chain of friendships that \nlies solely within the group (friendships connecting to cows outside the group\nhave no impact).  The \"strength\" of a friendship group is the minimum  number of\nfriends of any cow in the group within the group times the number of cows in the\ngroup (again, note that friendships connecting to cows outside the group do not\ncount for this definition).\n\n</p><p>Please find the maximum strength over all friendship groups.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $M$.\n\n<p>The next $M$ lines contain two integers $u_i$ and $v_i$ denoting that cows $u_i$\nand $v_i$ are friends ($1\\le u_i,v_i\\le N$, $u_i\\neq v_i$). No unordered  pair\nof cows appears more than once.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOne line containing the maximum strength over all friendship groups. \n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8 10\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n1 5\n2 6\n3 7\n4 8\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12\n</pre>\n\n<p>The maximum strength can be observed to be with the group of cows numbered\n$1, 2, 3, 4$. The minimum number of friends of any cow in this group within the\ngroup is $3$, so the answer is $4\\cdot 3=12$. \n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li> For $1\\le T\\le 3$, test case $T$ satisfies $N \\le 16$. </li><li> For $4\\le T\\le 9$, test case $T$ satisfies $N\\le 1000$. </li><li> For $10\\le T\\le 20$, test case $T$ satisfies no additional constraints.\n</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1259"
    },
    {
      "title": "Problem 1. Find and Replace",
      "subtitle": "USACO 2023 January Contest, Gold",
      "id": 1281,
      "year": "2023",
      "division": "gold",
      "number": "1",
      "problem": "\n<p>Bessie is using the latest and greatest innovation in text-editing software,\nmiV! Its powerful find-and-replace feature allows her to find all occurrences of\na lowercase English letter $c$ and replace each with a nonempty string of\nlowercase letters $s$. For example, given the string \"$\\texttt{ball}$\", if\nBessie selects $c$ to be 'l' and $s$ to be \"$\\texttt{na}$\", the given string\ntransforms into\n\"$\\texttt{banana}$\".\n\n</p><p>Bessie starts with the string \"$\\texttt{a}$\" and transforms it using a number of\nthese find-and-replace operations, resulting in a final string $S$. Since $S$\ncould be massive, she wants to know, given $l$ and $r$ with \n$1\\le l\\le r\\le \\min(|S|,10^{18})$, what $S_{l\\dots r}$ (the substring of $S$\nfrom the $l$-th to the $r$-th character inclusive) is.\n\n</p><p>It is guaranteed that the sum of $|s|$ over all operations is at most\n$2\\cdot 10^5$, and that\n$r-l+1\\le 2\\cdot 10^5$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $l$, $r$, and the number of operations.\n\n<p>Each subsequent line describes one operation and contains $c$ and $s$ for that\noperation. All characters are in the range 'a' through\n'z'.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the string $S_{l\\dots r}$ on a single line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 8 4\na ab\na bc\nc de\nb bbb\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">bdebbb\n</pre>\n\n<p>The string is transformed as follows:\n</p><div class=\"math\">$$\\texttt{a} \\rightarrow \\texttt{ab} \\rightarrow \\texttt{bcb} \\rightarrow \\texttt{bdeb} \\rightarrow \\texttt{bbbdebbb}$$</div>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Inputs 2-7: $\\sum |s|, r-l+1\\le 2000$</li><li>Inputs 8-15: No additional constraints.</li></ul>\n</div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1281"
    },
    {
      "title": "Problem 2. Lights Off",
      "subtitle": "USACO 2023 January Contest, Gold",
      "id": 1282,
      "year": "2023",
      "division": "gold",
      "number": "2",
      "problem": "\n<p>**Note: The time limit for this problem is 4s, twice the default.**\n\n</p><p>Bessie wants to go to sleep, but the farm's lights are keeping her awake. How\ncan she turn them off?\n\n</p><p>Bessie has two bit strings of length $N$ ($2\\le N\\le 20$), representing a\nsequence of lights and a sequence of switches, respectively. Each light is\neither on (1) or off (0). Each switch is either active (1) or inactive (0).\n\n</p><p>A *move* consists of the following sequence of operations:\n\n</p><p></p><ol><li>Toggle exactly one switch (set it to active if it is inactive, or vice\nversa).</li><li>For each active switch, toggle the state of the corresponding light (turn it\noff if it is on, or vice versa).</li><li>Cyclically rotate the switches to the right by one. Specifically, if the bit\nstring corresponding to the switches is initially $s_0s_1\\dots s_{N-1}$  then it\nbecomes $s_{N-1}s_0s_1\\dots s_{N-2}$.</li></ol>\n\n<p>For $T$ ($1\\le T\\le 2\\cdot 10^5$) instances of the problem above, count the\nminimum number of moves required to turn all the lights off. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nFirst line contains $T$ and $N$.\n\n<p>Next $T$ lines each contain a pair of length-$N$ bit strings.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each pair, the minimum number of moves required to turn all the lights off.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3\n000 101\n101 100\n110 000\n111 000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n1\n3\n2\n</pre>\n<ul><li> First test case: the lights are already all off. </li><li> Second test\ncase: We flip the third switch on the first move. </li><li> Third test case: we\nflip the first switch on the first move, the second switch on the second move,\nand the second switch again on the third move. </li><li> Fourth test case: we\nflip the first switch on the first move and the third switch on the second move.\n</li></ul>\n\n<p>It can be shown that in each case this is the minimal number of moves necessary.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 10\n1100010000 1000011000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\nIt can be shown that $2$ moves are required to turn all lights off.\n<ul><li> We flip the seventh switch on the first move and then again on the second\nmove. </li></ul>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-5: $N \\le 8$</li><li>Inputs 6-13: $N\\le 18$</li><li>Inputs 14-20: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: William Yue, Eric Yang, and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1282"
    },
    {
      "title": "Problem 3. Moo Route",
      "subtitle": "USACO 2023 January Contest, Gold",
      "id": 1283,
      "year": "2023",
      "division": "gold",
      "number": "3",
      "problem": "\n<p>Farmer Nhoj dropped Bessie in the middle of nowhere! At time $t=0$, Bessie is\nlocated at $x=0$ on an infinite number line. She frantically searches for an\nexit by moving left or right by $1$ unit each second. However, there actually is\nno exit and after $T$ seconds, Bessie is back at $x=0$, tired and resigned. \n\n</p><p>Farmer Nhoj tries to track Bessie but only knows how many times Bessie crosses\n$x=.5, 1.5, 2.5, \\ldots, (N-1).5$, given by an array $A_0,A_1,\\dots,A_{N-1}$\n($1\\leq N \\leq 10^5$, $1 \\leq A_i \\leq 10^6$). Bessie never reaches $x&gt;N$ nor\n$x&lt;0$.\n\n</p><p>In particular, Bessie's route can be represented by a string of\n$T = \\sum_{i=0}^{N-1} A_i$ $L$s and $R$s where the $i$th character represents\nthe direction Bessie moves in during the $i$th second. The number of direction\nchanges is defined as the number of occurrences of  $LR$s plus the number of\noccurrences of $RL$s. \n\n</p><p>Please help Farmer Nhoj count the number of routes Bessie could have taken that\nare consistent with $A$ and minimize the number of direction changes. It is\nguaranteed that there is at least one valid route.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$. The second line contains $A_0,A_1,\\dots,A_{N-1}$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of routes Bessie could have taken, modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n4 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>Bessie must change direction at least 5 times. There are two routes \ncorresponding to Bessie changing direction exactly 5 times:\n\n</p><p></p><pre>RRLRLLRRLL\nRRLLRRLRLL\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-4: $N\\le 2$ and $\\max(A_i)\\le 10^3$</li><li>Inputs 5-7: $N\\le 2$</li><li>Inputs 8-11: $\\max(A_i)\\le 10^3$</li><li>Inputs 12-21: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang, Claire Zhang, and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1283"
    },
    {
      "title": "Problem 1. Equal Sum Subarrays",
      "subtitle": "USACO 2023 February Contest, Gold",
      "id": 1305,
      "year": "2023",
      "division": "gold",
      "number": "1",
      "problem": "\n<p><strong>**Note: The time limit for this problem is 3s, 1.5x the default.**</strong>\n\n</p><p>FJ gave Bessie an array $a$ of length $N$\n($2\\le N\\le 500, -10^{15}\\le a_i\\le 10^{15}$) with all $\\frac{N(N+1)}{2}$\ncontiguous subarray sums distinct. For each index $i\\in [1,N]$, help Bessie\ncompute the minimum amount it suffices to change $a_i$ by so that there are two\ndifferent contiguous subarrays of $a$ with equal sum.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The next line contains $a_1,\\dots, a_N$ (the elements of $a$, in order).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOne line for each index $i\\in [1,N]$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n2 -3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n3\n</pre>\n\n<p>Decreasing $a_1$ by $2$ would result in $a_1+a_2=a_2$. Similarly, increasing\n$a_2$ by $3$ would result in $a_1+a_2=a_1$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n3 -10 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n6\n1\n</pre>\n\n<p>Increasing $a_1$ or decreasing $a_3$ by $1$ would result in $a_1=a_3$.\nIncreasing $a_2$ by $6$ would result in $a_1=a_1+a_2+a_3$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 3: $N\\le 40$</li><li>Input 4: $N \\le 80$</li><li>Inputs 5-7: $N \\le 200$</li><li>Inputs 8-16: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1305"
    },
    {
      "title": "Problem 2. Fertilizing Pastures",
      "subtitle": "USACO 2023 February Contest, Gold",
      "id": 1306,
      "year": "2023",
      "division": "gold",
      "number": "2",
      "problem": "\n<p>There are $N$ pastures ($2 \\le N \\le 2\\cdot 10^5$), connected by $N-1$ roads,\nsuch that they  form a tree. Every road takes 1 second to cross. Each pasture\nstarts out with  0 grass, and the $i$th pasture's grass grows at a rate of $a_i$\n($1\\le a_i\\le 10^8$) units per second.  Farmer John is in pasture 1 at the\nstart, and needs to drive around and fertilize the grass in every pasture.  If\nhe visits a pasture with $x$ units of  grass, it will need  $x$ amount of\nfertilizer. A pasture only needs to be fertilized the first time it is visited,\nand fertilizing a pasture takes 0 time.\n\n</p><p>The input contains an additional parameter $T\\in \\{0,1\\}$. \n\n</p><p></p><ul><li>If $T=0$, Farmer John must end at pasture 1.</li><li>If $T=1$, Farmer John may end at any pasture.</li></ul>\n\n<p>Compute the minimum amount of time it will take to fertilize every pasture  and\nthe minimum amount of fertilizer needed to finish in that amount of time.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $T$.\n\n<p>Then for each $i$ from $2$ to $N$, there is a line containing $p_i$ and $a_i$,\nmeaning that there is a road connecting pastures $p_i$ and $i$. It is guaranteed\nthat $1\\le p_i&lt;i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe minimum amount of time and the minimum amount of fertilizer, separated by\nspaces.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 0\n1 1\n1 2\n3 1\n3 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8 21\n</pre>\n\n<p>The optimal route for Farmer John is as follows:\n</p><ul><li> At time $1$, move to node $3$, which now has $1 \\cdot 2 = 2$ grass and so\nneeds $2$ fertilizer.</li><li> At time $2$, move to node $5$, which now has\n$2 \\cdot 4 = 8$ grass and so needs $8$ fertilizer.</li><li> At time $3$, move\nback to node $3$, which we already fertilized and so don't need to fertilize\nagain. </li><li> At time $4$, move to node $4$, which now has $4 \\cdot 1 = 4$\ngrass and so needs $4$ fertilizer.</li><li> At time $5$, move back to node $3$,\nwhich we already fertilized. </li><li> At time $6$, move back to node $1$.\n</li><li> At time $7$, move to node $2$, which now has $7 \\cdot 1 = 7$ grass\nand so needs $7$ fertilizer.</li><li> At time $8$, return to node $1$. </li></ul>\nThis route takes $8$ time and uses $2 + 8 + 4 + 7 = 21$ fertilizer. It can be\nshown that $8$ is the least possible amount of time for any route that returns\nto node $1$ at the end and $21$ is the least possible fertilizer used for any\nroute that returns to node $1$ and takes $8$ time. \n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 1\n1 1\n1 2\n3 1\n3 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6 29\n</pre>\n\n<p>The optimal route for Farmer John is as follows:\n</p><ul><li> At time $1$, move to node $2$, which now has $1 \\cdot 1 = 1$ grass and so\nneeds $1$ fertilizer.</li><li> At time $2$, move back to node $1$.</li><li>\nAt time $3$, move to node $3$, which now has $3 \\cdot 2 = 6$ grass and so needs\n$6$ fertilizer.</li><li> At time $4$, move to node $5$, which now has\n$4 \\cdot 4 = 16$ grass and so needs $16$ fertilizer.</li><li> At time $5$,\nmove back to node $3$, which we already fertilized and so don't need to\nfertilize again. </li><li> At time $6$, move to node $4$, which now has\n$6 \\cdot 1 = 6$ grass and so needs $6$ fertilizer.</li></ul>\nThis route takes $6$ time and uses $1 + 6 + 16 + 6 = 29$ fertilizer. It can be\nshown that $6$ is the least possible amount of time for any route and $29$ is\nthe least possible fertilizer used for any route that takes $6$ time. \n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-10: $T=0$</li><li>Inputs 11-22: $T=1$</li><li>Inputs 3-6 and 11-14: No pasture is adjacent to more than three roads.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Rohin Garg\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1306"
    },
    {
      "title": "Problem 3. Piling Papers",
      "subtitle": "USACO 2023 February Contest, Gold",
      "id": 1307,
      "year": "2023",
      "division": "gold",
      "number": "3",
      "problem": "\n<p>Farmer John wrote down  $N$ ($1\\le N\\le 300$) digits on pieces of paper. For\neach $i\\in [1,N]$, the $i$th piece of paper contains digit $a_i$\n($1 \\leq a_i \\leq 9$). \n\n</p><p>The cows have two favorite integers $A$ and $B$ ($1\\le A\\le B&lt; 10^{18}$), and\nwould like you to answer $Q$ ($1\\le Q\\le 5\\cdot 10^4$) queries. For the $i$th\nquery, the cows will move left to right across papers $l_i\\dots r_i$\n($1\\le l_i\\le r_i\\le N$), maintaining an initially empty pile of papers.  For\neach paper, they will either add it to the top of the pile, to the bottom of the\npile, or neither. In the end, they will read the papers in the pile from top to\nbottom, forming an integer. Over all $3^{r_i-l_i+1}$ ways for the cows to make\nchoices during this process,  count the number of ways that result in the cows\nreading an integer in $[A,B]$ inclusive, and output this number modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\n\n<p>The first line contains three space-separated integers $N$, $A$, and $B$. \n\n</p><p>The second line contains $N$ space-separated digits $a_1, a_2, \\dots, a_N$.\n\n</p><p>The third line contains an integer $Q$, the number of queries.\n\n</p><p>The next $Q$ lines each contain two space-separated integers $l_i$ and $r_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each query, a single line containing the answer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 13 327\n1 2 3 4 5\n3\n1 2\n1 3\n2 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n18\n34\n</pre>\n\n<p>For the first query, there are nine ways Bessie can stack papers when reading\nthe interval $[1, 2]$:\n</p><ul><li> Bessie can ignore $1$ then ignore $2$, getting $0$. </li><li> Bessie can\nignore $1$ then add $2$ to the top of the stack, getting $2$. </li><li> Bessie\ncan ignore $1$ then add $2$ to the bottom of the stack, getting $2$. </li><li>\nBessie can add $1$ to the top of the stack then ignore $2$, getting $1$. </li><li> Bessie can add $1$ to the top of the stack then add $2$ to the top of\nthe stack, getting $21$. </li><li> Bessie can add $1$ to the top of the stack\nthen add $2$ to the bottom of the stack, getting $12$. </li><li> Bessie\ncan add $1$ to the bottom of the stack then ignore $2$, getting $1$. </li><li>\nBessie can add $1$ to the bottom of the stack then add $2$ to the top of the\nstack, getting $21$. </li><li> Bessie can add $1$ to the bottom of the stack\nthen add $2$ to the bottom of the stack, getting $12$. </li></ul>\nOnly the $2$ ways that give $21$ yield a number between $13$ and $327$, so the\nanswer is $2$.\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-3: $B&lt;100$</li><li>Inputs 4-5: $A=B$</li><li>Inputs 6-13: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Jesse Choe\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1307"
    },
    {
      "title": "Problem 1. Custodial Cleanup",
      "subtitle": "USACO 2023 US Open Contest, Gold",
      "id": 1329,
      "year": "2023",
      "division": "gold",
      "number": "1",
      "problem": "\n<p>Due to the disorganized structure of his mootels (much like motels but with\nbovine rather than human guests), Farmer John has decided to take up the role of\nthe mootel custodian to restore order to the stalls.\n\n</p><p>Each mootel has $N$ stalls labeled $1$ through $N$ ($1 \\le N \\le 10^5$) and $M$\n($0 \\le M \\le 10^5$) corridors that connect pairs of stalls to each other\nbidirectionally. The $i$th stall is painted with color $C_i$ and initially has a\nsingle key of color $S_i$ in it. FJ will have to rearrange the keys to appease\nthe cows and restore order to the stalls.\n\n</p><p>FJ starts out in stall $1$ without holding any keys and is allowed to repeatedly\ndo one of the following moves:\n</p><ul><li> Pick up a key in the stall he is currently in. FJ can hold multiple keys at\na time.</li><li> Place down a key he is holding into the stall he is currently\nin. A stall may hold multiple keys at a time.</li><li> Enter stall $1$ by\nmoving through a corridor.</li><li> Enter a stall other than stall $1$ by\nmoving through a corridor. He can only do this if he currently holds a key that\nis the same color as the stall he is entering.</li></ul>\n\n<p>Unfortunately, it seems that the keys are not in their intended locations. To\nrestore order to FJ's mootel, the $i$th stall requires that a single key of\ncolor $F_i$ is in it. It is guaranteed that $S$ is a permutation of $F$.\n\n</p><p>For $T$ different mootels ($1 \\le T \\le 100$), FJ starts in stall $1$ and needs\nto place every key in its appropriate location, ending back in stall $1$. For\neach of the $T$ mootels, please answer if it is possible to do this.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$, the number of mootels (test cases).\n\n<p>Each test case will be preceded by a blank line. Then, the first line \nof each test case contains two integers $N$ and $M$.\n\n</p><p>The second line of each test case contains $N$ integers. The $i$-th integer on\nthis line, $C_i$, means that stall $i$ has color $C_i$ ($1 \\le C_i \\le N$).\n\n</p><p>The third line of each test case contains $N$ integers. The $i$-th integer on\nthis line, $S_i$, means that stall $i$ initially holds a key of color $S_i$\n($1 \\le S_i \\le N$).\n\n</p><p>The fourth line of each test case contains $N$ integers. The $i$-th integer on\nthis line, $F_i$, means that stall $i$ needs to have a key of color $F_i$ in it\n($1 \\le F_i \\le N$).\n\n</p><p>The next $M$ lines of each test case follow. The $i$-th of these lines contains\ntwo distinct integers, $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le N$). This represents\nthat a corridor exists between stalls $u_i$ and $v_i$. No corridors are\nrepeated.\n\n</p><p>The sum of $N$ over all mootels will not exceed $10^5$, and the sum of $M$ over\nall mootels will not exceed $2\\cdot 10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each mootel, output YES on a new line if there exists a way for FJ to return\na key of color $F_i$ to each stall $i$ and end back in stall $1$. Otherwise,\noutput NO on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n\n5 5\n4 3 2 4 3\n3 4 3 4 2\n2 3 4 4 3\n1 2\n2 3\n3 1\n4 1\n4 5\n\n4 3\n3 2 4 1\n2 3 4 4\n4 2 3 4\n4 2\n4 1\n4 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YES\nNO\n</pre>\n\n<p>For the first test case, here is a possible sequence of moves:\n\n</p><p></p><pre>Current stall: 1. Keys held: []. Keys in stalls: [3, 4, 3, 4, 2]\n(pick up key of color 3)\nCurrent stall: 1. Keys held: [3]. Keys in stalls: [x, 4, 3, 4, 2]\n(move from stall 1 to 2, allowed since we have a key of color C_2=3)\nCurrent stall: 2. Keys held: [3]. Keys in stalls: [x, 4, 3, 4, 2]\n(pick up key of color 4)\nCurrent stall: 2. Keys held: [3, 4]. Keys in stalls: [x, x, 3, 4, 2]\n(move from stall 2 to 1 to 4 to 5, allowed since we have keys of colors C_4=4 and C_5=3)\nCurrent stall: 5. Keys held: [3, 4]. Keys in stalls: [x, x, 3, 4, 2]\n(pick up key of color 2 and place key of color 3)\nCurrent stall: 5. Keys held: [2, 4]. Keys in stalls: [x, x, 3, 4, 3]\n(move from stall 5 to 4 to 1 to 3, allowed since we have keys of colors C_4=4 and C_3=2)\nCurrent stall: 3. Keys held: [2, 4]. Keys in stalls: [x, x, 3, 4, 3]\n(pick up key of color 3 and place key of color 4)\nCurrent stall: 3. Keys held: [2, 3]. Keys in stalls: [x, x, 4, 4, 3]\n(move from stall 3 to stall 2 and place key of color 3)\nCurrent stall: 2. Keys held: [2]. Keys in stalls: [x, 3, 4, 4, 3]\n(move from stall 2 to stall 1 and place key of color 2)\nCurrent stall: 1. Keys held: []. Keys in stalls: [2, 3, 4, 4, 3]\n</pre>\n\n<p>For the second test case, there exists no way for FJ to return a key of color\n$F_i$ to each stall $i$ and end back at stall $1$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n\n2 0\n1 2\n2 2\n2 2\n\n2 1\n1 1\n2 1\n2 1\n1 2\n\n2 1\n1 1\n2 1\n1 2\n1 2\n\n2 1\n1 1\n1 2\n2 1\n1 2\n\n5 4\n1 2 3 4 4\n2 3 5 4 2\n5 3 2 4 2\n1 2\n1 3\n1 4\n4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">YES\nYES\nNO\nYES\nNO\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 3-6 satisfy $N,M\\le 8$.</li><li>Test cases 7-10 satisfy $C_i=F_i$.</li><li>Test cases 11-18 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Eric Yachbes\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1329"
    },
    {
      "title": "Problem 2. Pareidolia",
      "subtitle": "USACO 2023 US Open Contest, Gold",
      "id": 1330,
      "year": "2023",
      "division": "gold",
      "number": "2",
      "problem": "\n<p>Pareidolia is the phenomenon where your eyes tend to see familiar patterns in\nimages where none really exist -- for example seeing a face in a cloud.  As you\nmight imagine, with Farmer John's constant proximity to cows, he often sees\ncow-related patterns in everyday objects.  For example, if he looks at the\nstring \"bqessiyexbesszieb\", Farmer John's eyes ignore some of the letters and\nall he sees is \"bessiexbessieb\" -- a string that has contains two contiguous\nsubstrings equal to \"bessie\".  \n\n</p><p>Given a string of length at most $2\\cdot 10^5$ consisting only of characters\na-z, where each character has an associated deletion cost, compute the maximum\nnumber of contiguous substrings that equal \"bessie\" you can form by deleting\nzero or more characters from it, and the minimum total cost of the characters you need to\ndelete in order to do this.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains the string. The second line contains the deletion cost\nassociated with each character (an integer in the range $[1,1000]$).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe maximum number of occurrences, and the minimum cost to produce this number\nof occurrences.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">besssie\n1 1 5 4 6 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n4\n</pre>\n\n<p>By deleting the 's' at position 4 we can make the whole string \"bessie\". The\ncharacter at position 4 has a cost of $4$, so our answer is cost $4$ for $1$\ninstance of \"bessie\", which is the best we can do.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">bebesconsiete\n6 5 2 3 6 5 7 9 8 1 4 5 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n21\n</pre>\n\n<p>By deleting the \"con\" at positions 5-7, we can make the string \"bebessiete\"\nwhich has \"bessie\" in the middle. Characters 5-7 have costs $5 + 7 + 9 = 21$, so\nour answer is cost $21$ for $1$ instance of \"bessie\", which is the best we can\ndo.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">besgiraffesiebessibessie\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n7\n</pre>\n\n<p>This sample satisfies the constraints for the second subtask.\n\n</p><p>By deleting the \"giraffe\" at positions 4-10, we can make the string\n\"bessiebessibessie\", which has \"bessie\" at the beginning and the end. \"giraffe\"\nhas 7 characters and all characters have cost $1$, so our answer is cost $7$ for\n$2$ instances of \"bessie\", which is the best we can do.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Inputs 4-5: $N\\le 2000$</li><li>Inputs 6-8: All costs are $1$</li><li>Inputs 9-17: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1330"
    },
    {
      "title": "Problem 3. Tree Merging",
      "subtitle": "USACO 2023 US Open Contest, Gold",
      "id": 1331,
      "year": "2023",
      "division": "gold",
      "number": "3",
      "problem": "\n<p>Having just completed a course in graph algorithms, Bessie the cow has begun\ncoding her very own graph visualizer! Currently, her graph visualizer is only\ncapable of visualizing rooted trees with nodes of distinct values, and it can\nonly perform one kind of operation: merging.\n\n</p><p>In particular, a merging operation takes any two distinct nodes in a tree with\nthe same parent and merges them into one node, with value equal to the maximum\nof the values of the two nodes merged, and children a union of all the children\nof the nodes merged (if any).\n\n</p><p>Unfortunately, after Bessie performed some merging operations on a tree, her\nprogram crashed, losing the history of the merging operations she performed. All\nBessie remembers is the tree she started with and the tree she ended with after\nshe performed all her merging operations. \n\n</p><p>Given her initial and final trees, please determine a sequence of merging\noperations Bessie could have performed. It is guaranteed that a sequence exists.\n\n</p><p>Each input consists of $T$ ($1\\le T\\le 100$) independent test cases. It is\nguaranteed that the sum of $N$  over all test cases does not exceed $1000$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$, the number of independent test cases. Each test\ncase is formatted as follows.\n\n<p>The first line of each test case contains the number of nodes $N$\n($2 \\leq N \\leq 1000$) in Bessie's initial tree, which have values $1\\dots N$. \n\n</p><p>Each of the next $N-1$ lines contains two space-separated node values $v_i$ and\n$p_i$ ($1 \\leq v_i, p_i \\leq N$) indicating that the node with value $v_i$ is a\nchild node of the node with value $p_i$ in Bessie's initial tree.\n\n</p><p>The next line contains the number of nodes $M$ ($2 \\leq M \\leq N$) in Bessie's\nfinal tree. \n\n</p><p>Each of the next $M-1$ lines contains two space-separated node values $v_i$ and\n$p_i$ ($1 \\leq v_i, p_i \\leq N$) indicating that the node with value $v_i$ is a\nchild node of the node with value $p_i$ in Bessie's final tree.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output the number of merging operations, followed by an\nordered sequence of merging operations of that length, one per line. \n\n<p>Each merging operation should be formatted as two distinct space-separated\nintegers: the values of the two nodes to merge in any order. \n\n</p><p>If there are multiple solutions, output any.\n\n</p><p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1\n8\n7 5\n2 1\n4 2\n5 1\n3 2\n8 5\n6 2\n4\n8 5\n5 1\n6 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n2 5\n4 8\n3 8\n7 8\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-6: The initial and final trees have the same number of leaves.\n</li><li>Inputs 7-16: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Aryansh Shrivastava\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1331"
    },
    {
      "title": "Problem 1. Flight Routes",
      "subtitle": "USACO 2023 December Contest, Gold",
      "id": 1353,
      "year": "2023",
      "division": "gold",
      "number": "1",
      "problem": "\n<p>Bessie recently discovered that her favorite pop artist, Elsie Swift, is\nperforming in her new Eras Tour! Unfortunately, tickets are selling out fast, so\nBessie is thinking of flying to another city to attend the concert. The Eras\ntour is happening in $N$ ($2\\le N\\le 750$) cities labeled $1\\dots N$, and for\neach pair of cities $(i,j)$ with $i&lt;j$ there either exists a single direct\nflight from $i$ to $j$ or not.\n\n</p><p>A <em>flight route</em> from city $a$ to city $b$ ($a&lt;b$) is a sequence of $k\\ge 2$ cities\n$a=c_1&lt;c_2&lt;\\dots&lt;c_k=b$ such that for each $1\\le i&lt;k$, there is a direct flight\nfrom city $c_i$ to city $c_{i+1}$. For every pair of cities $(i,j)$ with $i&lt;j$,\nyou are given the parity of the number of flight routes between them (0 for\neven, 1 for odd). \n\n</p><p>While planning her travel itinerary, Bessie got distracted and now wants to know\nhow many pairs of cities have direct flights between them. It can be  shown that\nthe answer is uniquely determined.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>Then follow $N-1$ lines. The $i$th line contains $N-i$ integers. The $j$th \ninteger of the $i$th line is equal to the parity of the number of flight routes\nfrom $i$ to $i+j$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the number of pairs of cities with direct flights between them.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n11\n1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>There are two direct flights: $1\\to 2$ and $2\\to 3$. There is one flight route\nfrom $1$ to $2$ and $2$ to $3$, each consisting of a single direct flight. There\nis one flight route from $1$ to $3$ ($1\\to 2\\to 3$).\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1111\n101\n01\n1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\n\n<p>There are six direct flights $1\\to 2, 1\\to 4, 1\\to 5, 2\\to 3, 3\\to 5, 4\\to 5$.\nThese result in the following numbers of flight routes:\n\n</p><p></p><pre>Flight Route Counts:\n\n            dest\n          1 2 3 4 5\n\n       1  0 1 1 1 3 \n       2  0 0 1 0 1 \nsource 3  0 0 0 0 1 \n       4  0 0 0 0 1 \n       5  0 0 0 0 0\n</pre>\n\n<p>which is equivalent to the sample input after taking all the numbers $\\pmod{2}$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-4: $N\\le 6$</li><li>Inputs 5-12: $N\\le 100$</li><li>Inputs 13-22: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1353"
    },
    {
      "title": "Problem 2. Minimum Longest Trip",
      "subtitle": "USACO 2023 December Contest, Gold",
      "id": 1354,
      "year": "2023",
      "division": "gold",
      "number": "2",
      "problem": "\n<p>Bessie is going on a trip in Cowland, which has $N$ ($2\\le N\\le 2\\cdot 10^5$)\ntowns numbered from $1$ to $N$ and $M$ ($1\\le M\\le 4\\cdot 10^5$) one-way roads.\nThe $i$th road runs from town $a_i$ to town $b_i$ and has label $l_i$\n($1\\le a_i,b_i\\le N$, $1\\le l_i\\le 10^9$).  \n\n</p><p>A <em>trip</em> of length $k$ starting at town $x_0$ is a sequence of towns\n$x_0, x_1, \\ldots, x_k$, such that there is a road from town $x_i$ to town\n$x_{i+1}$ for all $0\\le i &lt; k$. It is guaranteed that there are no trips of\ninfinite length in Cowland, and that no two roads connect the same pair of\ntowns.\n\n</p><p>For each town, Bessie wants to know the longest possible trip starting at it.\nFor some starting towns, there are multiple longest trips - out of these, she\nprefers the trip with the lexicographically minimum sequence of road labels.  A\nsequence is lexicographically smaller than another sequence of the same length\nif, at the first position in which they differ, the first sequence has a smaller\nelement than the second sequence.\n\n</p><p>Output the length and sum of road labels of Bessie's preferred trip starting at\neach town.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $M$.\n\n<p>The next $M$ lines each contain three integers $a_i$, $b_i$, and $l_i$, denoting\na road from $a_i$ to $b_i$ with label $l_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $N$ lines. The $i$th should contain two space-separated integers, the\nlength and sum of road labels of Bessie's preferred trip starting at town\n$i$.\n\n<p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 5\n4 3 10\n4 2 10\n3 1 10\n2 1 10\n4 1 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0 0\n1 10\n1 10\n2 20\n</pre>\n<h4>SAMPLE INPUT:</h4><pre class=\"in\">4 5\n4 3 4\n4 2 2\n3 1 5\n2 1 10\n4 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0 0\n1 10\n1 5\n2 12\n</pre>\n\n<p>In the following explanation, we let $a_i\\overset{l_i}\\to b_i$ represent the\nroad from $a_i$ to $b_i$ with label $l_i$.\n\n</p><p>There are several trips starting from vertex $4$, including\n$4 \\overset{4}\\to 3\\overset{5}\\to 1$, $4\\overset{1}\\to 1$, and\n$4\\overset{2}\\to 2\\overset{10}\\to 1$. Of these trips,\n$4 \\overset{4}\\to 3\\overset{5}\\to 1$ and $4\\overset{2}\\to 2\\overset{10}\\to 1$\nare the longest. These trips each have length 2, and their road label sequences\nare $[4,5]$ and $[2,10]$, respectively. $[2,10]$ is the lexicographically\nsmaller sequence, and its sum is $12$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 5\n4 3 2\n4 2 2\n3 1 5\n2 1 10\n4 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0 0\n1 10\n1 5\n2 7\n</pre>\n<h4>SAMPLE INPUT:</h4><pre class=\"in\">4 5\n4 3 2\n4 2 2\n3 1 10\n2 1 5\n4 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0 0\n1 5\n1 10\n2 7\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 5-6: All labels are the same.</li><li>Inputs 7-8: All labels are distinct.</li><li>Inputs 9-10: $N,M\\le 5000$</li><li>Inputs 11-20: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Claire Zhang and Spencer Compton\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1354"
    },
    {
      "title": "Problem 3. Haybale Distribution",
      "subtitle": "USACO 2023 December Contest, Gold",
      "id": 1355,
      "year": "2023",
      "division": "gold",
      "number": "3",
      "problem": "\n<p>Farmer John is distributing haybales across the farm!\n\n</p><p>Farmer John's farm has $N$ $(1\\le N\\le 2\\cdot 10^5)$ barns, located at integer\npoints $x_1,\\dots, x_N$ $(0 \\le x_i \\le 10^6)$ on the number line. Farmer John's\nplan is to first have $N$ shipments of haybales delivered to some integer point\n$y$ $(0 \\le y \\le 10^6)$ and then distribute one shipment to each barn.\n\n</p><p>Unfortunately, Farmer John's distribution service is very wasteful. In\nparticular, for some $a_i$ and $b_i$ $(1\\le a_i, b_i\\le 10^6)$, $a_i$ haybales\nare wasted per unit of distance left each shipment is transported, and $b_i$\nhaybales are wasted per unit of distance right each shipment is transported.\nFormally, for a shipment being transported from point $y$ to a barn at point\n$x$, the number of haybales wasted is given by \n\n</p><p></p><div class=\"math\">$$\\begin{cases}\n a_i\\cdot (y-x) &amp; \\text{if } y \\ge x \\\\\nb_i\\cdot (x-y) &amp; \\text{if } x &gt; y\n\\end{cases}.$$</div>\n\n<p>Given $Q$ $(1\\le Q\\le 2\\cdot 10^5)$ independent queries each consisting of\npossible values of $(a_i,b_i)$, please help Farmer John determine the fewest\namount of haybales that will be wasted if he chooses $y$ optimally. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The next line contains $x_1\\dots x_N$.\n\n</p><p>The next line contains $Q$.\n\n</p><p>The next $Q$ lines each contain two integers $a_i$ and $b_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $Q$ lines, the $i$th line containing the answer for the $i$th query.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1 4 2 3 10\n4\n1 1\n2 1\n1 2\n1 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">11\n13\n18\n30\n</pre>\n\n<p>For example, to answer the second query, it is optimal to select $y=2$. Then the\nnumber of wasted haybales is equal to\n$2(2-1)+2(2-2)+1(3-2)+1(4-2)+1(10-2)=1+0+1+2+8=13$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 2: $N,Q\\le 10$</li><li>Input 3: $N,Q\\le 500$</li><li>Inputs 4-6: $N,Q\\le 5000$</li><li>Inputs 7-16: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1355"
    },
    {
      "title": "Problem 1. Walking in Manhattan",
      "subtitle": "USACO 2024 January Contest, Gold",
      "id": 1377,
      "year": "2024",
      "division": "gold",
      "number": "1",
      "problem": "\n<p>Farmer John and his $Q$ ($1 \\leq Q \\leq 2 \\cdot 10^5$) cows are in Manhattan on\nvacation, but the cows have escaped and are now walking around freely in the\ncity! Manhattan is huge – so huge that its $N$ ($1 \\le N \\le 2 \\cdot 10^5$)\nroads stretch infinitely in the $x$-$y$ plane, but conveniently, those roads all\nrun perfectly horizontally or vertically. Each horizontal and vertical road can\nbe modeled by an equation of the form $y = c_i$ or $x = c_i$, where $c_i$ is an\ninteger in the range $0$ to $10^9$ inclusive.\n\n</p><p>Farmer John knows exactly where each cow started walking and how long ago they\nescaped. Cows are very predictable, so each of them walks according to the\nfollowing pattern:\n</p><ul><li>They only walk north ($+y$) or east ($+x$) at one unit per second.</li><li>If they are currently on a single road, they continue walking along the\nroad's direction.</li><li>If they are at the intersection of two roads, they\nwalk north if they have been walking for an even number of seconds and east\notherwise.</li></ul>\n\n<p>Given the layout of Manhattan and the information for each cow, help Farmer John\ndetermine where his cows are now!\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $Q$.\n\n<p>The next $N$ lines describe the roads. Each road is described by a direction (H\nor V) and a coordinate $c_i$. It is guaranteed that the roads are unique.\n\n</p><p>The next $Q$ lines describe the cows. Each cow is described by three integers\n$(x_i, y_i, d_i)$, meaning that they started walking from $(x_i, y_i)$ exactly\n$d_i$ seconds ago. It is guaranteed that $(x_i, y_i)$ lies on some road, and\n$0 \\le x_i, y_i, d_i \\le 10^9$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $Q$ lines, where the $i$th line contains the current position of the\n$i$th cow.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 5\nV 7\nH 4\nH 5\nV 6\n6 3 10\n6 4 10\n6 5 10\n6 6 10\n100 4 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">14 5\n7 13\n6 15\n6 16\n110 4\n</pre>\nThe first two cows took the following paths:\n\n<p></p><pre>(6, 3) -&gt; (6, 4) -&gt; (7, 4) -&gt; (7, 5) -&gt; (8, 5) -&gt; ... -&gt; (14, 5)\n(6, 4) -&gt; (6, 5) -&gt; (7, 5) -&gt; (7, 6) -&gt; ... -&gt; (7, 13)\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-4 satisfy $N, Q, c_i, x_i, y_i, d_i \\leq 100$.</li><li>Inputs 5-9 satisfy\n$N, Q\\le 3000$.</li><li>Inputs 10-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1377"
    },
    {
      "title": "Problem 2. Cowmpetency",
      "subtitle": "USACO 2024 January Contest, Gold",
      "id": 1378,
      "year": "2024",
      "division": "gold",
      "number": "2",
      "problem": "\n<p>Farmer John is hiring a new herd leader for his cows. To that end, he has\ninterviewed $N$ ($2 \\leq N \\leq 10^9$) cows for the position. After each\ninterview, he assigned an integer \"cowmpetency\" score to the candidate ranging from $1$\nto $C$ ($1 \\leq C \\leq 10^4$) that is correlated with their leadership\nabilities.\n\n</p><p>Because he has interviewed so many cows, Farmer John has forgotten all of their\ncowmpetency scores. However, he does remembers $Q$\n($1 \\leq Q \\leq \\min(N - 1, 100)$) pairs of numbers $(a_i, h_i)$ where cow $h_i$\nwas the first cow with a <strong>strictly greater</strong> cowmpetency score than cows $1$\nthrough $a_i$ (so\n$1 \\leq a_i &lt; h_i \\leq N$).\n\n</p><p>Farmer John now tells you the $Q$ pairs of $(a_i, h_i)$. Help him count how many\nsequences of cowmpetency scores are consistent with this information! It is\nguaranteed that there is at least one such sequence. Because this number may be\nvery large, output its value modulo $10^9 + 7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$, $Q$, and $C$.\n\n<p>The next $Q$ lines each contain a pair $(a_i, h_i)$. It is guaranteed that all\n$a_j$ are distinct.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of sequences of cowmpetency scores consistent with what Farmer John\nremembers, modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 2 3\n2 3\n4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\n\n<p>The following six sequences are the only ones consistent with what Farmer John\nremembers:\n\n</p><p></p><pre>1 1 2 1 3 1\n1 1 2 1 3 2\n1 1 2 1 3 3\n1 1 2 2 3 1\n1 1 2 2 3 2\n1 1 2 2 3 3\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 1 20\n1 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">399988086\n</pre>\n\n<p>Make sure to output the answer modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-4 satisfy $N \\leq 10$ and $Q, C \\leq 4$.</li><li>Inputs 5-7\nsatisfy $N, C \\leq 100$.</li><li>Inputs 8-10 satisfy $N \\leq 2000$ and\n$C \\leq 200$.</li><li>Inputs 11-15 satisfy $N, C \\leq 2000$.</li><li>Inputs\n16-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Suhas Nagar\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1378"
    },
    {
      "title": "Problem 3. Nap Sort",
      "subtitle": "USACO 2024 January Contest, Gold",
      "id": 1379,
      "year": "2024",
      "division": "gold",
      "number": "3",
      "problem": "\n<p>Bessie is trying to sort an array of integers using her own sorting algorithm.\nShe has a pile of $N$ $(1 \\leq N \\leq 2\\cdot 10^5)$ integers $a_1,a_2,\\dots,a_N$\n$(1 \\leq a_i \\leq 10^{11})$ that she will put in a separate array in sorted\norder. She repeatedly finds the minimum integer in her pile, removes it, and\nadds it to the end of the array. It takes Bessie $p$ seconds to find the minimum\ninteger in a pile of $p$ integers.\n\n</p><p>Farmer John instructed some of the other cows in the farm to help Bessie with\nher task, but they are quite lazy, so Bessie uses that to her advantage. She\ndivides the integers into two piles: Bessie pile and Helper pile. For every\ninteger in Bessie's pile, she performs her algorithm as normal. For every\ninteger in the helper pile, she assigns it to a different helper cow. Farmer\nJohn has a large farm, so Bessie can get as many helper cows as she wants. If a\nhelper receives the integer $a_i$, Bessie instructs that cow to nap for $a_i$\nseconds, and add their integer to the end of the array immediately when they\nwake up. If Bessie and a helper add an integer to the array at the same time,\nBessie's integer will get added first since she is the leader. If more than one\nhelper gets assigned the same integer, they will add copies of that integer to\nthe array at the same time.\n\n</p><p>Help Bessie divide her integers so that the final array is sorted and the time\nit takes to sort the array is minimized.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$, the number of independent test cases\n($1\\le T\\le 10$). \n\n<p>Each test case is formatted as follows:\n\n</p><p>The first line of each test case contains the number of integers $N$ in Bessie's\narray.\n\n</p><p>The next line of each test case contains $a_1, a_2, \\dots, a_N$, the integers\nthat Bessie is sorting. The same integer may appear multiple times.\n\n</p><p>It is guaranteed that the sum of $N$ over all tests does not exceed\n$2\\cdot 10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output the minimum time to sort the array on a new line, if\nBessie divides her integers optimally.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n5\n1 2 4 5 100000000000\n5\n17 53 4 33 44\n4\n3 5 5 5\n6\n2 5 100 1 4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n15\n5\n6\n</pre>\n\n<p>In the first example, Bessie can assign $1,2$ to helpers and leave $4,5,10^{11}$\nfor herself. \n\n</p><p></p><pre>Time | Event\n-----+----------------------\n1    | Helper adds 1\n2    | Helper adds 2\n3    | Bessie adds 4\n5    | Bessie adds 5\n6    | Bessie adds 10^{11}\n</pre>\n\n<p>In the second example, the best Bessie can do is sort everything by herself. One\ndivision that does *not* work is for Bessie to assign $4$ to a helper and the\nrest to herself because Bessie will end up adding $17$ to the array before the\nhelper adds $4$ to the array.\n\n</p><p>In the third example, Bessie can assign all the integers to helpers.\n\n</p><p>In the fourth example, Bessie can assign $1,4,5$ to helpers and leave $2,5,100$\nto herself.\n\n</p><p></p><pre>Time | Event\n-----+------------------\n1    | Helper adds 1\n3    | Bessie adds 2\n4    | Helper adds 4\n5    | Bessie adds 5\n5    | Helper adds 5\n6    | Bessie adds 100\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 2: $N\\le 16$</li><li>Inputs 3-5: $N\\le 150$</li><li>Inputs 6-8: $\\sum N\\le 5000$</li><li>Inputs 9-11: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Suhas Nagar\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1379"
    },
    {
      "title": "Problem 1. Bessla Motors",
      "subtitle": "USACO 2024 February Contest, Gold",
      "id": 1401,
      "year": "2024",
      "division": "gold",
      "number": "1",
      "problem": "\n<p><strong>**Note: The time limit for this problem is 3s, 1.5x the default. The memory\nlimit for this problem is 512MB, twice the default.**</strong>\n\n</p><p>Farmer John would like to promote his line of Bessla electric tractors by\nshowcasing Bessla's network of charging stations. He has identified $N$\n($2\\le N\\le 5\\cdot 10^4$) points of interest labeled $1\\dots N$, of which the\nfirst $C$ ($1\\le C &lt; N$) are charging stations and the remainder are travel\ndestinations. These points of interest are interconnected by $M$\n($1\\le M\\le 10^5$) bidirectional roads, the $i$-th of which connects distinct\npoints $u_i$ and $v_i$ ($1\\le u_i, v_i\\le N$) and has length $\\ell_i$ miles\n($1\\le\\ell_i\\le 10^9$).\n\n</p><p>A Bessla can travel up to $2R$ miles ($1\\le R\\le 10^9$) on a single charge,\nallowing it to reach any destination within $R$ miles of a charging station. A\ndestination is deemed <em>well-connected</em> if it is reachable from at least $K$\n($1\\le K\\le 10$) distinct charging stations. Your task is to assist Farmer John\nin identifying the set of well-connected travel destinations.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains five space-separated integers $N$, $M$, $C$, $R$, and\n$K$. Each of the following $M$ lines contains three space-separated integers\n$u_i$, $v_i$, and $\\ell_i$ such that $u_i\\neq v_i$.\n\n<p>The charging stations are labeled $1, 2, \\ldots, C$. The remaining points of\ninterest are all travel destinations.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFirst, output the number of well-connected travel destinations on a single line.\nThen, list all well-connected travel destinations in ascending order, each on a\nseparate line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 3 1 4 1\n1 2 3\n1 3 5\n2 3 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n2\n</pre>\n\n<p>We have one charging station at $1$. From this charging station, we can reach\npoint $2$ (since it is distance $3$ away from $1$), but not point $3$ (since it\nis distance $5$ away from $1$). Thus, only point $2$ is well-connected.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3 2 101 2\n1 2 1\n2 3 100\n1 4 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n3\n4\n</pre>\n\n<p>We have charging stations at $1$ and $2$, and both points $3$ and $4$ are within\ndistance $101$ of both $1$ and $2$. Thus, both points $3$ and $4$ are well-connected.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3 2 100 2\n1 2 1\n2 3 100\n1 4 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n4\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 4 and 5: $K = 2$ and $N \\le 500$ and\n$M\\le 1000$.</li><li>Inputs 6 and 7: $K = 2$.</li><li>Inputs 8-15: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Alexander Wei\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1401"
    },
    {
      "title": "Problem 2. Milk Exchange",
      "subtitle": "USACO 2024 February Contest, Gold",
      "id": 1402,
      "year": "2024",
      "division": "gold",
      "number": "2",
      "problem": "\n<p>Farmer John's $N$ $(1 \\leq N \\leq 5 \\cdot 10^5)$ cows are lined up in a circle.\nThe $i$th cow has a bucket with integer capacity $a_i$ $(1 \\leq a_i \\leq 10^9)$\nliters. All buckets are initially full.\n\n</p><p>Every minute, cow $i$ will pass all the milk in their bucket to cow $i+1$ for\n$1\\le i&lt;N$, with cow $N$ passing its milk to cow $1$. All exchanges happen\nsimultaneously (i.e., if a cow has a full bucket but gives away $x$ liters of\nmilk and also receives $x$ liters, her milk is preserved). If a cow's total milk\never ends up exceeding $a_i$, then the excess milk will be lost.\n\n</p><p>After each of $1, 2, \\dots, N$ minutes, how much total milk is left among all\ncows?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$. \n\n<p>The next line contains integers $a_1,a_2,...,a_N$.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $N$ lines, where the $i$-th line is the total milk left among all cows\nafter $i$ minutes.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n2 2 2 1 2 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n7\n6\n6\n6\n6\n</pre>\nInitially, the amount of milk in each bucket is $[2, 2, 2, 1, 2, 1]$.\n<ul><li>After $1$ minute, the amount of milk in each bucket is $[1, 2, 2, 1, 1, 1]$\nso the total amount of milk is $8$.</li><li>After $2$ minutes, the amount of\nmilk in each bucket is $[1, 1, 2, 1, 1, 1]$ so the total amount of milk is\n$7$.</li><li>After $3$ minutes, the amount of milk in each bucket is\n$[1, 1, 1, 1, 1, 1]$ so the total amount of milk is $6$.</li><li>After $4$\nminutes, the amount of milk in each bucket is  $[1, 1, 1, 1, 1, 1]$ so the total\namount of milk is $6$.</li><li>After $5$ minutes, the amount of milk in each\nbucket is $[1, 1, 1, 1, 1, 1]$ so the total amount of milk is $6$.</li><li>After $6$ minutes, the amount of milk in each bucket is $[1, 1, 1, 1, 1, 1]$\nso the total amount of milk is\n$6$.</li></ul>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8\n3 8 6 4 8 3 8 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">25\n20\n17\n14\n12\n10\n8\n8\n</pre>\n\n<p>After $1$ minute, the amount of milk in each bucket is\n$[1, 3, 6, 4, 4, 3, 3, 1]$ so the total amount of milk is $25$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10\n9 9 10 10 6 8 2 1000000000 1000000000 1000000000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2000000053\n1000000054\n56\n49\n42\n35\n28\n24\n20\n20\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Inputs 4-5: $N \\le 2000$</li><li>Inputs 6-8: $a_i \\le 2$</li><li>Inputs\n9-13: All $a_i$ are generated uniformly at random in the range $[1,10^9]$. </li><li>Inputs 14-23: No additional constraints.</li></ul>\n</div>\n\n<p>\n\n</p><p>Problem credits: Chongtian Ma, Alex Liang, Patrick Deng\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1402"
    },
    {
      "title": "Problem 3. Quantum Moochanics",
      "subtitle": "USACO 2024 February Contest, Gold",
      "id": 1403,
      "year": "2024",
      "division": "gold",
      "number": "3",
      "problem": "\n<p>In her free time, Bessie likes to dabble in experimental physics. She has\nrecently discovered a pair of new subatomic particles, named <strong>mootrinos</strong>\nand <strong>antimootrinos</strong>. Like standard\n<a href=\"https://en.wikipedia.org/wiki/Antimatter\"> matter-antimatter pairs</a>,\nmootrinos and antimootrinos annihilate each other and disappear when they meet.\nBut what makes these particles unique is that they switch their direction of\nmotion (while maintaining the same speed) whenever Bessie looks at them.\n\n</p><p>For her latest experiment, Bessie has placed an <strong>even number</strong> $N$\n($2 \\leq N \\leq 2 \\cdot 10^5$)\nof these particles in a line. The line starts with a mootrino on the left and\nthen alternates between the two types of particles, with the $i$-th particle\nlocated at position $p_i$ ($0 \\leq p_1 &lt; \\cdots &lt; p_N \\leq 10^{18}$). Mootrinos\ninitially move <strong>right</strong> while antimootrinos initially move <strong>left</strong>, and\nthe $i$-th particle moves with a constant speed of $s_i$ units per second\n($1 \\leq s_i \\leq 10^9$).\n\n</p><p>Bessie makes observations at the following times:\n</p><ul><li>First, $1$ second after the start of the experiment.</li><li>Then $2$\nseconds after the first observation.</li><li>Then $3$ seconds after the second\nobservation.</li><li>...</li><li>Then $n + 1$ seconds after the $n$-th observation.</li></ul>\nDuring each observation, Bessie notes down which particles have disappeared.\n\n<p>This experiment may take an extremely long time to complete, so Bessie would\nlike to first simulate its results. Given the experiment setup, help Bessie\ndetermine when (i.e., <strong>the observation number</strong>) she will observe each\nparticle disappear! It may be shown that all particles will eventually\ndisappear.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nEach input contains $T$ ($1\\le T\\le 10$) independent test cases.\n\n<p>Each test case consists of three lines. The first line contains $N$, the second\nline contains $p_1,\\dots,p_N$, and the third line contains $s_1\\dots,s_N$.\n\n</p><p>It is guaranteed that the sum of all $N$ does not exceed $2\\cdot 10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output the observation number for each particle's\ndisappearance, separated by spaces.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n2\n1 11\n1 1\n2\n1 12\n1 1\n2\n1 11\n4 6\n2\n1 11\n4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9 9\n11 11\n1 1\n3 3\n</pre>\n\n<p>For the first test, Bessie observes the following during the first $8$\nobservations:\n</p><ul><li>The mootrino (initially moving <strong>right</strong>) appears at positions\n$2 \\rightarrow 0 \\rightarrow 3 \\rightarrow -1 \\rightarrow 4 \\rightarrow -2 \\rightarrow 5 \\rightarrow -3$.</li><li>The antimootrino (initially moving <strong>left</strong>) appears at positions\n$10 \\rightarrow 12 \\rightarrow 9 \\rightarrow 13 \\rightarrow 8 \\rightarrow 14 \\rightarrow 7 \\rightarrow 15$.</li></ul>\nThen right at observation $9$, the two particles meet at position $6$ and\nannihilate each other.\n\n<p>For the second test, the antimootrino starts $1$ additional unit to the right,\nso the two particles meet at position $6.5$ half a second before observation\n$11$.\n\n</p><p>Note that we only care about observation numbers, not times or positions.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n4\n1 3 5 8\n1 1 1 1\n4\n1 4 5 8\n1 1 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 1 3 3\n7 2 2 7\n</pre>\n\n<p>For the first test:\n</p><ul><li>The two leftmost particles meet at position $2$ right at observation\n$1$.</li><li>The two rightmost particles meet at position $6.5$ half a second\nbefore observation $3$.</li></ul>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 3 satisfies $N = 2$.</li><li>Input 4 satisfies $N \\leq 2000$ and $p_i \\leq 10^4$ for all cows.</li><li>Inputs 5-7 satisfy $N \\leq 2000$.</li><li>Inputs 8-12 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Aryansh Shrivastava, Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1403"
    }
  ],
  "platinum": [
    {
      "title": "Problem 1. Fort Moo",
      "subtitle": "USACO 2016 January Contest, Platinum",
      "id": 600,
      "year": "2016",
      "division": "platinum",
      "number": "1",
      "problem": "Bessie is building a fort with her friend Elsie. Like any good fort, this one\nneeds to start with a sturdy frame. Bessie wants to build a frame in the shape\nof a one-meter-wide rectangular outline, atop which she will build the fort.\n\n<p>Bessie has already chosen a site on which to build the fort -- a piece of land\nmeasuring $N$ meters by $M$ meters ($1 \\leq N, M \\leq 200$). Unfortunately, the \nsite has some swampy areas that cannot be used to support the frame.  Please\nhelp Bessie determine the largest area she can cover with her fort (the area of\nthe rectangle supported by the frame), such that the frame avoids sitting on any\nof the swampy areas.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file fortmoo.in):</h4>\nLine 1 contains integers $N$ and $M$.  \n\n<p>The next $N$ lines each contain $M$ characters, forming a grid describing the \nsite.  A character of '.' represents normal grass, while 'X' represents a swampy\nspot.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file fortmoo.out):</h4>\nA single integer representing the maximum area that Bessie can cover with her\nfort.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 6\n......\n..X..X\nX..X..\n......\n..X...\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">16\n</pre>\n\n<p>In the example, the placement of the optimal frame is indicated by 'f's below:\n</p><pre>.ffff.\n.fX.fX\nXf.Xf.\n.ffff.\n..X...\n</pre>\n\n<p>Problem credits: Nathan Pinsker\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=600"
    },
    {
      "title": "Problem 2. Mowing the Field",
      "subtitle": "USACO 2016 January Contest, Platinum",
      "id": 601,
      "year": "2016",
      "division": "platinum",
      "number": "2",
      "problem": "Farmer John is quite reliable in all aspects of managing his farm, except one:\nhe is terrible at mowing the grass in a timely fashion.   He only manages to\nmove the mowing machine once per day, in fact. On day 1, he starts at position\n$(x_1, y_1)$ and on day $d$ he mows along a straight segment to the position\n$(x_d, y_d)$, moving either horizontally or vertically on the 2D map of his\nfarm; that is, either  $x_d = x_{d-1}$, or $y_d = y_{d-1}$.  FJ alternates\nbetween horizontal and vertical moves on successive days.\n\n<p>So slow is FJ's progress that some of the grass he mows might grow back before\nhe is finished with all his mowing. Any section of grass that is cut in day $d$\nwill reappear on day $d + T$, so if FJ's mowing path crosses a path he cut at\nleast $T$ days earlier, he will end up cutting grass at the same point again. \nIn an effort to try and reform his poor mowing strategy, FJ would like to count\nthe number of times this happens.  \n\n</p><p>Please count the number of times FJ's mowing path crosses over an earlier\nsegment on which grass has already grown back.  You should only count\n\"perpendicular\" crossings, defined as a point in common between a horizontal and\na vertical segment that is an endpoint of neither.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file mowing.in):</h4>\nThe first line of input contains $N$ ($2 \\leq N \\leq 100,000$) and $T$\n($1 \\leq T \\leq N$, $T$ even).  \n\n<p>The next $N$ lines describe the position of the mower on days $1 \\ldots N$.  The\n$i$th of these lines contains integers $x_i$ and $y_i$ (nonnegative integers\neach at most 1,000,000,000).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file mowing.out):</h4>\nPlease output a count of the number of crossing points described above, where FJ\nre-cuts a point of grass that had grown back after being cut earlier.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 4\n0 10\n10 10\n10 5\n3 5\n3 12\n6 12\n6 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>Here, FJ crosses on day 7 a segment of grass he cut on day 2, which counts. The\nother intersections do not count.\n\n</p><p>Note: This problem has expanded limits: 5 seconds per test case (10 for Python and Java), and 512 MB of memory.\n\n</p><p>Problem credits: Chad Waters and Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=601"
    },
    {
      "title": "Problem 3. Lights Out",
      "subtitle": "USACO 2016 January Contest, Platinum",
      "id": 602,
      "year": "2016",
      "division": "platinum",
      "number": "3",
      "problem": "Farmer John has installed a fancy new milking machine in his barn, but it draws\nso much power that it occasionally causes the power to go out!  This happens so\noften that Bessie has memorized a map of the barn, making it easier for her to\nfind the exit of the barn in the dark.  She is curious though about the impact\nof power loss on her ability to exit the barn quickly.  For example, she wonders\nhow much farther she might need to walk find the exit in the dark.\n\n<p>The barn is described by a simple (non self-intersecting) polygon with integer \nvertices $(x_1, y_1) \\ldots (x_n, y_n)$ listed in clockwise order.  Its edges\nalternate between horizontal (parallel to the x-axis) and vertical (parallel to\nthe y-axis); the first edge can be of either type. The exit is located at\n$(x_1, y_1)$.  Bessie starts inside the barn located at some vertex \n$(x_i, y_i)$ for $i &gt; 1$.  She can walk only around the perimeter of the barn,\neither clockwise or counterclockwise, potentially changing direction any time\nshe reaches a vertex.  Her goal is to travel a minimum distance to reach the\nexit. This is relatively easy to do with the lights on, of course, since she\nwill travel either clockwise or counterclockwise from her current location to\nthe  exit -- whichever direction is shorter.\n\n</p><p>One day, the lights go out, causing Bessie to panic and forget\nwhich vertex she is standing at.  Fortunately, she still remembers the\nexact map of the barn, so she can possibly figure out her position by\nwalking around and using her sense of touch.  Whenever she is standing\nat a vertex (including at her initial vertex), she can feel whether it\nis a left turn or a right turn, and she can tell if that vertex is the\nexit.  When she walks along an edge of the barn, she can determine the\nexact length of the edge after walking along the entire edge.  In\ngeneral, Bessie will strategically feel her way around her starting\nvertex until she knows enough information to determine where she is,\nat which point she can easily figure out how to get to the exit by\ntraveling a minimum amount of remaining distance.\n\n</p><p>Please help Bessie determine the smallest possible amount by which\nher travel distance will increase in the worst case (over all\npossibilities for her starting vertex) for travel in the dark versus\nin a lit barn, assuming she moves according to an optimal strategy in\neach case.  An \"optimal\" strategy for the unlit case is one that\nminimizes this extra worst-case amount.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file lightsout.in):</h4>\nThe first line of the input contains $N$ ($4 \\leq N \\leq 200$).  Each of the\nnext $N$ lines contains two integers, describing the points $(x_i, y_i)$ in\nclockwise order around the barn.  These integers are in the range\n$-100,000 \\ldots 100,000$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file lightsout.out):</h4>\nPlease output the smallest possible worst-case amount by which\nBessie's optimal distance in the dark is longer than her optimal\ndistance in a lit barn, where the worst case is taken over all\npossible vertices at which Bessie can start.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n0 0\n0 10\n1 10\n1 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this example, Bessie can feel that she is initially standing at an inward\nbend, however since in this example all corners are inward bends this tells her\nlittle information.\n\n</p><p>One optimal strategy is to just travel clockwise.  This is optimal is she starts at vertex 3 or 4 and only adds 2 units of distance if she starts at vertex 2.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=602"
    },
    {
      "title": "Problem 1. Load Balancing",
      "subtitle": "USACO 2016 February Contest, Platinum",
      "id": 624,
      "year": "2016",
      "division": "platinum",
      "number": "1",
      "problem": "Farmer John's $N$ cows are each standing at distinct locations\n$(x_1, y_1) \\ldots (x_n, y_n)$ on his two-dimensional farm\n($1 \\leq N \\leq 100,000$, and the $x_i$'s and $y_i$'s are positive odd integers\nof size at most $1,000,000$).  FJ wants to partition his field by building a \nlong (effectively infinite-length) north-south fence with equation $x=a$ ($a$\nwill be an even integer, thus ensuring that he does not build the fence through\nthe position of any cow). He also wants to build a long (effectively\ninfinite-length) east-west fence with equation $y=b$, where $b$ is an even\ninteger.  These two fences cross at the point $(a,b)$, and together they\npartition his field into four regions.  \n\n<p>FJ wants to choose $a$ and $b$ so that the cows appearing in the four resulting\nregions are reasonably \"balanced\", with no region containing too many cows. \nLetting $M$ be the maximum number of cows appearing in one of the four regions,\nFJ wants to make $M$ as small as possible.  Please help him determine this\nsmallest possible value for $M$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file balancing.in):</h4>\nThe first line of the input contains a single integer, $N$. The next $N$ lines\neach contain the location of a single cow, specifying its $x$ and $y$\ncoordinates.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file balancing.out):</h4>\nYou should output the smallest possible value of $M$ that FJ can achieve by\npositioning his fences optimally.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n7 3\n5 5\n7 13\n3 1\n11 7\n5 3\n9 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=624"
    },
    {
      "title": "Problem 2. Fenced In",
      "subtitle": "USACO 2016 February Contest, Platinum",
      "id": 625,
      "year": "2016",
      "division": "platinum",
      "number": "2",
      "problem": "Farmer John has realized that many of his cows are strangely agoraphobic (being\nfearful of large open spaces). To try and make them less afraid of grazing, he\npartitions his large field into a number of smaller regions by building vertical\n(north-south) and horizontal (east-west) fences.  \n\n<p>The large field is a rectangle with corner points at $(0,0)$ and $(A,B)$.  FJ\nbuilds $n$ vertical fences  ($0 \\leq n \\leq 25,000$) at distinct locations\n$a_1 \\ldots a_n$ ($0 &lt; a_i &lt; A$); each fence runs from $(a_i, 0)$ to $(a_i, B)$.\nHe also builds $m$ horizontal fences ($0 \\leq m \\leq 25,000$) at locations\n$b_1 \\ldots b_m$ ($0 &lt; b_i &lt; B$); each such fence runs from $(0, b_i)$ to\n$(A, b_i)$. Each vertical fence crosses through each horizontal fence,\nsubdividing the large field into a  total of $(n+1)(m+1)$ regions.\n\n</p><p>Unfortunately, FJ completely forgot to build gates into his fences, making it\nimpossible for cows to leave their enclosing region and travel around the entire\nfield!  He wants to remedy this situation by removing pieces of some of his\nfences to allow cows to travel between adjacent regions.  He wants to select\ncertain pairs of adjacent regions and remove the entire length of fence\nseparating them; afterwards, he wants cows to be able to wander through these\nopenings so they can travel anywhere in his larger field.\n\n</p><p>For example, FJ might take a fence pattern looking like this:\n\n</p><p></p><pre>+---+--+\n|   |  |\n+---+--+\n|   |  |  \n|   |  |\n+---+--+\n</pre>\n\n<p>and open it up like so:\n\n</p><p></p><pre>+---+--+\n|      |  \n+---+  +  \n|      |  \n|      |\n+---+--+\n</pre>\n\n<p>Please help FJ determine the minimum total length of fencing he must remove to\naccomplish his goal.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file fencedin.in):</h4>\nThe first line of input contains $A$, $B$, $n$, and $m$\n($1 \\leq A, B \\leq 1,000,000,000$). The next $n$ lines contain $a_1 \\ldots a_n$,\nand the next $m$ lines after that contain $b_1 \\ldots b_m$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file fencedin.out):</h4>\nPlease write the minimum length of fencing FJ must remove.  Note that this might\nbe too large to fit into a standard 32-bit integer, so you may need to\nuse 64-bit integer types (e.g., \"long long\" in C/C++).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">15 15 5 2\n2\n5\n10\n6\n4\n11\n3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">44\n</pre>\n\n<p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=625"
    },
    {
      "title": "Problem 3. Circular Barn",
      "subtitle": "USACO 2016 February Contest, Platinum",
      "id": 626,
      "year": "2016",
      "division": "platinum",
      "number": "3",
      "problem": "Being a fan of contemporary architecture, Farmer John has built a new barn in\nthe shape of a perfect circle.  Inside, the barn consists of a ring of $n$\nrooms,  numbered clockwise from $1 \\ldots n$ around the perimeter of the barn\n($3 \\leq n \\leq 1,000$).  Each room has doors to its two neighboring rooms, and\nalso a door opening to the exterior of the barn.\n\n<p>Farmer John wants exactly $r_i$ cows to end up in room $i$\n($1 \\leq r_i \\leq 1,000,000$). To herd the cows into the barn in an orderly\nfashion, he plans to unlock $k$ exterior doors ($1 \\leq k \\leq 7$), allowing the\ncows to enter through only those doors. Each cow then walks clockwise through\nthe rooms until she reaches a suitable destination.  Farmer John wants to unlock\nthe exterior doors that will cause his cows to collectively walk a minimum total\namount of distance after entering the barn (they can initially line up however\nthey like outside the $k$ unlocked doors; this does not contribute to the total\ndistance in question).  Please determine the minimum total distance his cows\nwill need to walk, if he chooses the best $k$ such doors to unlock.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cbarn.in):</h4>\nThe first line of input contains $n$ and $k$.  Each of the remaining $n$ lines\ncontain $r_1 \\ldots r_n$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cbarn.out):</h4>\nPlease write out the minimum amount of distance the cows need to travel.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 2\n2\n5\n4\n2\n6\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">14\n</pre>\n\n<p>Farmer John can unlock doors 2 and 5.  11 cows enter at door 2 and walk a total\ndistance of 8 to get to rooms 2, 3, and 4.  10 cows enter at door 5 and walk a\ntotal distance of 6 to get to rooms 5, 6 and 1.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=626"
    },
    {
      "title": "Problem 1. 262144",
      "subtitle": "USACO 2016 US Open Contest, Platinum",
      "id": 648,
      "year": "2016",
      "division": "platinum",
      "number": "1",
      "problem": "Bessie likes downloading games to play on her cell phone, even though she  does\nfind the small touch screen rather cumbersome to use with her large hooves.  \n\n<p>She is particularly intrigued by the current game she is playing.\nThe game starts with a sequence of $N$ positive integers ($2 \\leq N\n\\leq 262,144$), each in the range $1 \\ldots 40$.  In one move, Bessie\ncan take two adjacent numbers with equal values and replace them a\nsingle number of value one greater (e.g., she might replace two\nadjacent 7s with an 8). The goal is to maximize the value of the\nlargest number present in the sequence at the end of the game.  Please\nhelp Bessie score as highly as possible!\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file 262144.in):</h4>\nThe first line of input contains $N$, and the next $N$ lines give the sequence\nof $N$ numbers at the start of the game.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file 262144.out):</h4>\nPlease output the largest integer Bessie can generate.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1\n1\n1\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In this example shown here, Bessie first merges the second and third 1s to\nobtain the sequence 1 2 2, and then she merges the 2s into a 3.  Note that it is\nnot optimal to join the first two 1s.\n\n</p><p>\n</p><p>Problem credits: Mark Chen\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=648"
    },
    {
      "title": "Problem 2. Bull in a China Shop",
      "subtitle": "USACO 2016 US Open Contest, Platinum",
      "id": 649,
      "year": "2016",
      "division": "platinum",
      "number": "2",
      "problem": "Farmer John has decided his home needs more decoration.  Visiting the local\nchina shop, he finds a delicate glass cow figurine that he decides to purchase,\nknowing that it will fit perfectly on the mantel above his fireplace.\n\n<p>The shape of the cow figurine is described by an $N \\times M$ grid of characters\nlike the one below ($3 \\leq N, M \\leq 500$), where lowercase letter characters\nare each part of the figurine (indicating different colors) and '.' characters\nare not.\n\n</p><p></p><pre>...............\n...............\nx..x...........\nxxxx...........\nxxxxaaaaaaa...\n.xx.aaaaaaaaa..\n....aaaaaaa.aa.\n....ll...ll....\n....vv...vv....\n...............\n</pre>\n\n<p>Unfortunately, right before FJ can make his purchase, a bull runs through the\nshop  and breaks not only FJ's figurine, but many of the other glass objects on\nthe shelves as well!  FJ's figurine breaks into 3 pieces, which quickly become\nlost  among $K$ total pieces lying on the ground ($4 \\leq K \\leq 100$).  Each of\nthe $K$ pieces is described by a grid of characters, just like the original\nfigurine.\n\n</p><p>Please help FJ determine how many sets of 3 pieces (out of the $K$ on the floor)\ncould be glued back together to mend his broken figurine.  \n\n</p><p>The pieces on the ground might have been flipped vertically or horizontally, or\nrotated by some multiple of 90 degrees. Therefore, given the original grid as\nwell as $K$ grids describing pieces, you want to find sets of 3 pieces that can\nbe joined together to form the original picture, allowing the pieces to be\ntranslated, flipped, or rotated multiples of 90 degrees.  When then\nsuperimposed, the 3 pieces should exactly form the original picture, with each\ncolored square in the original picture represented in exactly one of the pieces.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file bcs.in):</h4>\nThe first line contains a single integer $K$. Following that will be $K + 1$\npiece descriptions.  The first description will describe the original glass cow,\nthe following $K$ descriptions will be of the broken pieces.\n\n<p>Each description begins with a line containing two integers $R$ and $C$\n($1 \\le R, C \\le 100$).  The following $R$ lines contain $C$ lowercase alphabet\ncharacters describing the color of each cell.  Each piece will be\nhorizontally/vertically connected and have at least one non-empty cell.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file bcs.out):</h4>\nOutput the number of triples $i, j, k$ ($i &lt; j &lt; k$) such that pieces $i$, $j$,\nand $k$ can be arranged to form the original glass cow.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n5 5\naaaaa\n..a..\nbbabb\n..a..\naaaaa\n3 5\n..abb\n..a..\naaaaa\n5 2\na.\na.\naa\na.\na.\n1 2\nbb\n1 5\nbbabb\n2 5\naaaaa\n..a..\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>The three solutions use pieces $(0, 1, 2)$, $(0, 2, 4)$, $(1, 3, 4)$.\n\n</p><p>Note that this problem has a time limit of 6 seconds per test case (and twice that for Java and Python submissions).\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=649"
    },
    {
      "title": "Problem 3. Landscaping",
      "subtitle": "USACO 2016 US Open Contest, Platinum",
      "id": 650,
      "year": "2016",
      "division": "platinum",
      "number": "3",
      "problem": "Farmer John is building a nicely-landscaped garden, and needs to move a large\namount of dirt in the process.\n\n<p>The garden consists of a sequence of $N$ flowerbeds ($1 \\leq N \\leq 100,000$),\nwhere flowerbed $i$ initially contains $A_i$ units of dirt.  Farmer John would\nlike to re-landscape the garden so that each flowerbed $i$ instead contains\n$B_i$ units of dirt.  The $A_i$'s and $B_i$'s are all integers in the range\n$0 \\ldots 10$.\n\n</p><p>To landscape the garden, Farmer John has several options: he can purchase one\nunit of dirt and place it in a flowerbed of his choice for $X$ units of money. \nHe can remove one unit of dirt from a flowerbed of his choice and have it \nshipped away for $Y$ units of money.  He can also transport one unit of dirt\nfrom  flowerbed $i$ to flowerbed $j$ at a cost of $Z$ times $|i-j|$.  Please\ncompute the minimum  total cost for Farmer John to complete his landscaping\nproject.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file landscape.in):</h4>\nThe first line of input contains $N$, $X$, $Y$, and $Z$\n($0 \\leq X, Y \\le 10^8; 0 \\le Z \\leq 1000$).  Line $i+1$ contains the integers $A_i$ and $B_i$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file landscape.out):</h4>\nPlease print the minimum total cost FJ needs to spend on landscaping.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 100 200 1\n1 4\n2 3\n3 2\n4 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">210\n</pre>\n\n<p>Note that this problem has been asked in a previous USACO contest,\nat the silver level; however, the limits in the present version have\nbeen raised considerably, so one should not expect many points from\nthe solution to the previous, easier version. \n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=650"
    },
    {
      "title": "Problem 1. Lots of Triangles",
      "subtitle": "USACO 2016 December Contest, Platinum",
      "id": 672,
      "year": "2016",
      "division": "platinum",
      "number": "1",
      "problem": "Farmer John is thinking of selling some of his land to earn a bit of extra\nincome.  His property contains $n$ trees ($3 \\leq N \\leq 300$), each described\nby a point in the 2D plane, no three of which are collinear.  FJ is thinking\nabout selling triangular lots of land defined by having trees at their vertices;\nthere are of course $L = \\binom{N}{3}$ such lots he can consider, based on all\npossible triples of trees on his property.  \n\n<p>A triangular lot has value $v$ if it contains exactly $v$ trees in its interior\n(the trees on the corners do not count, and note that there are no trees on the\nboundaries since no three trees are collinear).  For every $v = 0 \\ldots N-3$,\nplease help FJ determine how many of his $L$ potential lots have value $v$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file triangles.in):</h4>\nThe first line of input contains $N$.\n\n<p>The following $N$ lines contain the $x$ and $y$ coordinates of a single tree;\nthese are both integers in the range $0 \\ldots 1,000,000$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file triangles.out):</h4>\nOutput $N-2$ lines, where output line $i$ contains a count of the number of lots\nhaving value $i-1$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n3 6\n17 15\n13 15\n6 12\n9 1\n2 7\n10 19\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">28\n6\n1\n0\n0\n</pre>\n\n<p>\n</p><p>Problem credits: Lewin Gan\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=672"
    },
    {
      "title": "Problem 2. Team Building",
      "subtitle": "USACO 2016 December Contest, Platinum",
      "id": 673,
      "year": "2016",
      "division": "platinum",
      "number": "2",
      "problem": "Every year, Farmer John brings his $N$ cows to compete for \"best in show\" at the\nstate fair.  His arch-rival, Farmer Paul, brings his $M$ cows to compete as well\n($1 \\leq N \\leq 1000, 1 \\leq M \\leq 1000$). \n\n<p>Each of the $N + M$ cows at the event receive an individual integer\nscore.  However, the final competition this year will be determined\nbased on teams of $K$ cows ($1 \\leq K \\leq 10$), as follows: Farmer\nJohn and Farmer Paul both select teams of $K$ of their respective cows\nto compete.  The cows on these two teams are then paired off: the\nhighest-scoring cow on FJ's team is paired with the highest-scoring\ncow on FP's team, the second-highest-scoring cow on FJ's team is\npaired with the second-highest-scoring cow on FP's team, and so on.\nFJ wins if in each of these pairs, his cow has the higher score.  \n\n</p><p>Please help FJ count the number of different ways he and FP can\nchoose their teams such that FJ will win the contest.  That is, each\ndistinct pair (set of $K$ cows for FJ, set of $K$ cows for FP)\nwhere FJ wins should be counted.  Print your answer modulo\n1,000,000,009.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file team.in):</h4>\nThe first line of input contains $N$, $M$, and $K$.  The value of $K$ will be no\nlarger than $N$ or $M$.\n\n<p>The next line contains the $N$ scores of FJ's cows.\n\n</p><p>The final line contains the $M$ scores of FP's cows.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file team.out):</h4>\nPrint the number of ways FJ and FP can pick teams such that FJ wins, modulo\n1,000,000,009.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 10 3\n1 2 2 6 6 7 8 9 14 17\n1 3 8 10 10 16 16 18 19 19\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">382\n</pre>\n\n\n<p>\n</p><p>Problem credits: Brian Dean and William Luo\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=673"
    },
    {
      "title": "Problem 3. Robotic Cow Herd",
      "subtitle": "USACO 2016 December Contest, Platinum",
      "id": 674,
      "year": "2016",
      "division": "platinum",
      "number": "3",
      "problem": "Bessie is hoping to fool Farmer John by building a herd of $K$ realistic robotic\ncows ($1 \\leq K \\leq 100,000$).\n\n<p>It turns out that building a robotic cow is somewhat complicated.\nThere are $N$ ($1 \\leq n \\leq 100,000$) individual locations on the\nrobot into which microcontrollers must be connected (so a single\nmicrocontroller must be connected at each location).  For each of\nthese locations, Bessie can select from a number of different models\nof microcontroller, each varying in cost.  \n\n</p><p>For the herd of robotic cows to look convincing to Farmer John, no two robots\nshould behave identically.  Therefore, no two robots should have exactly the\nsame set of microcontrollers. For any pair of robots, there should be at least\none location at which the two robots use a  different microcontroller model.  It\nis guaranteed that there will always be enough different microcontroller models\nto satisfy this constraint.\n\n</p><p>Bessie wants to make her robotic herd as cheaply as possible.  Help her\ndetermine the  minimum possible cost to do this! \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file roboherd.in):</h4>\nThe first line of input contains $N$ and $K$ separated by a space.\n\n<p>The following $N$ lines contain a description of the different microcontroller\nmodels available for each location.  The $i$th such line starts with $M_i$\n($1 \\leq M_i \\leq 10$), giving the number of models available for location $i$. \nThis is followed by $M_i$ space separated integers $P_{i,j}$ giving the costs of\nthese different models ($1 \\le P_{i,j} \\le 100,000,000$).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file roboherd.out):</h4>\nOutput a single line, giving the minimum cost to construct $K$ robots.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 10\n4 1 5 3 10\n3 2 3 3\n5 1 3 4 6 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">61\n</pre>\n\n<p>\n</p><p>Problem credits: Richard Peng and Nathan Pinsker\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=674"
    },
    {
      "title": "Problem 1. Promotion Counting",
      "subtitle": "USACO 2017 January Contest, Platinum",
      "id": 696,
      "year": "2017",
      "division": "platinum",
      "number": "1",
      "problem": "The cows have once again tried to form a startup company, failing to remember\nfrom past experience that cows make terrible managers!\n\n<p>The cows, conveniently numbered $1 \\ldots N$ ($1 \\leq N \\leq 100,000$),\norganize the company as a tree, with cow 1 as the president (the root of the\ntree).  Each cow except the president has a single manager (its \"parent\" in the\ntree).  Each cow $i$ has a distinct  proficiency rating, $p(i)$, which describes\nhow good she is at her job.  If cow $i$ is an ancestor (e.g., a manager of a\nmanager of a manager) of cow $j$, then we say $j$ is a subordinate of $i$.\n\n</p><p>Unfortunately, the cows find that it is often the case that a manager has less\nproficiency than several of her subordinates, in which case the manager should\nconsider promoting some of her subordinates.  Your task is to help the cows\nfigure out when this is happening.  For each cow $i$ in the company, please\ncount the number of subordinates $j$ where $p(j) &gt; p(i)$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file promote.in):</h4>\nThe first line of input contains $N$.\n\n<p>The next $N$ lines of input contain the proficiency ratings $p(1) \\ldots p(N)$\nfor the cows.  Each is a distinct integer in the range $1 \\ldots 1,000,000,000$.\n\n</p><p>The next $N-1$ lines describe the manager (parent) for cows $2 \\ldots N$. \nRecall that cow 1 has no manager, being the president.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file promote.out):</h4>\nPlease print $N$ lines of output.  The $i$th line of output should tell the\nnumber of subordinates of cow $i$ with higher proficiency than cow $i$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n804289384\n846930887\n681692778\n714636916\n957747794\n1\n1\n2\n3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n0\n1\n0\n0\n</pre>\n\n<p>\n</p><p>Problem credits: Karthik Nair\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=696"
    },
    {
      "title": "Problem 2. Building a Tall Barn",
      "subtitle": "USACO 2017 January Contest, Platinum",
      "id": 697,
      "year": "2017",
      "division": "platinum",
      "number": "2",
      "problem": "Farmer John is building a brand new, $N$-story barn, with the help of his  $K$\ncows ($1 \\leq N \\leq K \\leq 10^{12}$ and $N \\leq 10^5$).  To build it as quickly\nas possible, he needs your help to figure out how to allocate work among the\ncows.\n\n<p>Each cow must be assigned to work on exactly one specific floor out of the $N$\ntotal floors in the barn, and each floor must have at least one cow assigned to\nit.  The $i$th floor requires $a_i$ units of total work, and each cow completes\none unit of work per hour, so if $c$ cows work on floor $i$, it will be\ncompleted in $a_i / c$ units of time. For safety reasons, floor $i$ must be\ncompleted before construction can begin on floor $i+1$.  \n\n</p><p>Please compute the minimum total time in which the barn can be completed, if the\ncows are allocated to work on floors in an optimal fashion.  Output this number\nrounded to the nearest integer; it is guaranteed that the solution will be more\nthan 0.1 from the boundary between two integers.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file tallbarn.in):</h4>\nThe first line of input contains $N$ and $K$.\n\n<p>The next $N$ lines contain $a_1 \\ldots a_N$, each a positive integer of size at\nmost $10^{12}$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file tallbarn.out):</h4>\nPlease output the minimum time required to build the barn, rounded to the\nnearest integer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 5\n10\n4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>\n</p><p>Problem credits: Yang Liu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=697"
    },
    {
      "title": "Problem 3. Subsequence Reversal",
      "subtitle": "USACO 2017 January Contest, Platinum",
      "id": 698,
      "year": "2017",
      "division": "platinum",
      "number": "3",
      "problem": "Farmer John is arranging his $N$ cows in a line to take a photo\n($1 \\leq N \\leq 50$).  The height of the $i$th cow in sequence is $a(i)$, and\nFarmer John thinks it would make for an aesthetically pleasing photo if the cow\nlineup has a large increasing subsequence of cows by height.\n\n<p>To recall, a subsequence is a subset $a(i_1), a(i_2), \\ldots, a(i_k)$ of\nelements from the cow sequence, found at some series of indices\n$i_1 &lt; i_2 &lt; \\ldots &lt; i_k$.  We say the subsequence is increasing if\n$a(i_1) \\leq a(i_2) \\leq \\ldots \\leq a(i_k)$.  \n\n</p><p>FJ would like there to be a long increasing subsequence within his ordering of\nthe cows.   In order to ensure this, he allows himself initially to choose any\nsubsequence and reverse its elements.\n\n</p><p>For example, if we had the list\n</p><pre>1 6 2 3 4 3 5 3 4\n</pre>\n\n<p>We can reverse the chosen elements\n</p><pre>1 6 2 3 4 3 5 3 4\n  ^         ^ ^ ^\n</pre>\n\n<p>to get\n</p><pre>1 4 2 3 4 3 3 5 6\n  ^         ^ ^ ^\n</pre>\n\n<p>Observe how the subsequence being reversed ends up using the same indices as it\ninitially occupied, leaving the other elements unchanged.  \n\n</p><p>Please find the maximum possible length of an increasing subsequence, given that\nyou can choose to reverse an arbitrary subsequence once.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file subrev.in):</h4>\nThe first line of input contains $N$. The remaining $N$ lines contain\n$a(1) \\ldots a(N)$, each an integer in the range $1 \\ldots 50$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file subrev.out):</h4>\nOutput the number of elements that can possibly form a longest increasing\nsubsequence after reversing the contents of at most one subsequence.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">9\n1\n2\n3\n9\n5\n6\n8\n7\n4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>\n</p><p>Problem credits: Lewin Gan\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=698"
    },
    {
      "title": "Problem 1. Why Did the Cow Cross the Road",
      "subtitle": "USACO 2017 February Contest, Platinum",
      "id": 720,
      "year": "2017",
      "division": "platinum",
      "number": "1",
      "problem": "Why did the cow cross the road?  We may never know the full reason, but it is\ncertain that Farmer John's cows do end up crossing the road quite frequently. \nIn fact, they end up crossing the road so often that they often bump into\neach-other when their paths cross, a situation Farmer John would like to remedy.\n\n<p>Farmer John raises $N$ breeds of cows ($1 \\leq N \\leq 100,000$), and each of his\nfields is dedicated to grazing for one specific breed; for example, a field\ndedicated to breed 12 can only be used for cows of breed 12 and not of any other\nbreed. A long road runs through his farm.  There is a sequence of $N$ fields on\none side of the road (one for each breed), and a sequence of $N$ fields on the\nother side of the road (also one for each breed). When a cow crosses the road,\nshe therefore crosses between the two fields designated for her specific breed.\n\n</p><p>Had Farmer John planned more carefully, he would have ordered the fields by\nbreed the same way on both sides of the road, so the two fields for each breed\nwould be directly across the road from each-other.  This would have  allowed\ncows to cross the road without any cows from different breeds bumping into\none-another.  Alas, the orderings on both sides of the road might be different,\nso Farmer John observes that there might be pairs of breeds that cross.  A pair\nof different breeds $(a,b)$ is \"crossing\" if any path across the  road for breed\n$a$ must intersect any path across the road for breed $b$.  \n\n</p><p>Farmer John would like to minimize the number of crossing pairs of breeds.  For\nlogistical reasons, he figures he can move cows around on one side of the road\nso the fields on that side undergo a \"cyclic shift\". That is, for some\n$0 \\leq k &lt; N$, every cow re-locates to the field $k$ fields ahead of it, with\nthe cows in the last $k$ fields moving so they now populate the first $k$\nfields.  For example, if the fields on one side of the road start out ordered by\nbreed as 3, 7, 1, 2, 5, 4, 6 and undergo a cyclic shift by $k=2$, the new order\nwill be 4, 6, 3, 7, 1, 2, 5.  Please determine the minimum possible number of\ncrossing pairs of breeds that can exist after an appropriate cyclic shift of the\nfields on one side of the road.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file mincross.in):</h4>\nThe first line of input contains $N$.  The next $N$ lines describe the order, by\nbreed ID, of fields on one side of the road; each breed ID is an integer in the\nrange $1 \\ldots N$.  The last $N$ lines describe the order, by  breed ID, of the\nfields on the other side of the road.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file mincross.out):</h4>\nPlease output the minimum number of crossing pairs of breeds after a cyclic\nshift of the fields on one side of the road (either side can be shifted).\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n5\n4\n1\n3\n2\n1\n3\n2\n5\n4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=720"
    },
    {
      "title": "Problem 2. Why Did the Cow Cross the Road II",
      "subtitle": "USACO 2017 February Contest, Platinum",
      "id": 721,
      "year": "2017",
      "division": "platinum",
      "number": "2",
      "problem": "Farmer John is continuing to ponder the issue of cows crossing the road through\nhis farm, introduced in the  preceding problem.  He realizes that interaction\nbetween some pairs of breeds is actually acceptable if the breeds are friendly,\na property that turns out to be easily characterized in terms of breed ID:\nbreeds $a$ and $b$ are friendly if $|a - b| \\leq 4$, and unfriendly otherwise. \nIt is ok for cows to wander into fields designated for other breeds, as long as\nthey are friendly.\n\n<p>Given the ordering of $N$ fields on both sides of the road through FJ's farm\n(again, with exactly one field for each breed on each side), please help FJ\ndetermine the maximum number of crosswalks he can draw over his road, such that\nno two intersect, and such that each crosswalk joins a pair of fields \ncontaining two breeds that are friendly.  Each field can be accessible\nvia at most one crosswalk (so crosswalks don't meet at their endpoints).\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file nocross.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100,000$).  The next $N$\nlines describe the order, by breed ID, of fields on one side of the road; each\nbreed ID is an integer in the range $1 \\ldots N$.  The last $N$ lines describe\nthe order, by  breed ID, of the fields on the other side of the road.  Each\nbreed ID appears exactly once in each ordering.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file nocross.out):</h4>\nPlease output the maximum number of disjoint \"friendly crosswalks\" Farmer John\ncan draw across the road.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n1\n2\n3\n4\n5\n6\n6\n5\n4\n3\n2\n1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=721"
    },
    {
      "title": "Problem 3. Why Did the Cow Cross the Road III",
      "subtitle": "USACO 2017 February Contest, Platinum",
      "id": 722,
      "year": "2017",
      "division": "platinum",
      "number": "3",
      "problem": "Farmer John is continuing to ponder the issue of cows crossing the road through\nhis farm, introduced in the preceding two problems.  He realizes now that the\nthreshold for friendliness is a bit more subtle than he previously considered --\nbreeds $a$ and $b$ are now friendly if $|a - b| \\leq K$, and unfriendly\notherwise.\n\n<p>Given the orderings of fields on either side of the road through FJ's farm,\nplease count the number of unfriendly crossing pairs of breeds, where a crossing\npair of breeds is defined as in the preceding problems.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file friendcross.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100,000$) and $K$\n($0 \\leq K &lt; N$).  The next $N$ lines describe the order, by breed ID, of fields\non one side of the road; each breed ID is an integer in the range $1 \\ldots N$. \nThe last $N$ lines describe the order, by  breed ID, of the fields on the other\nside of the road.  Each breed ID appears exactly once in each ordering.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file friendcross.out):</h4>\nPlease output the number of unfriendly crossing pairs of breeds.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 1\n4\n3\n2\n1\n1\n4\n2\n3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>In this example, breeds 1 and 4 are unfriendly and crossing, as are breeds 1 and 3.\n\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=722"
    },
    {
      "title": "Problem 1. Modern Art",
      "subtitle": "USACO 2017 US Open Contest, Platinum",
      "id": 744,
      "year": "2017",
      "division": "platinum",
      "number": "1",
      "problem": "Art critics worldwide have only recently begun to recognize the creative genius\nbehind the  great bovine painter, Picowso.\n\n<p>Picowso paints in a very particular way.  She starts with an $N \\times N$ blank\ncanvas, represented by an $N \\times N$ grid of zeros, where a zero indicates an\nempty cell of the canvas.  She then draws $N^2$ rectangles on the canvas, one in\neach of $N^2$ colors (conveniently numbered $1 \\ldots N^2$).  For example, she\nmight start by painting a rectangle in color 2, giving this intermediate canvas:\n\n</p><p></p><pre>2 2 2 0 \n2 2 2 0 \n2 2 2 0 \n0 0 0 0\n</pre>\n\n<p>She might then paint a rectangle in color 7:\n\n</p><p></p><pre>2 2 2 0 \n2 7 7 7 \n2 7 7 7 \n0 0 0 0\n</pre>\n\n<p>And then she might paint a small rectangle in color 3:\n\n</p><p></p><pre>2 2 3 0 \n2 7 3 7 \n2 7 7 7 \n0 0 0 0\n</pre>\n\n<p>Each rectangle has sides parallel to the edges of the canvas, and a rectangle\ncould be as large as the entire canvas or as small as a single cell.  Each color\nfrom $1 \\ldots N^2$ is used exactly once, although later colors might completely\ncover up some of the earlier colors.\n\n</p><p>Given the final state of the canvas, please count how many of the $N^2$ colors \ncould have possibly been the first to be painted.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file art.in):</h4>\nThe first line of input contains $N$, the size of the canvas\n($1 \\leq N \\leq 1000$).  The next $N$ lines describe the final picture of the\ncanvas, each containing $N$ integers that are in the range $0 \\ldots N^2$.  The\ninput is guaranteed to have been drawn as described above, by painting\nsuccessive rectangles in different colors.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file art.out):</h4>\nPlease output a count of the number of colors that could have been drawn first.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n2 2 3 0\n2 7 3 7\n2 7 7 7\n0 0 0 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">14\n</pre>\n\n<p>In this example, color 2 could have been the first to be painted.  Color 3\nclearly had to have been painted after color 7, and color 7 clearly had to have\nbeen painted after color 2.  Since we don't see the other colors, we deduce that\nthey also could have been painted first.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=744"
    },
    {
      "title": "Problem 2. Switch Grass",
      "subtitle": "USACO 2017 US Open Contest, Platinum",
      "id": 745,
      "year": "2017",
      "division": "platinum",
      "number": "2",
      "problem": "Farmer John has recently been experimenting with cultivating different types of\ngrass on his farm, realizing that different types of cows like different types\nof grass.  However, he must be careful to ensure that different types of grass\nare planted sufficiently far away from each-other, in order to prevent them from\nbeing inextricably mixed.\n\n<p>FJ's farm consists of $N$ fields ($1 \\leq N \\leq 200,000$), where $M$ pairs of \nfields are connected by bi-directional pathways ($1 \\leq M \\leq 200,000$). \nUsing these pathways, it is possible to walk from any field to any other field. \nEach pathway has an integer length in the range $1 \\ldots 1,000,000$.  Any pair\nof fields will be linked by at most one direct pathway.\n\n</p><p>In each field, FJ initially plants one of $K$ types of grass\n($1 \\leq K \\leq N$). Over time, however, he might decide to switch the grass in\nsome field to a different type.  He calls this an \"update\" operation.  He might\nperform several updates over the course of time, which are all cumulative in\nnature.\n\n</p><p>After each update, FJ would like to know the length of the shortest path between\ntwo fields having different grass types.  That is, among all pairs of fields\nhaving different grass types, he wants to know which two are closest.  Ideally,\nthis number is large, so he can prevent grass of one type from mixing with grass\nof another type.  It is guaranteed that the farm will always have at least two\nfields with different grass types.\n\n</p><p>In 30 percent of the input cases, each field will be directly connected to at most\n10 pathways.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file grass.in):</h4>\nThe first line of input contains four integers, $N$, $M$, $K$, and $Q$, where\n$Q$ is the number of updates ($1 \\leq Q \\leq 200,000$). The next $M$ lines\ndescribe the paths; each one contains three integers $A$, $B$, and $L$,\nindicating a path from field $A$ to field $B$ (both integers in the range\n$1 \\ldots N$) of length $L$.  The next line indicates the initial type of\ngrass growing in each field ($N$ integers in the range $1 \\ldots K$).  Finally, the\nlast $Q$ lines each describe an update, specified by two integers $A$ and $B$,\nwhere the grass in field $A$ is to be updated to type $B$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file grass.out):</h4>\nFor each update, print the length of the shortest path between two fields with\ndifferent types of grass, after the update is applied.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2 3 4\n1 2 3\n2 3 1\n1 1 2\n3 3\n2 3\n1 2\n2 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n3\n3\n1\n</pre>\n\n<p>\n</p><p>Problem credits: Lewin Gan\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=745"
    },
    {
      "title": "Problem 3. COWBASIC",
      "subtitle": "USACO 2017 US Open Contest, Platinum",
      "id": 746,
      "year": "2017",
      "division": "platinum",
      "number": "3",
      "problem": "Bessie has invented a new programming language, but since there is no compiler\nyet, she needs your help to actually run her programs. \n\n<p>COWBASIC is a simple, elegant language. It has two key features: addition and\nMOO loops. Bessie has devised a clever solution to overflow: all addition is\ndone modulo $10^9+7$. But Bessie's real achievement is the MOO loop, which runs\na block of code a fixed number of times. MOO loops and addition can, of course,\nbe nested.\n\n</p><p>Given a COWBASIC program, please help Bessie determine what number it returns.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowbasic.in):</h4>\nYou are given a COWBASIC program at most 100 lines long, with each line being at\nmost 350 characters long. A COWBASIC program is a list of statements.\n\n<p>There are three types of statements:\n</p><pre>&lt;variable&gt; = &lt;expression&gt;\n\n&lt;literal&gt; MOO {\n  &lt;list of statements&gt;\n}\n\nRETURN &lt;variable&gt;\n</pre>\n\n<p>There are three types of expressions:\n</p><pre>&lt;literal&gt;\n\n&lt;variable&gt;\n\n( &lt;expression&gt; ) + ( &lt;expression&gt; )\n</pre>\n\n<p>A literal is a positive integer at most 100,000.\n\n</p><p>A variable is a string of at most 10 lowercase English letters.\n\n</p><p>It is guaranteed that no variable will be used or RETURNed before it is defined.\nIt is guaranteed that RETURN will happen exactly once, on the last line of the\nprogram.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowbasic.out):</h4>\nOutput a single positive integer, giving the value of the RETURNed variable.\n</div>\n\n<p></p><div class=\"prob-section\"><h4>Scoring</h4>\n<ul><li>\nIn 20 percent of all test cases - MOO loops are not nested.\n</li><li>\nIn another 20 percent of all test cases - The program only has 1 variable. MOO\nloops can be nested.\n</li><li>\nIn the remaining test cases, there are no further restrictions.\n</li></ul>\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">x = 1\n10 MOO {\n  x = ( x ) + ( x )\n}\nRETURN x\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1024\n</pre>\nThis COWBASIC program computes $2^{10}$.\n<h4>SAMPLE INPUT:</h4><pre class=\"in\">n = 1\nnsq = 1\n100000 MOO {\n  100000 MOO {\n    nsq = ( nsq ) + ( ( n ) + ( ( n ) + ( 1 ) ) )\n    n = ( n ) + ( 1 )\n  }\n}\nRETURN nsq\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4761\n</pre>\nThis COWBASIC program computes $(10^5*10^5+1)^2$ (modulo $10^9 + 7$).\n\n<p>Problem credits: Jonathan Paulson\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=746"
    },
    {
      "title": "Problem 1. Standing Out from the Herd",
      "subtitle": "USACO 2017 December Contest, Platinum",
      "id": 768,
      "year": "2017",
      "division": "platinum",
      "number": "1",
      "problem": "Just like humans, cows often appreciate feeling they are unique in some way.\nSince Farmer John's cows all come from the same breed and look quite similar,\nthey want to measure uniqueness in their names.  \n\n<p>Each cow's name has some number of substrings. For example, \"amy\" has substrings\n{a, m, y, am, my, amy}, and \"tommy\" would have the following substrings: {t, o,\nm, y, to, om, mm, my, tom, omm, mmy, tomm, ommy, tommy}.\n\n</p><p>A cow name has a \"uniqueness factor\" which is the number of substrings of that\nname not shared with any other cow.  For example,   If amy was in a herd by\nherself, her uniqueness factor would be 6. If tommy was in a herd by himself,\nhis uniqueness factor would be 14. If they were in a herd together, however,\namy's uniqueness factor would be 3 and tommy's would be 11.\n\n</p><p>Given a herd of cows, please determine each cow's uniqueness factor.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file standingout.in):</h4>\nThe first line of input will contain $N$ ($1 \\le N \\le 10^5$). The following $N$\nlines will each contain the name of a cow in the herd. Each name will contain\nonly lowercase characters a-z. The total length of all names will not exceed\n$10^5$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file standingout.out):</h4>\nOutput $N$ numbers, one per line, describing the uniqueness factor of each\ncow.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\namy\ntommy\nbessie\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n11\n19\n</pre>\n\n<p>\n</p><p>Problem credits: Matt Fontaine\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=768"
    },
    {
      "title": "Problem 2. Push a Box",
      "subtitle": "USACO 2017 December Contest, Platinum",
      "id": 769,
      "year": "2017",
      "division": "platinum",
      "number": "2",
      "problem": "Bessie and her friends have invented a new game. The game is named accurately,\nbut not particularly creatively. They call it the \"Push A Box Around The Barn To\nGet It In The Right Spot And Don't Move The Hay\" game (if you think that's\nexcessive, you should see some of the variable names the cows use when they\nwrite code...)\n\n<p>The barn can be modeled as an $N \\times M$ rectangular grid. Some of the grid\ncells have hay in them. Bessie occupies one cell in this grid, and a large\nwooden box occupies another cell.  Bessie and the box are not able to fit in the\nsame  cell at the same time, and neither can fit into a cell containing hay.\n\n</p><p>Bessie can move in the 4 orthogonal directions (north, east, south, west) as\nlong as she does not walk into hay. If she attempts to walk to the space with\nthe box, then the box will be pushed one space in that direction, as long as\nthere is an empty cell on the other side. If there is no empty cell, then Bessie\nwill not be able to make that move.\n\n</p><p>A certain grid cell is designated as the goal. Bessie's goal is to get the box\ninto that location.  \n\n</p><p>Given the layout of the barn, including the starting positions of the box and\nthe cow, and the target position of the box, determine if it possible to win the\ngame.\n\n</p><p>Note: This problem allows 512MB of memory usage, up from the default limit of 256MB.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file pushabox.in):</h4>\n\n<p>The first line has three numbers, $N$, $M$, and $Q$, where $N$ is the number of\nrows in the grid and $M$ is the number of columns.\n\n</p><p></p><ul><li>\n$1 \\le N,M \\le 1500$.\n</li><li>\n$1 \\le Q \\le 50,000$.\n</li></ul>\n\n<p>On the next $N$ lines is a representation of the grid, where characters\nrepresent empty cells (.), hay (#), Bessie's starting position (A), and the\nbox's initial location (B).\n\n</p><p>This is followed by $Q$ lines, each with a pair of integers $(R, C)$. For each\npair, you should determine if it is possible to get the box to that cell at row\n$R$, column $C$, starting from the initial state of the barn. The top row is row\n1, and the left column is column 1.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file pushabox.out):</h4>\n$Q$ lines, each with either the string \"YES\" or \"NO\".\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 5 4\n##.##\n##.##\nA.B..\n##.##\n##.##\n3 2\n3 5\n1 3\n5 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">NO\nYES\nNO\nNO\n</pre>\n\n<p>To push the box to the position (3, 5), the cow just needs to move 3 spaces to\nthe right.\n\n</p><p>None of the other three positions are attainable.\n\n</p><p>\n</p><p>Problem credits: Nathan Pinsker\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=769"
    },
    {
      "title": "Problem 3. Greedy Gift Takers",
      "subtitle": "USACO 2017 December Contest, Platinum",
      "id": 770,
      "year": "2017",
      "division": "platinum",
      "number": "3",
      "problem": "Farmer John's nemesis, Farmer Nhoj, has $N$ cows ($1 \\leq N \\leq 10^5$),\nconveniently numbered $1 \\dots N$. They have unexpectedly turned up at Farmer\nJohn's farm, so the unfailingly polite Farmer John is attempting to give them\ngifts.\n\n<p>To this end, Farmer John has brought out his infinite supply of gifts, and\nNhoj's cows have queued up in front of him, with cow $1$ at the head of the\nqueue and cow $N$ at the tail. Farmer John was expecting that at every timestep,\nthe cow at the head of the queue would take a gift from Farmer John and go to\nthe tail of the queue.  However, he has just realized that Nhoj's cows are not\nthat polite!  After receiving her gift, each cow may not go to the tail of the\nqueue, but rather may cut some number of cows at the tail, and insert herself in\nfront of them. Specifically, cow $i$ will always cut exactly $c_i$ cows\n($0 \\leq c_i \\leq N-1$).\n\n</p><p>Farmer John knows that some cows might receive multiple gifts; as he has an\ninfinite supply, this does not worry him. But he is worried that some cows might\nbecome unhappy if they do not get any gifts.\n\n</p><p>Help Farmer John find the number of cows who never receive any gifts, no matter\nhow many gifts are handed out.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file greedy.in):</h4>\nThe first line contains a single integer, $N$.\n\n<p>The second line contains $N$ space-separated integers $c_1, c_2, \\dots, c_N$.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file greedy.out):</h4>\nPlease output the number of cows who cannot receive any gifts.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 2 0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=770"
    },
    {
      "title": "Problem 1. Lifeguards",
      "subtitle": "USACO 2018 January Contest, Platinum",
      "id": 792,
      "year": "2018",
      "division": "platinum",
      "number": "1",
      "problem": "Farmer John has opened a swimming pool for his cows, figuring it will help them\nrelax and produce more milk.  \n\n<p>To ensure safety, he hires $N$ cows as lifeguards, each of which has a shift\nthat covers some contiguous interval of time during the day.  For simplicity,\nthe pool is open from time $0$ until time $10^9$ on a daily basis, so each shift\ncan be described by two integers, giving the time at which a cow starts and ends\nher shift.  For example, a lifeguard starting at time $t = 4$ and ending at \ntime $t = 7$ covers three units of time (note that the endpoints are \"points\" in\ntime).\n\n</p><p>Unfortunately, Farmer John hired $K$ more lifeguards than he has the funds to\nsupport.  Given that he must fire exactly $K$ lifeguards, what is the maximum\namount of time that can still be covered by the shifts of the remaining\nlifeguards?  An interval of time is covered if at least one lifeguard is\npresent.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file lifeguards.in):</h4>\nThe first line of input contains $N$ and $K$\n($K \\leq N \\leq 100,000, 1 \\leq K \\leq 100$). Each of the next $N$ lines\ndescribes a lifeguard in terms of two integers in the  range $0 \\ldots 10^9$,\ngiving the starting and ending point of a lifeguard's shift. All such endpoints\nare distinct.  Shifts of different lifeguards might overlap.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file lifeguards.out):</h4>\nPlease write a single number, giving the maximum amount of time that can still\nbe covered if Farmer John fires $K$ lifeguards.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\n1 8\n7 15\n2 14\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12\n</pre>\n\n<p>In this example, FJ should fire the lifeguards covering $1 \\ldots 8$ and\n$7 \\ldots 15$.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=792"
    },
    {
      "title": "Problem 2. Cow at Large",
      "subtitle": "USACO 2018 January Contest, Platinum",
      "id": 793,
      "year": "2018",
      "division": "platinum",
      "number": "2",
      "problem": "Cornered at last, Bessie has gone to ground in a remote farm. The farm consists\nof $N$ barns ($2 \\leq N \\leq 7 \\cdot 10^4$) and $N-1$ bidirectional tunnels\nbetween barns, so that there is a unique path between every pair of barns. Every\nbarn which has only one tunnel is an exit. When morning comes, Bessie will\nsurface at some barn and attempt to reach an exit.\n\n<p>But the moment Bessie surfaces at some barn, the law will be able to pinpoint\nher location. Some farmers will then start at various exit barns, and attempt to\ncatch Bessie. The farmers move at the same speed as Bessie (so in each time\nstep, each farmer can move from one barn to an adjacent barn). The farmers know\nwhere Bessie is at all times, and Bessie knows where the farmers are at all\ntimes. The farmers catch Bessie if at any instant a farmer is in the same barn\nas Bessie, or crossing the same tunnel as Bessie. Conversely, Bessie escapes if\nshe reaches an exit barn strictly before any farmers catch her.\n\n</p><p>Bessie is unsure at which barn she should surface. For each of the $N$ barns,\nhelp Bessie determine the minimum number of farmers who would be needed to catch\nBessie if she surfaced there, assuming that the farmers distribute themselves\noptimally among the exit barns.\n\n</p><p>Note that the time limit for this problem is slightly larger than the default: 4 seconds for\nC/C++/Pascal, and 8 seconds for Java/Python.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file atlarge.in):</h4>\nThe first line of the input contains $N$.  Each of the following $N-1$ lines\nspecify two integers, each in the range $1 \\ldots N$, describing a tunnel\nbetween two barns.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file atlarge.out):</h4>\nPlease output $N$ lines, where the $i$th line of output tells the minimum number\nof farmers necessary to catch Bessie if she surfaced at the $i$th barn.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n1 2\n1 3\n3 4\n3 5\n4 6\n5 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n1\n3\n3\n3\n1\n1\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=793"
    },
    {
      "title": "Problem 3. Sprinklers",
      "subtitle": "USACO 2018 January Contest, Platinum",
      "id": 794,
      "year": "2018",
      "division": "platinum",
      "number": "3",
      "problem": "Farmer John has a large field, and he is thinking of planting sweet corn in some\npart of it. After surveying his field, FJ found that it forms an\n$(N-1) \\times (N-1)$ square. The southwest corner is at coordinates $(0,0)$, and\nthe northeast corner is at $(N-1,N-1)$.\n\n<p>At some integer coordinates there are double-headed sprinklers, each one\nsprinkling both water and fertilizer. A double-heading sprinkler at coordinates\n$(i,j)$  sprinkles water on the part of the field north and east of it, and\nsprinkles fertilizer on the part of the field south and west of it. Formally, it\nwaters all real coordinates $(x,y)$ for which $N \\geq x \\geq i$ and\n$N \\geq y \\geq j$, and it fertilizes all real coordinates $(x,y)$ for which\n$0 \\leq x \\leq i$ and $0 \\leq y \\leq j$.\n\n</p><p>Farmer John wants to plant sweet corn in some axis-aligned rectangle in his\nfield with integer-valued corner coordinates. However, for the sweet corn to\ngrow, all points in the rectangle must be both watered and fertilized by the\ndouble-headed sprinklers. And of course the rectangle must have positive area,\nor Farmer John wouldn't be able to grow any corn in it!\n\n</p><p>Help Farmer John determine the number of rectangles of positive area in which he\ncould grow sweet corn. Since this number may be large, output the remainder of\nthis number modulo\n$10^9 + 7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file sprinklers.in):</h4>\nThe first line of the input consists of a single integer $N$, the size of the\nfield ($1 \\leq N \\leq 10^5$).\n\n<p>The next $N$ lines each contain two space-separated integers. If these integers\nare $i$ and $j$, where $0 \\leq i,j \\leq N-1$, they denote a sprinkler located at\n$(i,j)$.\n\n</p><p>It is guaranteed that there is exactly one sprinkler in each column and exactly\none sprinkler in each row. That is, no two sprinklers have the same\n$x$-coordinate, and no two sprinklers have the same $y$-coordinate.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file sprinklers.out):</h4>\nThe output should consist of a single integer: the number of rectangles of\npositive area which are fully watered and fully fertilized, modulo $10^9 + 7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n0 4\n1 1\n2 2\n3 0\n4 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">21\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=794"
    },
    {
      "title": "Problem 1. Slingshot",
      "subtitle": "USACO 2018 February Contest, Platinum",
      "id": 816,
      "year": "2018",
      "division": "platinum",
      "number": "1",
      "problem": "One of the farming chores Farmer John dislikes the most is hauling around lots\nof cow manure.  In order to streamline this process, he comes up with an\nintriguing idea: instead of hauling manure between two points in a cart behind\nhis tractor, why not shoot it through the air with a giant manure slingshot? \n(indeed, what could possibly go wrong...)\n\n<p>Farmer John's farm is built along a single long straight road, so any location\non his farm can be described simply using its position along this road\n(effectively a point on the number line).  FJ builds $N$ slingshots\n($1 \\leq N \\leq 10^5$), where the $i$th slingshot is described by three integers\n$x_i$, $y_i$, and $t_i$, specifying that this slingshot can shoot manure from\nposition $x_i$ to position $y_i$ in only $t_i$ total units of time.  \n\n</p><p>FJ has $M$ piles of manure to transport ($1 \\leq M \\leq 10^5$).  The $j$th such\npile needs to be moved from position $a_j$ to position $b_j$.  Hauling manure\nwith the tractor for a distance of $d$ takes $d$ units of time.  FJ is hoping to\nreduce this by allowing up to one use of any slingshot for transporting each\npile of manure.  Time FJ spends moving his tractor without manure in it does\nnot count.\n\n</p><p>For each of the $M$ manure piles, please help FJ determine the minimum possible\ntransportation time, given that FJ can use up to one slingshot during the\nprocess.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file slingshot.in):</h4>\nThe first line of input contains $N$ and $M$.  The next $N$ lines each describe\na single slingshot in terms of integers $x_i$, $y_i$, and $t_i$\n($0 \\leq x_i, y_i, t_i \\leq 10^9$). The final $M$ lines describe piles of manure\nthat need to be moved, in terms of integers $a_j$ and $b_j$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file slingshot.out):</h4>\nPrint $M$ lines of output, one for each manure pile, indicating the minimum time\nneeded to transport it.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 3\n0 10 1\n13 8 2\n1 12\n5 2\n20 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n3\n10\n</pre>\n\n<p>Here, the first pile of manure needs to move from position 1 to position 12. \nWithout using an slingshot, this would take 11 units of time.  However, using\nthe first slingshot, it takes 1 unit of time to move to position 0 (the\nslingshot source), 1 unit of time to fling the manure through the air to land at\nposition 10 (the slingshot destination), and then 2 units of time to move the\nmanure to position 12.  The second pile of manure is best moved without any\nslingshot, and the third pile of manure should be moved using the second\nslingshot.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=816"
    },
    {
      "title": "Problem 2. New Barns",
      "subtitle": "USACO 2018 February Contest, Platinum",
      "id": 817,
      "year": "2018",
      "division": "platinum",
      "number": "2",
      "problem": "Farmer John notices that his cows tend to get into arguments if they are packed\ntoo closely together, so he wants to open a series of new barns to help spread\nthem out.\n\n<p>Whenever FJ constructs a new barn, he connects it with at most one bidirectional\npathway to  an existing barn.  In order to make sure his cows are spread\nsufficiently far apart, he sometimes wants to determine the distance from a\ncertain barn to the farthest possible barn reachable from it (the distance\nbetween two barns is the number of paths one must traverse to go from one barn\nto the other).\n\n</p><p>FJ will give a total of $Q$ ($1 \\leq Q \\leq 10^5$) queries, each either of the\nform \"build\" or \"distance\". For a build query, FJ builds a barn and links it\nwith at most one previously built barn. For a distance query, FJ asks you the\ndistance from a certain barn to the farthest barn reachable from it via a series\nof pathways.  It is guaranteed that the queried barn has already been built.\nPlease help FJ answer all of these queries.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file newbarn.in):</h4>\nThe first line contains the integer $Q$. Each of the next $Q$ lines contains a\nquery. Each query is of the form \"B p\" or \"Q k\", respectively telling you to\nbuild a barn and connect it with barn $p$, or give the farthest distance, as\ndefined, from barn $k$. If $p = -1$, then the new barn will be connected to no\nother barn. Otherwise, $p$ is the index of a barn that has already been built.\nThe barn indices start from $1$, so the first barn built is barn $1$, the second\nis barn $2$, and so on.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file newbarn.out):</h4>\nPlease write one line of output for each distance query.  Note that a barn\nwhich is connected to no other barns has farthest distance $0$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\nB -1\nQ 1\nB 1\nB 2\nQ 3\nB 2\nQ 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n2\n1\n</pre>\n\n<p>The example input corresponds to this network of barns:\n\n</p><p></p><pre>  (1) \n    \\   \n     (2)---(4)\n    /\n  (3)\n</pre>\n\n<p>In query 1, we build barn number 1. In query 2, we ask for the distance of 1 to\nthe farthest connected barn. Since barn 1 is connected to no other barns, the\nanswer is 0. In query 3, we build barn number 2 and connect it to barn 1. In\nquery 4, we build barn number 3 and connect it to barn 2. In query 5, we ask for\nthe distance of 3 to the farthest connected barn. In this case, the farthest is\nbarn 1, which is 2 units away. In query 6, we build barn number 4 and connect it\nto barn 2. In query 7, we ask for the distance of 2 to the farthest connected\nbarn. All three barns 1, 3, 4 are the same distance away, which is 1, so this is\nour answer. \n\n</p><p>\n</p><p>Problem credits: Anson Hu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=817"
    },
    {
      "title": "Problem 3. Cow Gymnasts",
      "subtitle": "USACO 2018 February Contest, Platinum",
      "id": 818,
      "year": "2018",
      "division": "platinum",
      "number": "3",
      "problem": "Bored of farm life, the cows have sold all their earthly possessions and joined\nthe crew of a traveling circus. So far, the cows had been given easy acts:\njuggling torches, walking tightropes, riding unicycles -- nothing a handy-hoofed\ncow couldn't handle.  However, the ringmaster wants to create a much more\ndramatic  act for their next show.\n\n<p>The stage layout for the new act involves $N$ platforms arranged in a circle. \nOn each platform, between $1$ and $N$ cows must form a stack, cow upon cow upon\ncow. When the ringmaster gives the signal, all stacks must simultaneously fall\nclockwise, so that the bottom cow in a stack doesn't move, the cow above her\nmoves one platform clockwise, the next cow moves two platforms clockwise, and so\nforth.  Being accomplished gymnasts, the cows know they will have no trouble\nwith the technical aspect of this act. The various stacks of cows will not\n\"interfere\" with each other as they fall, so every cow will land on the intended\nplatform. All of the cows landing on a platform form a new stack, which does not\nfall over.\n\n</p><p>The ringmaster thinks the act will be particularly dramatic if after the stacks\nfall, the new stack on each platform contains the same number of cows as the\noriginal stack on that platform.  We call a configuration of stack sizes\n\"magical\" if it satisfies this condition.  Please help the cows by computing the\nnumber of magical configurations. Since this number may be very large, compute\nits remainder modulo $10^9 + 7$.\n\n</p><p>Two configurations are considered distinct if there is any platform for which\nthe configurations assign a different number of cows. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file gymnasts.in):</h4>\nThe input is a single integer, $N$ ($1 \\leq N \\leq 10^{12}$).\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file gymnasts.out):</h4>\nA single integer giving the number of magical configurations modulo $10^9 + 7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\nFor $N = 4$, the valid configurations are $(1,1,1,1)$, $(2,2,2,2)$, $(3,3,3,3)$,\n$(4,4,4,4)$, $(2,3,2,3)$, and $(3,2,3,2)$.\n\n<p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=818"
    },
    {
      "title": "Problem 1. Out of Sorts",
      "subtitle": "USACO 2018 US Open Contest, Platinum",
      "id": 840,
      "year": "2018",
      "division": "platinum",
      "number": "1",
      "problem": "Keeping an eye on long term career possibilities beyond the farm, Bessie the cow\nhas started learning algorithms from various on-line coding websites.  Her\nfavorite two algorithms are \"bubble sort\" and \"quicksort\", but Bessie\nunfortunately gets the  two easily confused and ends up implementing a somewhat\nodd hybrid of them both!\n\n<p>Let us call a position between elements $i$ and $i+1$ in an array $A$ a \n\"partition point\" if the maximum of $A[...i]$ is no larger than the  minimum in\n$A[i+1 \\ldots]$.  Bessie remembers that quicksort involves rearranging an array\nso it has a partition point and then recursively sorting the two sides $A[...i]$\nand $A[i+1 \\ldots]$.  However, even though she notes, correctly, that all\npartition points in an array can be  determined in linear time, she has\nforgotten how quicksort was supposed to rearrange the array to quickly create a\npartition point!   In what may prove to be the worst algorithmic blunder in the\nhistory of sorting algorithms, she makes the unfortunate decision to use bubble\nsort for this task.\n\n</p><p>Here is an outline of Bessie's initial implementation for sorting an array $A$. \nShe first writes a simple function that makes one pass of bubble sort:\n\n</p><p></p><pre>bubble_sort_pass (A) {\n   for i = 0 to length(A)-2\n      if A[i] &gt; A[i+1], swap A[i] and A[i+1]\n}\n</pre>\n\n<p>The recursive code for her quick(ish) sort function is then structured as\nfollows:\n\n</p><p></p><pre>quickish_sort (A) {\n   if length(A) = 1, return\n   do { // Main loop\n      work_counter = work_counter + length(A)\n      bubble_sort_pass(A)\n   } while (no partition points exist in A) \n   divide A at all partition points; recursively quickish_sort each piece\n}\n</pre>\n\n<p>Bessie is curious how fast her code will run.  For simplicity, she figures each\niteration of her main loop takes linear time, so she increments a global\nvariable called work_counter inside the loop accordingly, so as to keep track of\nthe total work done by the algorithm.\n\n</p><p>Given an input array, please predict the final value of work_counter after the \narray is subject to a quickish_sort.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file sort.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 100,000$).  The next $N$\nlines  describe $A[0] \\ldots A[N-1]$, each being an integer in the range\n$0 \\ldots 10^9$. Input elements are not guaranteed to be distinct.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file sort.out):</h4>\nPrint the final value of work_counter.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n20\n2\n3\n4\n9\n8\n7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12\n</pre>\n\n<p>In this example, we start with the array 20 2 3 4 9 8 7.  After one pass of\nbubble sort (adding 7 to the work counter), we get 2 | 3 | 4 | 9 8 7 | 20, where |\ndenotes a  partition point.  Our problem is therefore divided into recursive\nsubproblems involving sorting 2, 3, 4, and 20 (each taking zero\nunits of work), and 9 8 7.  For the 9 8 7 subproblem, one pass of the main loop\n(3 units of work) yields 8 7 | 9, after which a final pass over 8 7 (2 units of\nwork) effectively finishes the sort.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=840"
    },
    {
      "title": "Problem 2. Train Tracking",
      "subtitle": "USACO 2018 US Open Contest, Platinum",
      "id": 841,
      "year": "2018",
      "division": "platinum",
      "number": "2",
      "problem": "Every morning the express train goes past the farm, heading to the big city, and\nevery afternoon it goes past in the opposite direction, back to the suburbs.\nToday, Bessie is taking the time to watch it, both in the morning and in the\nafternoon.\n\n<p>Bessie knows in advance that the train has $N$ carriages ($1 \\leq N \\leq 10^6$),\nconveniently numbered $0 \\dots N-1$. Carriage $i$ has an ID number $c_i$ written\non it ($0 \\le c_i \\le 10^9$). All numbers are visible both in the morning and in\nthe afternoon, so for each carriage Bessie has two opportunities to observe its\nnumber. That is, as the train passes by in the morning, Bessie is able to\nobserve $c_0$, followed by $c_1$, all the way to $c_{N-1}$. As the train passes\nby in the afternoon, she is again able to observe $c_0$, followed by $c_1$, all\nthe way to $c_{N-1}$.\n\n</p><p>Bessie has picked out an integer $K$ ($1 \\leq K \\leq N$), and she wishes to \ndetermine the minimum ID number for each contiguous set of $K$ carriages. She\nhas a notebook in which she can perform computations, but it is rather small and\nher handwriting (hoof-writing?) is rather large. For example, there may not even\nbe enough space to write down all $N+1-K$ minimums. For arcane reasons, Bessie\nis content with mooing the minimums to the sky as she computes them, so this at\nleast is not an issue.\n\n</p><p>The train is soon arriving! Help Bessie find the $N + 1 - K$ minimums as the\ntrain goes by twice, and make sure she uses her limited notebook size\neffectively. Her notebook is divided into $5500$ sections, conveniently numbered\n$0 \\dots 5499$, and each section has the space to store exactly one integer\nbetween $-2^{31}$ and $2^{31}-1$ inclusive. Initially, each section stores the\ninteger $0$.\n\n</p><p>This is an interactive problem, but you will not be using standard (or file)\nI/O. In particular, you must implement the following function, which helps\nBessie manage her limited notebook space effectively:\n</p><pre class=\"prettyprint\">void helpBessie(int ID);\n</pre>\n\n<p>As each train car goes by, both in the morning and in the afternoon, your\nfunction will be called, and its input will be the ID number on that train car. \n\n</p><p>Your implementation of the $\\texttt{helpBessie}$ function will be able to call\nthese functions:\n\n</p><p></p><ul><li> <strong> int get(int index)</strong>: gets the value of the integer stored at the given\nindex of Bessie's notebook.\n</li><li> <strong> void set(int index, int value)</strong>: sets the integer at the given index to\nthe given value.\n</li><li> <strong> void shoutMinimum(int output)</strong>: instructs Bessie to moo the given number\nto the skies.\n</li><li> <strong> int getTrainLength()</strong>: returns $N$, the number of train carriages.\n</li><li> <strong> int getWindowLength()</strong>: returns $K$, the window length.\n</li><li> <strong> int getCurrentCarIndex()</strong>: returns the index of the train carriage which\nis currently passing by.\n</li><li> <strong> int getCurrentPassIndex()</strong>: returns $0$ if Bessie is observing the\nmorning pass, and $1$ if she is observing the afternoon pass.\n</li></ul>\n\n<p>To help you get started with your code, we have provided initial templates for you in\n<a href=\"https://usaco.org/current/data/template_cpp_train_open18.cpp\">C/C++</a> and <a href=\"https://usaco.org/current/data/template_java_train_open18.java\">Java</a>.  <strong>Python and Pascal submissions are unfortunately not supported for this problem.</strong>\n\n</p><p>The window minimums must be output in order (so the minimum over carriages\n$0, 1, \\dots, K-1$ must be output before the minimum over carriages\n$1, 2, \\dots, K$ is output, and so forth), but aside from this ordering\nconstraint, your function may output minimums during any of its function calls,\nat any times. For example, your function may produce no output during some\ncalls, and may produce multiple outputs during other calls.\n\n</p><p>Bessie has fantastic very-short-term memory, for which reason there is no\nrestriction on memory usage within the $\\texttt{helpBessie}$ function, aside\nfrom the normal 256MB limit. However, between train cars, Bessie is unable to\n\"remember\" anything not contained in the notebook. So between function calls,\nyour program may not persist state except with the $\\texttt{get}$ and\n$\\texttt{set}$ calls.\n\n</p><p>This means:\n\n</p><p><strong> You are NOT ALLOWED to create any non-constant global or static variables.\nAny solution doing so will be disqualified. Coaches WILL manually inspect\nsolutions to verify solutions follow the spirit of the problem.  Since file I/O\nis not necessary for this problem, you are also NOT ALLOWED to perform any file\nI/O in your code.</strong>\n\n</p><p>The total number of $\\texttt{set}$ calls plus the total number of $\\texttt{get}$\ncalls made by your program will be limited to $25 \\cdot 10^6$ for each test\ncase.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 3\n5 7 9 2 0 1 7 4 3 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n2\n0\n0\n0\n1\n3\n3\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=841"
    },
    {
      "title": "Problem 3. Disruption",
      "subtitle": "USACO 2018 US Open Contest, Platinum",
      "id": 842,
      "year": "2018",
      "division": "platinum",
      "number": "3",
      "problem": "Farmer John prides himself on running a well-connected farm.  The farm is a \ncollection of $N$ pastures ($2 \\leq N \\leq 50,000$), pairs of which are \nconnected with $N-1$ bi-directional pathways, each having unit length. Farmer\nJohn notices that using an appropriate series of these pathways,  it is possible\nto travel from any pasture to any other pasture.\n\n<p>Although FJ's farm is connected, he worries what might happen if one of  the\npathways gets blocked, as this would effectively partition his farm into two\ndisjoint sets of pastures, where the cows could travel within each set but not\nbetween the sets.  FJ therefore builds a set of $M$ additional  bi-directional\npathways ($1 \\leq M \\leq 50,000$), each with a positive integer length at most\n$10^9$.  The cows still only use the original pathways  for transit, unless one\nof these becomes blocked.  \n\n</p><p>If one of the original pathways becomes blocked, the farm becomes partitioned\ninto two disjoint pieces, and FJ will select from among his extra pathways a \nsingle replacement pathway that re-establishes connectivity between these two\npieces, so the cows can once again travel from any pasture to any other pasture.\n\n</p><p>For each of the original pathways on the farm, help FJ select the shortest\nsuitable replacement pathway.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file disrupt.in):</h4>\nThe first line of input contains $N$ and $M$.  Each of the next $N-1$ lines\ndescribes an original pathway using integers $p$, $q$, where $p \\neq q$ are the\npastures connected by the pathway (in the range $1 \\ldots N$).  The remaining\n$M$ lines each describe an extra pathway in terms of three integers: $p$, $q$,\nand $r$, where $r$ is the length of the pathway. At most one pathway runs\nbetween any pair of pastures.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file disrupt.out):</h4>\nFor each of the $N-1$ original pathways in the order they appear in the input,\noutput the length of the shortest suitable replacement pathway which would \nre-connect the farm if that original pathway were to be blocked.  If no suitable\nreplacement exists, output -1.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 3\n1 2\n1 3\n4 1\n4 5\n6 5\n2 3 7\n3 6 8\n6 4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">7\n7\n8\n5\n5\n</pre>\n\n<p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=842"
    },
    {
      "title": "Problem 1. Balance Beam",
      "subtitle": "USACO 2018 December Contest, Platinum",
      "id": 864,
      "year": "2018",
      "division": "platinum",
      "number": "1",
      "problem": "In order to save money for a new stall in her barn, Bessie the cow \nhas started performing in the local circus, demonstrating her remarkable\nsense of balance as she carefully walks back and forth on an elevated\nbalance beam!  \n\n<p>The amount of money Bessie earns in her performance is\nrelated to where she manages to ultimately jump off the beam.  \nThe beam has positions labeled $0, 1, \\ldots, N+1$ from left to right.  \nIf Bessie ever reaches $0$ or $N+1$ she falls off one of the ends\nof the beam and sadly gets no payment.  \n\n</p><p>If Bessie is at a given position $k$, she can do either of the following: \n\n</p><p>1. Flip a coin.  If she sees tails, she goes to position $k-1$, and if she\nsees heads, she goes to position $k + 1$ (i.e. $\\frac{1}{2}$ probability of either occurrence).\n\n</p><p>2. Jump off the beam and receive payment of $f(k)$ $(0 \\leq f(k) \\leq 10^9)$.\n\n</p><p>Bessie realizes that she may not be able to guarantee any particular \npayment outcome, since her movement is governed by random coin flips. \nHowever, based on the location where she starts, she wants to determine what her \nexpected payment will be if she makes an optimal sequence of decisions (\"optimal\"\nmeaning that the decisions lead to the highest possible expected payment).\nFor example, if her strategy earns her payment of $10$ with probability $1/2$, \n$8$ with probability $1/4$, or $0$ with probability $1/4$, then her expected \npayment will be the weighted average $10(1/2) + 8(1/4) + 0(1/4) = 7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file balance.in):</h4>\nThe first line of input contains $N$ ($2 \\leq N \\leq 10^5$).  Each of the\nremaining $N$ lines contain $f(1) \\ldots f(N)$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file balance.out):</h4>\nOutput $N$ lines.  On line $i$, print out $10^5$ times the expected value of\npayment if Bessie starts at position $i$ and plays optimally, rounded down to\nthe nearest integer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n1\n3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">150000\n300000\n</pre>\n\n<p>\n</p><p>Problem credits: Franklyn Wang and Spencer Compton\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=864"
    },
    {
      "title": "Problem 2. Sort It Out",
      "subtitle": "USACO 2018 December Contest, Platinum",
      "id": 865,
      "year": "2018",
      "division": "platinum",
      "number": "2",
      "problem": "FJ has $N$ ($1 \\leq N \\leq 10^5$) cows (distinctly identified $1 \\ldots N$)\nlined up in a row. FJ likes his cows to be sorted in increasing order, but\nunfortunately they are currently out of order. While in the past FJ has used\ngroundbreaking algorithms such as “bubble sort” to sort his cows, today he\nis feeling quite lazy. Instead he will yell at a specific cow, one at a time, to\n“sort it out”. When yelled at, a cow will make sure she is not out of order \n(from her point of view). While there is a cow immediately to her right with a\nsmaller ID, they will swap places. Then, while there is a cow immediately to her\nleft with a larger ID, they will swap places. Finally, the cow is done\n“sorting it out”, at which point the cow to her left will have a smaller ID\nand the cow to its right will have a larger ID. \n\n<p>FJ wants to pick a subset of cows, and then iterate through this subset, yelling\nat each of them in turn (in increasing order of ID), again and again until all\n$N$ cows are sorted. For instance, if he picks the subset of cows with IDs\n$\\{2, 4, 5\\}$, then he will yell at cow $2$, and then at cow $4$, and then at\ncow $5$. If the $N$ cows are still not sorted, he will yell at these same cows again,\nand again, as necessary. \n\n</p><p>Since FJ is not sure which cows are paying attention, he wants to minimize the\nsize of this subset. Furthermore, FJ thinks that the number $K$ is very lucky.\nHelp him find the $K$-th lexicographically smallest subset of minimal size so\nthat shouting at them repeatedly will eventually result in all cows being\nsorted.\n\n</p><p>A subset $S$ of $\\{1,\\dots,N\\}$ is said to be lexicographically smaller than a\nsubset $T$ if the list of elements in $S$ (in increasing order) is\nlexicographically smaller than the list of elements in $T$ (in increasing\norder). For instance, $\\{1, 3, 6\\}$ is lexicographically smaller than\n$\\{1, 4, 5\\}$.\n\n</p><p><strong>Scoring</strong>: In cases worth $3/16$ of the points, $N \\leq 6$ and $K = 1$. In\nadditional cases worth $5/16$ of the points, $K = 1$. In additional cases worth\n$8/16$ of the points, no further constraints.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file itout.in):</h4>\nThe first line contains a single integer, $N$.  The second line contains a \nsingle integer $K$ ($1 \\leq K \\leq 10^{18}$).  The third line contains $N$\nspace-separated integers,  representing the cows’ numbers from left to right.\n\n<p>It is guaranteed that there will be at least $K$ valid subsets.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file itout.out):</h4>\nThe first line of output should contain the size of the minimal subset. The\nremaining lines should contain the IDs of the cows in the $K$-th\nlexicographically smallest subset of minimal size, with one ID per line, listed\nin increasing order.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 1\n4 2 1 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n1\n4\n</pre>\n\n<p>We start with the array $\\mathtt{\\:4\\:\\; 2\\:\\; 1\\:\\; 3\\:}$.  After FJ yells at\nthe cow with ID 1, the array will be $\\mathtt{\\:1\\:\\; 4\\:\\; 2\\:\\; 3\\:}$. When FJ\nyells at the cow with ID 4,  the array will be\n$\\mathtt{\\:1\\:\\; 2\\:\\; 3\\:\\; 4\\:}$. At which point, the array is sorted.\n\n</p><p>\n</p><p>Problem credits: Spencer Compton\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=865"
    },
    {
      "title": "Problem 3. The Cow Gathering",
      "subtitle": "USACO 2018 December Contest, Platinum",
      "id": 866,
      "year": "2018",
      "division": "platinum",
      "number": "3",
      "problem": "Cows have assembled from around the world for a massive gathering. There are $N$\ncows, and $N-1$ pairs of cows who are friends with each other. Every cow knows\nevery other cow through some chain of friendships. \n\n<p>They had great fun, but the time has come for them to leave, one by one. They\nwant to leave in some order such that as long as there are still at least two\ncows left, every remaining cow has a remaining friend. Furthermore, due to\nissues with luggage storage, there are $M$ pairs of cows $(a_i, b_i)$ such that\ncow $a_i$ must leave before cow $b_i$. Note that the cows $a_i$ and $b_i$ may or\nmay not be friends.\n\n</p><p>Help the cows figure out, for each cow, whether she could be the last cow to\nleave. It may be that there is no way for the cows to leave satisfying the above\nconstraints.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file gathering.in):</h4>\nLine $1$ contains two space-separated integers $N$ and $M$.\n\n<p>Lines $2 \\leq i \\leq N$ each contain two integers $x_i$ and $y_i$ with\n$1 \\leq x_i, y_i \\leq N$ and $x_i \\neq y_i$ indicating that cows $x_i$ and $y_i$\nare friends.\n\n</p><p>Lines $N+1 \\leq i \\leq N+M$ each contain two integers $a_i$ and $b_i$ with\n$1 \\leq a_i, b_i \\leq N$ and $a_i \\neq b_i$ indicating that cow $a_i$ must leave\nthe gathering before cow $b_i$. \n\n</p><p>It is guaranteed that $1 \\leq N, M \\leq 10^5$. In test cases worth $20\\%$\nof the points, it is further guaranteed that $N, M \\leq 3000$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file gathering.out):</h4>\nThe output should consist of $N$ lines, with one integer $d_i$ on each line such\nthat $d_i = 1$ if cow $i$ could be the last to leave, and $d_i = 0$ otherwise.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 1\n1 2\n2 3\n3 4\n4 5\n2 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n0\n1\n1\n1\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=866"
    },
    {
      "title": "Problem 1. Redistricting",
      "subtitle": "USACO 2019 January Contest, Platinum",
      "id": 900,
      "year": "2019",
      "division": "platinum",
      "number": "1",
      "problem": "The cow mega-city Bovinopolis is redistricting! -- always a contentious \npolitical process between the two major cow breeds (Holsteins and Guernseys)\nliving there, since both breeds want to make sure they retain sufficient\ninfluence in the Bovinopolis government.   \n\n<p>The greater metropolitan area of\nBovinopolis consists of a line of $N$ pastures ($1 \\leq N \\leq 3 \\cdot 10^5$),\neach containing a single cow, which is either a Holstein or a Guernsey.\n\n</p><p>The government of Bovinopolis wants to divide the greater metropolitan area into\nsome number of contiguous districts, so that each district contains at most $K$\npastures ($1 \\leq K \\leq N$), and every pasture is contained in exactly one\ndistrict. Since the government is currently controlled by Holsteins, they want\nto find a way to redistrict which minimizes the number of Guernsey-majority or\ntied districts (a district is tied if the number of Guernseys equals the number\nof Holsteins).\n\n</p><p>A concerned coalition of Guernseys is trying to figure out how much damage might\nbe done by the government's redistricting. Help them figure out the worst-case\nminimum number of districts which are either Guernsey-majority or tied.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file redistricting.in):</h4>\nThe first line contains a two space-separated integers $N$ and $K$. The second\nline contains a string of length $N$. Each character is either 'H' or 'G', for\nHolstein or Guernsey.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file redistricting.out):</h4>\nPlease output the minimum possible number of districts that are\nGuernsey-majority or tied.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 2\nHGHGGHG\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=900"
    },
    {
      "title": "Problem 2. Exercise Route",
      "subtitle": "USACO 2019 January Contest, Platinum",
      "id": 901,
      "year": "2019",
      "division": "platinum",
      "number": "2",
      "problem": "Bessie the cow realizes she needs to exercise more in order to stay in good\nshape.  She needs your help selecting potential routes around the farm that she\ncan use for her morning jogging routine.\n\n<p>The farm is made up of $N$ fields ($1 \\leq N \\leq 2 \\cdot 10^5$), conveniently\nnumbered $1 \\ldots N$, and conveniently connected by a set of $M$ bi-directional\ntrails ($1 \\leq M \\leq 2 \\cdot 10^5$).  Being creatures of habit, the cows tend\nto use one particular subset of $N-1$ trails for all of their daily movement\nbetween fields -- they call these the \"standard\" trails. It is  possible to\ntravel from any field to any other field using only standard  trails.\n\n</p><p>To keep her morning jog interesting, Bessie decides that she should pick a route\nthat involves some non-standard trails.  However, she is so comfortable with\nusing standard trails, she doesn't want to use too many non-standard trails on\nher route.  After some thought, she decides a good route is one that  forms a\nsimple cycle (returning to its starting point, and not using any field  more\nthan once) that contains exactly two non-standard trails.\n\n</p><p>Please help Bessie count the number of good routes she can use.  Two\nroutes are considered the same if they involve the same set of trails.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file exercise.in):</h4>\nThe first line contains $N$ and $M$. Each of the next $M$ lines contains two\nintegers $a_i$ and $b_i$ describing the endpoints of a trail. The first $N-1$ of\nthese are the standard trails.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file exercise.out):</h4>\nOutput the total number routes Bessie might want to use.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 8\n1 2\n1 3\n1 4\n1 5\n2 3\n3 4\n4 5\n5 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=901"
    },
    {
      "title": "Problem 3. Train Tracking 2",
      "subtitle": "USACO 2019 January Contest, Platinum",
      "id": 902,
      "year": "2019",
      "division": "platinum",
      "number": "3",
      "problem": "Every day the express train goes past the farm. It has $N$ carriages\n($1 \\leq N \\leq 10^5$), each with a positive integer label between $1$ and\n$10^9$; different carriages may have the same label.\n\n<p>Usually, Bessie watches the train go by, tracking the carriage labels. But today\nis too foggy, and Bessie can't see any of the labels! Luckily, she has acquired\nthe sliding window minimums of the sequence of carriage labels, from a reputable\nsource in the city. In particular, she has a positive integer $K$, and $N-K+1$\npositive integers $c_1,\\dots,c_{N+1-K}$, where $c_i$ is the minimum label among\ncarriages $i, i+1, \\dots, i+K-1$.\n\n</p><p>Help Bessie figure out the number of ways to assign a label to each carriage,\nconsistent with the sliding window minimums. Since this number may be very\nlarge, Bessie will be satisfied if you find its remainder modulo $10^9 + 7$.\n\n</p><p>Bessie's information is completely reliable; that is, it is guaranteed that\nthere is at least one consistent way to assign labels.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file tracking2.in):</h4>\nThe first line consists of two space-separated integers, $N$ and $K$. The\nsubsequent lines contain the sliding window minimums $c_1,\\dots,c_{N+1-K}$, one\nper line.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file tracking2.out):</h4>\nA single integer: the number of ways, modulo $10^9 + 7$, to assign a positive\ninteger not exceeding $10^9$ to each carriage, such that the minimum label among\ncarriages $i, i+1, \\dots, i+K-1$ is $c_i$ for each $1 \\leq i \\leq N-K+1$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 2\n999999998\n999999999\n999999998\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=902"
    },
    {
      "title": "Problem 1. Cow Dating",
      "subtitle": "USACO 2019 February Contest, Platinum",
      "id": 924,
      "year": "2019",
      "division": "platinum",
      "number": "1",
      "problem": "Not impressed by the lackluster dating websites currently available to cows\n(e.g., eHarmoony, Moosk, Plenty of Cows), Farmer John decides to launch a new\ncow dating site based on a fancy proprietary matching algorithm that matches\ncows and bulls according to a wide range of their mutual interests.\n\n<p>Bessie, in searching for a partner to the Valentine’s Day Barn Dance, has\ndecided to try out this site. After making her account, FJ’s algorithm has\ngiven her a list of $N$ possible matches ($1\\leq N \\leq 10^6$). Going through\nthe list, Bessie concludes that each bull has probability $p_i$ ($0&lt;p_i&lt;1$) of\naccepting an invitation from her for the dance. \n\n</p><p>Bessie decides to send an invitation to each bull in a contiguous interval of\nthe list. Virtuous as always, she wants exactly one partner. Please help Bessie\nfind the maximum probability of receiving exactly one accepted invitation, if\nshe chooses the right interval.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cowdate.in):</h4>\nThe first line of input contains $N$ ($1 \\leq N \\leq 10^6$). Each of the\nremaining $N$ lines contain $10^6$ times $p_i$, which is an integer.\n\n<p>In at least 25% of the test cases, it is further guaranteed that $N \\leq 4000$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cowdate.out):</h4>\nPrint $10^6$ times the maximum probability of receiving exactly one accepted\ninvitation, rounded down to the nearest integer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n300000\n400000\n350000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">470000\n</pre>\n\n<p>The maximal probability results from selecting the interval from the 2nd to the\n3rd cow.\n\n</p><p>As a note, you should be somewhat careful with floating point precision when\nsolving this problem. We advise using at least \"doubles\" (64-bit floating-point\nnumbers) and not \"floats\" (32-bit floating point numbers).\n\n</p><p>\n</p><p>Problem credits: Ethan Guo\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=924"
    },
    {
      "title": "Problem 2. Moorio Kart",
      "subtitle": "USACO 2019 February Contest, Platinum",
      "id": 925,
      "year": "2019",
      "division": "platinum",
      "number": "2",
      "problem": "Bessie and Farmer John enjoy goat kart racing. The idea is very similar to\nGo-Kart racing that others enjoy, except the karts are pulled by goats and the\ntrack is made from nearby farmland. The farmland consists of $N$ meadows and $M$\nroads, each connecting a pair of meadows.\n\n<p>Bessie wants to make a course from nearby farms.  A farm is a subset of two or\nmore meadows within which every meadow can reach every other meadow along a \nunique sequence of roads.  \n\n</p><p>The nearby farmland may contain multiple farms. Suppose there are $K$ farms.\nBessie would like to make a goat kart loop by connecting all $K$ farms by adding\n$K$ roads of length $X$. Each farm should be visited exactly once and at least\none road must be traversed inside each farm.\n\n</p><p>To make the course interesting for racers, the total length of the track should\nbe at least $Y$. Bessie wants to know the sum, over all such interesting tracks,\nof the total track lengths.  A track is different from another if there are two\nmeadows which are adjacent (after adding the roads between farms) in one track\nbut not the other. Please note that only the roads chosen matter, and not the\ndirection the goat karts will travel along those roads.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file mooriokart.in):</h4>\nThe first line of input contains $N$, $M$, $X$, and $Y$ where\n$1 \\leq N \\leq 1500$, $1 \\leq M \\leq N-1$, and $0 \\leq X, Y \\leq 2500$.\n\n<p>Each of the $M$ following lines describe roads. The lines are of the form: $A_i$\n$B_i$ $D_i$, meaning that meadows $A_i$ and $B_i$ are connected with a road of\ninteger length $D_i$ ($1 \\leq A_i, B_i \\leq N$, $0 \\leq D_i \\leq 2500$).  Each\nmeadow is incident to at least one road, and there are no cycles of roads.\n\n</p><p>In at least 70% of the test cases, it is also guaranteed that $N \\leq 1000$ and $Y \\leq 1000$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file mooriokart.out):</h4>\nOutput a single integer, giving the sum of track lengths over all interesting\ntracks. As the sum of track lengths can be quite large, print the sum of lengths\nmodulo\n$10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 3 1 12\n1 2 3\n2 3 4\n4 5 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">54\n</pre>\n\n<p>This example has 6 possible tracks\n\n</p><p>1 --&gt; 2 --&gt; 4 --&gt; 5 --&gt; 1         (length 11)\n\n</p><p>1 --&gt; 2 --&gt; 5 --&gt; 4 --&gt; 1         (length 11)\n\n</p><p>2 --&gt; 3 --&gt; 4 --&gt; 5 --&gt; 2         (length 12)\n\n</p><p>2 --&gt; 3 --&gt; 5 --&gt; 4 --&gt; 2         (length 12)\n\n</p><p>1 --&gt; 2 --&gt; 3 --&gt; 4 --&gt; 5 --&gt; 1   (length 15)\n\n</p><p>1 --&gt; 2 --&gt; 3 --&gt; 5 --&gt; 4 --&gt; 1   (length 15)\n\n</p><p>The answer is $12+12+15+15=54$, adding up only the tracks where the length is at\nleast $12$.\n\n</p><p>Note that for this problem, the standard time limit is increased to 3 seconds\nper test case (6 seconds per case for Java and Python).\n\n</p><p>\n</p><p>Problem credits: Matt Fontaine\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=925"
    },
    {
      "title": "Problem 3. Mowing Mischief",
      "subtitle": "USACO 2019 February Contest, Platinum",
      "id": 926,
      "year": "2019",
      "division": "platinum",
      "number": "3",
      "problem": "Bessie's younger cousins, Ella and Bella, are visiting the farm. Unfortunately,\nthey have been causing nothing but mischief since they arrived.\n\n<p>In their latest scheme, they have decided to mow as much grass as they can. The\nfarm's prime grassland is in the shape of large $T \\times T$ square. The\nbottom-left corner is $(0,0)$, and the top-right corner is $(T,T)$.  The square \ntherefore contains $(T+1)^2$ lattice points (points with integer coordinates). \n\n</p><p>Ella and Bella plan to both start at $(0,0)$ and run at unit speed to $(T, T)$\nwhile each holding one end of a very sharp and very stretchy wire.  Grass in any\narea that is swept by this wire will be cut.  Ella and Bella may take different\npaths, but each path consists of only upward and rightward steps, moving from\nlattice point to lattice point.\n\n</p><p>Bessie is rather concerned that too much grass will be cut, so she invents a \nclever plan to constrain the paths Ella and Bella take.  There are $N$ yummy\nflowers $(1 \\leq N \\leq 2 \\cdot 10^5$) scattered throughout the grassland, each\non a distinct lattice point.  Bessie will pick a set of $S$ flowers that will be\nrequired for both Ella and Bella to visit (so Ella's path must visit all the \nflowers in $S$, and so must Bella's path).  In order to add as many waypoints to\nthese paths as possible, Bessie will choose $S$ to be as large as possible among\nsubsets of flowers that can be visited by a cow moving upward and rightward from\n$(0,0)$ to $(T,T)$.\n\n</p><p>Ella and Bella will try to maximize the amount of grass they cut, subject to the\nrestriction of visiting flowers in $S$.  Please help Bessie choose $S$ so that\nthe amount of grass cut is as small as possible.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file mowing.in):</h4>\nThe first line contains $N$ and $T$ ($1 \\leq T \\leq 10^6$). Each of the next $N$\nlines contains the integer coordinates $(x_i, y_i)$ of a flower. It is\nguaranteed that $1 \\leq x_i, y_i \\leq T-1$ for all $i$, and no two flowers lie\non the same horizontal or vertical line.\n\n<p>In at least 20% of the test cases, it is further guaranteed that $N \\leq 3200$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file mowing.out):</h4>\nA single integer, giving the minimum possible amount of cut grass.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 20\n19 1\n2 6\n9 15\n10 3\n13 11\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">117\n</pre>\n\n<p>In the above example, it is optimal for Bessie to pick the flowers at $(10,3)$\nand $(13,11)$. Then in the worst case, Ella and Bella will cut three rectangles\nof grass with total area $117$.\n\n</p><p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=926"
    },
    {
      "title": "Problem 1. Tree Boxes",
      "subtitle": "USACO 2019 US Open Contest, Platinum",
      "id": 948,
      "year": "2019",
      "division": "platinum",
      "number": "1",
      "problem": "Farmer John is planning to build $N$ ($1 \\leq N \\leq 10^5$) farms that will be\nconnected by $N-1$ roads, forming a tree. Typically, whenever one of his farms\nis having an issue he is not told the specific farm that is having an issue.\nInstead, he is told that one of the farms along the path from some farm $A$ to\nanother farm $B$ is having an issue. This is often confusing for Farmer John, as\nhe usually drives offroad tractors and isn't familiar with the road system.\n\n<p>Farmer John considers the location of a farm to be a 2D point. He would\nprefer to be told that there is a problem in one of the farms in a specified\naxis-aligned rectangular box. This way Farmer John can decide for himself how to\nnavigate between the farms. Bessie told him that this is a little too ambitious,\nso he will be satisfied if he is notified with at most two axis-aligned\nrectangular boxes whose intersection (of farms) is empty and whose union is\nexactly the farms along the path from $A$ to $B$. You must help Farmer John\ndetermine where he should build his farms such that this condition is satisfied.\n\n</p><p>This is an interactive problem, you will not be using standard (or file) I/O.\n<strong> Solutions that use standard (or file) I/O will be disqualified. </strong>\nHowever, you ARE ALLOWED to use global and static variables. You must implement\nthe following functions to help Farmer John:\n\n</p><p></p><ul><li> <strong> void addRoad(int A, int B)</strong>: processes a road between farms  $A$ and\n$B$ ($0 \\le A, B \\le N - 1$).\n</li><li> <strong> void buildFarms()</strong>: determines where Farmer John should build all\nhis farms.\n</li><li> <strong> void notifyFJ(int A, int B)</strong>: notifies Farmer John with either one\nor two boxes that satisfy the aforementioned conditions.\n</li></ul>\n\n<p>Your implementation of the above functions will be able to call the functions\ngiven below.  You may assume that $\\texttt{notifyFJ}$ will be called $Q$ times ($1 \\leq Q \\leq 10^5$).\n\n</p><p></p><ul><li> <strong> int getN()</strong>: gets the value of $N$.\n</li><li> <strong> int getQ()</strong>: gets the value of $Q$.\n</li><li> <strong> void setFarmLocation(int ID, int X, int Y)</strong>: determines that Farmer\nJohn should build farm $ID$ ($0 \\le ID \\le N-1$) at location $(X,Y)$ where \n$(1 \\le X, Y \\le N )$. Should only be called from $\\texttt{buildFarms}$.\n</li><li> <strong> void addBox(int X1, int Y1, int X2, int Y2)</strong>: adds a box to notify\nFarmer John where $(1 \\le X1 \\le X2 \\le N )$ and\n$(1 \\le Y1 \\le Y2 \\le N )$. Should only be called from $\\texttt{notifyFJ}$. \n</li></ul>\n\n<p>The interactive protocol works as follows. First, $\\texttt{addRoad}$ will be\ncalled $N-1$ times, to inform your program of the road system. Then,\n$\\texttt{buildFarms}$ will be called and you must determine where Farmer John\nshould build each farm and call $\\texttt{setFarmLocation}$ for every farm\naccordingly. Finally, there will be $Q$ calls to $\\texttt{notifyFJ}$ where you\nmust make either one or two calls to $\\texttt{addBox}$ to notify Farmer John.\n\n</p><p>It is guaranteed there is always a valid way to notify Farmer John using either\none or two boxes.  The memory limit for this problem is set to 512MB, above\nthe usual 256MB limit.\n\n</p><p>For a C++ solution, use this template:\n</p><pre class=\"prettyprint\">#include \"grader.h\"\n\nvoid addRoad(int a, int b){\n\t// Fill in code here\n}\n\nvoid buildFarms(){\n\t// Fill in code here\n}\n\nvoid notifyFJ(int a, int b){\n\t// Fill in code here\n}\n</pre>\n\n<p>For a Java solution, use this template:\n</p><pre class=\"prettyprint\">import java.io.IOException;\n// If you find it necessary, you may import other standard libraries here.\npublic class boxes extends Grader {\n\n  \t// Copy this exactly:\n        \n@Override\n  \tpublic static void main(String args[]) throws IOException { new boxes().run(); }\n\n        \n@Override\n  \tpublic void addRoad(int a, int b) {\n      // Fill in code here\n  \t}\n        \n@Override\n  \tpublic void buildFarms(){\n      // Fill in code here\n\t  }\n  \t\n@Override\n  \tpublic void notifyFJ(int a, int b){\n      // Fill in code here\n  \t}\n}\n</pre>\n\n<p><strong> Sample Interaction </strong> \n\n</p><p>Grader calls $\\texttt{addRoad(0,1)}$\n\n</p><p>Grader calls $\\texttt{addRoad(1,2)}$\n\n</p><p>Grader calls $\\texttt{buildFarms()}$\n\n</p><p>Solution calls $\\texttt{setFarmLocation(0,1,1)}$\n\n</p><p>Solution calls $\\texttt{setFarmLocation(1,1,2)}$\n\n</p><p>Solution calls $\\texttt{setFarmLocation(2,2,2)}$\n\n</p><p>Solution ends $\\texttt{buildFarms()}$\n\n</p><p>Grader calls $\\texttt{notifyFJ(0,0)}$\n\n</p><p>Solution calls $\\texttt{addBox(1,1,1,1)}$\n\n</p><p>Solution ends $\\texttt{notifyFJ(0,0)}$\n\n</p><p>Grader calls $\\texttt{notifyFJ(0,2)}$\n\n</p><p>Solution calls $\\texttt{addBox(1,1,1,2)}$\n\n</p><p>Solution calls $\\texttt{addBox(2,2,2,2)}$\n\n</p><p>Solution ends $\\texttt{notifyFJ(0,2)}$\n\n</p><p>Grader terminates, and solution passes test-case\n\n</p><p> (Note: if you do not\npass the first test case, the grader will indicate this as usual.  However, note that the\nshort sample interaction above does not correspond to the first test case or any\nother).\n</p><p>\n</p><p>Problem credits: Spencer Compton\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=948"
    },
    {
      "title": "Problem 2. Compound Escape",
      "subtitle": "USACO 2019 US Open Contest, Platinum",
      "id": 949,
      "year": "2019",
      "division": "platinum",
      "number": "2",
      "problem": "Bessie and friends have been captured and are trapped in a secret compound in a\nlocation far from their farm, and it is up to Bessie to plan their escape! The\ncompound consists of $NK$ holding cells arranged in an $N \\times K$  rectangular\ngrid, where there are gates between horizontally and vertically adjacent cells.\nEach cell houses exactly one cow. \n\n<p>Bessie has hacked into the system, and is able to unlock any subset of the\ngates, but each gate has a cost. For the cows to escape, Bessie must open enough\ngates that all the cows can gather in a single cell (so that they have enough\ncow-power to tunnel to the surface!). Bessie wants to minimize the total\nunlocking cost.\n\n</p><p>But the stakes are higher than ever, and Bessie cannot be content with just one\nescape plan: she needs back-ups. Help her count the number of minimum-cost\nescape plans; two plans are considered different if some gate needs to be\nunlocked in one of the plans but not the other.\n\n</p><p>Since this number may be very large, only output its remainder modulo\n$10^9 + 7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file escape.in):</h4>\nThe first line contains two space-separated integers, $N$ and $K$\n($2 \\le N \\le 30000, 2 \\le K \\le 6$).\n\n<p>Each of the next $N$ lines contains $K-1$ space-separated integers: the costs of\nunlocking each gate on a horizontal edge.\n\n</p><p>Each of the next $K$ lines contains $N-1$ space-separated integers: the costs of\nunlocking each gate on a vertical edge. \n\n</p><p>All costs are between $1$ and $10^9$ inclusive.\n\n</p><p>In 20% of the test cases, it is guaranteed that $N \\leq 500$ and all weights are\nbetween $1$ and $5$ inclusive.\n\n</p><p>In another 20% of the test cases, it is guaranteed that $N \\leq 5000$.\n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file escape.out):</h4>\n\n<p>A single integer: the number of minimum-cost escape plans, modulo $10^{9} + 7$. \n\n</p><p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 3\n1 1\n5 6\n7 8\n1 1\n1 1 1\n2 3 4\n1 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>The test case presents a 4x3 grid,\n\n</p><p></p><pre>     1     1\n  +-----+-----+\n  |     |     |\n1 |     |2    | 1\n  |  5  |  6  |\n  +-----+-----+\n  |     |     |\n1 |     |3    | 1\n  |  7  |  8  |\n  +-----+-----+\n  |     |     |\n1 |     |4    | 1\n  |     |     |\n  +-----+-----+\n     1    1\n</pre>\n\n<p>Any minimum-cost escape plan will use the doorway of cost 2, the doorway of cost\n3, and some nine of the doorways of cost 1. There are ten choices  for which\ncost-1 edge to not use, so the answer is 10.\n\n</p><p>\n</p><p>Problem credits: Brian Dean\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=949"
    },
    {
      "title": "Problem 3. Valleys",
      "subtitle": "USACO 2019 US Open Contest, Platinum",
      "id": 950,
      "year": "2019",
      "division": "platinum",
      "number": "3",
      "problem": "Bessie likes sightseeing, and today she is looking for scenic valleys.\n\n<p>Of interest is an $N \\times N$ grid of cells, where each cell has a height.\nEvery cell outside this square grid can be considered to have infinite height.\n\n</p><p>A valley is a region of this grid which is contiguous, has no holes, and is such\nthat every cell immediately surrounding it is higher than all cells in the\nregion.\n\n</p><p>More formally:\n</p><ul><li> A set of cells is called \"edgewise-contiguous\" if one can reach any cell of\nthe set from any other by a sequence of moves up, down, left, or right.</li><li> A set of cells is called \"pointwise-contiguous\" if one can reach any cell\nof the set from any other by a sequence of moves up, down, left, right, or\ndiagonally.</li><li> A \"region\" is a non-empty edgewise-contiguous set of\ncells. </li><li> A region is called \"holey\" if the complement of the region\n(which includes the infinite cells outside the $N \\times N$ grid) is not\npointwise-contiguous. </li><li> The \"border\" of a region is the set of cells\northogonally adjacent (up, down,   left, or right) to some cell  in the region,\nbut which is not in the region itself. </li><li> A \"valley\" is any non-holey\nregion such that every cell in the region has height lower than every cell on\nthe region's border.</li></ul>\n\n<p>Bessie's goal is to determine the sum of the sizes of all valleys.\n\n</p><p></p><div class=\"prob-section\"><h4>Examples</h4>\n\n<p>This is a region:\n\n</p><p></p><pre>oo.\nooo\n..o</pre>\n\n<p>This is not a region (the middle cell and the lower-right cell are not\nedgewise-contiguous):\n\n</p><p></p><pre>oo.\noo.\n..o</pre>\n\n<p>This is a non-holey region:\n\n</p><p></p><pre>ooo\no..\no..</pre>\n\n<p>This is a holey region (the single cell within the \"donut\" shape is not\npointwise-contiguous with the \"outside\" of the region):\n\n</p><p></p><pre>ooo\no.o\nooo</pre>\n\n<p>This is another non-holey region (the single cell in the enter is\npointwise-contiguous with the cell in the lower-right corner):\n\n</p><p></p><pre>ooo\no.o\noo.</pre>\n\n<p></p></div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file valleys.in):</h4>\nFirst line contains integer $N$, where $1 \\le N \\le 750$.\n\n<p>Next $N$ lines each contain $N$ integers, the heights of the cells of the grid.\nEach height $h$ will satisfy $1 \\le h \\le 10^6$. Every height will be a distinct\ninteger.\n\n</p><p>In at least 19% of the test cases, it is further guaranteed that $N \\leq 100$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file valleys.out):</h4>\nOutput a single integer, the sum of the sizes of all valleys.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 10 2\n20 100 30\n3 11 50\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">30\n</pre>\n\n<p>In this example, there are three valleys of size 1:\n\n</p><p></p><pre>o.o\n...\no..</pre>\n\n<p>One valley of size 2:\n\n</p><p></p><pre>...\n...\noo.</pre>\n\n<p>One valley of size 3:\n\n</p><p></p><pre>ooo\n...\n...</pre>\n\n<p>One valley of size 6:\n\n</p><p></p><pre>ooo\no..\noo.</pre>\n\n<p>One valley of size 7:\n\n</p><p></p><pre>ooo\no.o\noo.</pre>\n\n<p>And one valley of size 9:\n\n</p><p></p><pre>ooo\nooo\nooo</pre>\n\n<p>Thus, the answer is 1 + 1 + 1 + 2 + 3 + 6 + 7 + 9 = 30.\n\n</p><p>\n</p><p>Problem credits: Travis Hance\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=950"
    },
    {
      "title": "Problem 1. Greedy Pie Eaters",
      "subtitle": "USACO 2019 December Contest, Platinum",
      "id": 972,
      "year": "2019",
      "division": "platinum",
      "number": "1",
      "problem": "Farmer John has $M$ cows, conveniently labeled $1 \\ldots M$, who enjoy the occasional change of pace\nfrom eating grass.  As a treat for the cows, Farmer John has baked $N$ pies ($1 \\leq N \\leq 300$), labeled\n$1 \\ldots N$.  Cow $i$ enjoys pies with labels in the range $[l_i, r_i]$ (from $l_i$ to $r_i$ inclusive),\nand no two cows enjoy the exact same range of pies.  Cow $i$ also has a weight, $w_i$, which \nis an integer in the range $1 \\ldots 10^6$.\n\n<p>Farmer John may choose a sequence of cows $c_1,c_2,\\ldots, c_K,$ after which the\nselected cows will take turns eating in that order. Unfortunately, the cows \ndon't know how to share! When it is cow $c_i$'s turn to eat, she will consume\nall of the  pies that she enjoys --- that is, all remaining pies in the interval\n$[l_{c_i},r_{c_i}]$.  Farmer John would like to avoid the awkward situation\noccurring when it is a cows turn to eat but all of the pies she enjoys have already been\nconsumed. Therefore, he wants you to compute the largest possible total weight\n($w_{c_1}+w_{c_2}+\\ldots+w_{c_K}$) of a sequence $c_1,c_2,\\ldots, c_K$ for which each cow in the\nsequence eats at least one pie.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-5 satisfy $N\\le 50$ and $M\\le 20$.  </li><li>Test cases 6-9 satisfy $N\\le 50.$ </li></ul>\n</div> \n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file pieaters.in):</h4>\nThe first line contains two integers $N$ and $M$\n$\\left(1\\le M\\le \\frac{N(N+1)}{2}\\right)$. \n\n<p>The next $M$ lines each describe a cow in terms of the integers $w_i, l_i$, and $r_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file pieaters.out):</h4>\nPrint the maximum possible total weight of a valid sequence.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 2\n100 1 2\n100 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">200\n</pre>\n\n<p>In this example, if cow 1 eats first, then there will be nothing left for cow 2 to eat. However,\nif cow 2 eats first, then cow 1 will be satisfied by eating the second pie only.\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=972"
    },
    {
      "title": "Problem 2. Bessie's Snow Cow",
      "subtitle": "USACO 2019 December Contest, Platinum",
      "id": 973,
      "year": "2019",
      "division": "platinum",
      "number": "2",
      "problem": "Snow has arrived on the farm, and as she does at the beginning of every winter,\nBessie is building a snow-cow! Most of the time, Bessie strives to make her\nsculpture look as much like a real cow as possible.  However, feeling\nartistically inspired, this year she decides to pursue a more abstract route and\nbuild a sculpture in the shape of a tree, consisting of $N$ snowballs\n$(1\\le N\\le 10^5)$ connected by  $N-1$ branches, each connecting a pair of\nsnowballs such that there is a  unique path between every pair of snowballs. \n\n<p>Bessie has added a nose to one of the snowballs, so it represents the head of\nthe abstract snow cow.  She designates it as snowball number 1.  To add more\nvisual interest, she plans to dye some of the snowballs different colors in an\nartistic fashion by filling old milk pails with colored dye and splashing them\nonto the sculpture.  Colors are identified by integers in the range\n$1 \\ldots 10^5$, and  Bessie has an unlimited supply of buckets filled with dyes\nof every possible color.\n\n</p><p>When Bessie splashes a snowball with a bucket of dye, all the snowballs in its \nsubtree are also splashed with the same dye (snowball $y$ is in the subtree of\nsnowball $x$ if $x$ lies on the path from $y$ to the head snowball). By\nsplashing each color with great care, Bessie makes sure that all colors a \nsnowball has been splashed with will remain visible. For example, if a snowball\nhad colors $[1,2,3]$ and Bessie splashes it with color $4$, the snowball will\nthen have colors $[1,2,3,4]$. \n\n</p><p>After splashing the snowballs some number of times, Bessie may also want to know\nhow colorful a part of her snow-cow is.  The \"colorfulness\" of a snowball $x$ is\nequal to the number of distinct colors $c$ such that snowball $x$ is colored\n$c$. If Bessie asks you about snowball $x$, you should reply with the sum of the\ncolorfulness values of all snowballs in the subtree of $x.$\n\n</p><p>Please help Bessie find the colorfulness of her snow-cow at certain points in\ntime.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p>$Q$ is defined below.\n\n</p><p></p><ul><li>Test cases 2-3 satisfy $N\\le 10^2, Q\\le 2\\cdot 10^2.$ </li><li>Test cases 4-6 satisfy $N\\le 10^3, Q\\le 2\\cdot 10^3.$ </li></ul>\n</div> \n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file snowcow.in):</h4>\nThe first line contains $N,$ and the number of queries $Q$ ($1\\le Q\\le 10^5$). \n\n<p>The next $N-1$ lines each contain two space-separated integers $a$ and $b,$\ndescribing a branch connecting snowballs $a$ and $b$ ($1 \\le a, b \\le N$).\n\n</p><p>Finally, the last $Q$ lines each contain a query.  A query of the form\n\n</p><p></p><pre>1 x c</pre>\n\n<p>indicates that Bessie splashed a bucket of juice of color $c$ on snowball $x,$\ncoloring all snowballs in the subtree of $x$. A line of the form \n\n</p><p></p><pre>2 x</pre>\n\n<p>is a query for the sum of the colorfulness values of all snowballs in the\nsubtree of $x$. Of course, $1\\le x\\le N$ and $1\\le c\\le 10^5.$ </p></div> \n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file snowcow.out):</h4>\nFor each query of type 2, print the sum of colorfulness values within \nthe corresponding subtree. \n<strong>Note that you should use 64-bit integers to avoid overflow. </strong>\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 18\n1 2\n1 3\n3 4\n3 5\n1 4 1\n2 1\n2 2\n2 3\n2 4\n2 5\n1 5 1\n2 1\n2 2\n2 3\n2 4\n2 5\n1 1 1\n2 1\n2 2\n2 3\n2 4\n2 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n0\n1\n1\n0\n2\n0\n2\n1\n1\n5\n1\n3\n1\n1\n</pre>\n\n<p>After the first query of type 1, snowball 4 is dyed with color 1.\n\n</p><p>After the second query of type 1, snowballs 4 and 5 are dyed with color 1.\n\n</p><p>After the third query of type 1, all snowballs are dyed with color 1.\n\n</p><p>\n</p><p>Problem credits: Michael Cao and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=973"
    },
    {
      "title": "Problem 3. Tree Depth",
      "subtitle": "USACO 2019 December Contest, Platinum",
      "id": 974,
      "year": "2019",
      "division": "platinum",
      "number": "3",
      "problem": "For the new year, Farmer John decided to give his cows a festive binary search tree\n(BST)! \n\n<p>To generate the BST, FJ starts with a permutation $a=\\{a_1,a_2,\\ldots,a_N\\}$\nof the integers $1\\ldots N$, where $N\\le 300$.  He then runs the following\npseudocode with arguments $1$ and $N.$\n\n</p><p></p><pre>generate(l,r):\n  if l &gt; r, return empty subtree;\n  x = argmin_{l &lt;= i &lt;= r} a_i; // index of min a_i in {a_l,...,a_r}\n  return a BST with x as the root, \n    generate(l,x-1) as the left subtree,\n    generate(x+1,r) as the right subtree;\n</pre>\n\n<p>For example, the permutation $\\{3,2,5,1,4\\}$ generates the following BST:\n\n</p><p></p><pre>    4\n   / \\\n  2   5\n / \\ \n1   3\n</pre>\n\n<p>Let $d_i(a)$ denote the depth of node $i$ in the tree corresponding to $a,$ \nmeaning the number of nodes on the path from $a_i$ to the root. In the above\nexample, $d_4(a)=1, d_2(a)=d_5(a)=2,$ and $d_1(a)=d_3(a)=3.$\n\n</p><p>The number of inversions of $a$ is equal to the number of pairs of integers\n$(i,j)$ such that $1\\le i&lt;j\\le N$ and $a_i&gt;a_j.$ The cows know that the $a$ that\nFJ will use to generate the BST has exactly $K$ inversions\n$(0\\le K\\le \\frac{N(N-1)}{2})$.  Over all $a$ satisfying this condition, compute\nthe remainder when $\\sum_ad_i(a)$ is divided by $M$ for each $1\\le i\\le N.$\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file treedepth.in):</h4>\nThe only line of input consists of three space-separated integers $N, K,$ and\n$M$, followed by a new line. $M$ will be a prime number in the range\n$[10^8,10^9+9].$\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file treedepth.out):</h4>\nPrint $N$ space-separated integers denoting $\\sum_ad_i(a)\\pmod{M}$ for each \n$1\\le i\\le N.$\n</div>\n\n<p></p><div class=\"prob-section\"><h4>BATCHING:</h4>\n\n<p></p><ul><li>Test cases 3-4 satisfy $N\\le 8.$ </li><li>Test cases 5-7 satisfy $N\\le 20.$ </li><li>Test cases 8-10 satisfy $N\\le 50.$ </li></ul>\n\n<p></p></div> \n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 0 192603497\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 2 3 </pre>\n\n<p>Here, the only permutation is $a=\\{1,2,3\\}.$ \n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 1 144408983\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3 4 4 </pre>\n\n<p>Here, the two permutations are $a=\\{1,3,2\\}$ and $a=\\{2,1,3\\}.$\n\n</p><p>\n</p><p>Problem credits: Yinzhan Xu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=974"
    },
    {
      "title": "Problem 1. Cave Paintings",
      "subtitle": "USACO 2020 January Contest, Platinum",
      "id": 996,
      "year": "2020",
      "division": "platinum",
      "number": "1",
      "problem": "Bessie has become an artist and is creating paintings of caves! Her current work\nin progress is a grid of height $N$ such that each row of the grid contains\nexactly $M$ squares ($1\\le N,M\\le 1000$). Each square is either empty, filled\nwith rock, or filled with water. Bessie has already painted the squares\ncontaining rock, including the entire border of the painting. She now wants to\nfill some empty squares with water such that if the painting were real, there\nwould be no net motion of water. Define the height of a square in the $i$-th row\nfrom the top to be $N+1-i$. Bessie wants her painting to satisfy the following\nconstraint: \n\n<p>Suppose that square $a$ is filled with water. Then if there exists a path from\n$a$ to square $b$ using only empty or water squares that are not higher than $a$\nsuch that every two adjacent squares on the path share a side, then $b$ is also\nfilled with water. \n\n</p><p>Find the number of different paintings Bessie can make modulo $10^9+7$.  Bessie\nmay fill any number of empty squares with water, including none or all. \n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 1-5 satisfy $N,M\\le 10.$</li><li>Test cases 6-15 satisfy no\nadditional constraints.</li></ul>\n\n<p></p></div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file cave.in):</h4>\nThe first line contains two space-separated integers $N$ and $M$.\n\n<p>The next $N$ lines of input each contain $M$ characters. Each character is\neither '.' or '#', representing an empty square and a square filled with rock,\nrespectively. The first and last row and first and last column only contain '#'.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file cave.out):</h4>\nA single integer: the number of paintings satisfying the constraint modulo\n$10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 9\n#########\n#...#...#\n#.#...#.#\n#########\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>If a square in the second row is filled with water, then all empty squares must\nbe filled with water. Otherwise, assume that no such squares are filled with\nwater. Then Bessie can choose to fill any subset of the three horizontally\ncontiguous regions of empty squares in the third row. Thus, the number of\npaintings is equal to $1+2^3=9.$\n\n</p><p>\n</p><p>Problem credits: Daniel Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=996"
    },
    {
      "title": "Problem 2. Non-Decreasing Subsequences",
      "subtitle": "USACO 2020 January Contest, Platinum",
      "id": 997,
      "year": "2020",
      "division": "platinum",
      "number": "2",
      "problem": "Bessie was recently taking a USACO contest and encountered the following\nproblem. Of course, Bessie knows how to solve it. But do you?\n\n<p>Consider a sequence $A_1,A_2,\\ldots,A_N$ of length $N$ $(1\\le N\\le 5\\cdot 10^4)$\nconsisting solely of integers in the range $1\\ldots K$ $(1\\le K\\le 20).$ You are\ngiven $Q$ ($1\\le Q\\le 2\\cdot 10^5$) queries of the form $[L_i,R_i]$\n$(1\\le L_i\\le R_i\\le N).$ For each query, compute the number of non-decreasing\nsubsequences of $A_{L_i},A_{L_i+1}\\ldots, A_{R_i}$ mod $10^9+7$. \n\n</p><p>A non-decreasing subsequence of $A_L,\\ldots,A_R$ is a collection of indices\n$(j_1,j_2,\\ldots, j_x)$ such that $L\\le j_1&lt;j_2&lt;\\cdots&lt;j_x\\le R$ and\n$A_{j_1}\\le A_{j_2}\\le \\cdots \\le A_{j_x}.$ Make sure to consider the empty\nsubsequence!\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $N\\le 1000$.  </li><li>Test cases 4-6 satisfy $K\\le 5.$ </li><li>Test cases 7-9 satisfy $Q\\le 10^5.$ </li><li>Test cases 10-12 satisfy no additional constraints.</li></ul>\n\n<p></p></div> \n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file nondec.in):</h4>\nThe first line contains two space-separated integers $N$ and $K$.\n\n<p>The second line contains $N$ space-separated integers $A_1,A_2,\\ldots, A_N$.\n\n</p><p>The third line contains a single integer $Q.$\n\n</p><p>The next $Q$ lines each contain two space-separated integers $L_i$ and $R_i.$ \n\n</p><p></p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file nondec.out):</h4>\nFor each query $[L_i,R_i],$ you should print the number of non-decreasing\nsubsequences of $A_{L_i},A_{L_i+1}\\ldots, A_{R_i}$ mod $10^9+7$ on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 2\n1 2 1 1 2\n3\n2 3\n4 5\n1 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n4\n20\n</pre>\n\n<p>For the first query, the non-decreasing subsequences are $(), (2),$ and $(3).$\n$(2,3)$ is not a non-decreasing subsequence because\n$A_2\\not \\le A_3.$\n\n</p><p>For the second query, the non-decreasing subsequences are $()$, $(4)$, $(5)$,\nand $(4,5)$.\n\n</p><p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=997"
    },
    {
      "title": "Problem 3. Falling Portals",
      "subtitle": "USACO 2020 January Contest, Platinum",
      "id": 998,
      "year": "2020",
      "division": "platinum",
      "number": "3",
      "problem": "There are $N$ ($2\\le N\\le 2\\cdot 10^5$) worlds, each with a portal. Initially,\nworld $i$ (for $1 \\leq i \\leq N$) is at $x$-coordinate $i$, and $y$-coordinate\n$A_i$ ($1\\le A_i\\le 10^9$). There is also a cow on each world. At time $0$, all\n$y$-coordinates are distinct and the worlds start falling: world $i$ moves\ncontinuously in the negative-$y$ direction at a speed of $i$ units per second. \n\n<p>At any time when two worlds are at the same $y$-coordinate (possibly a\nfractional time), the portals \"align\", meaning that a cow on one of the worlds\ncan choose to travel instantaneously to the other world.\n\n</p><p>For each $i$, the cow on world $i$ wants to travel to world $Q_i$ ($Q_i\\neq i$).\nHelp each cow determine how long her journey will take, if she travels\noptimally.\n\n</p><p>Each query output should be a fraction $a/b$ where $a$ and $b$ are positive and\nrelatively prime integers, or $-1$ if it the journey is impossible.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $N\\le 100.$</li><li>Test cases 4-5 satisfy $N\\le 2000.$</li><li>Test cases 6-14 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file falling.in):</h4>\nThe first line of input contains a single integer $N.$\n\n<p>The next line contains $N$ space-separated integers $A_1,A_2,\\ldots,A_N.$\n\n</p><p>The next line contains $N$ space-separated integers $Q_1,Q_2,\\ldots,Q_N.$\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file falling.out):</h4>\nPrint $N$ lines, the $i$-th of which contains the journey length for cow $i.$\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n3 5 10 2\n3 3 2 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">7/2\n7/2\n5/1\n-1\n</pre>\n\n<p>Consider the answer for the cow originally on world 2. At time $2$ worlds 1 and\n2 align, so the cow can travel to world 1. At time $\\frac{7}{2}$ worlds 1 and 3\nalign, so the cow can  travel to world 3.\n\n</p><p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=998"
    },
    {
      "title": "Problem 1. Delegation",
      "subtitle": "USACO 2020 February Contest, Platinum",
      "id": 1020,
      "year": "2020",
      "division": "platinum",
      "number": "1",
      "problem": "Farmer John's farm consists of $N$ pastures ($2 \\leq N \\leq 10^5$) connected by\n$N-1$ roads, so that any pasture is reachable from any other pasture. That is,\nthe farm is a tree. But after 28 years of dealing with the tricky algorithmic\nproblems that inevitably arise from trees, FJ has decided that a farm in the\nshape of a tree is just too complex. He believes that algorithmic problems are\nsimpler on paths.\n\n<p>Thus, his plan is to partition the set of roads into several paths and delegate\nresponsibility for these path among his worthy farm hands. He doesn't care about\nthe number of paths. However, he wants to make sure that these paths are all as\nlarge as possible, so that no farm hand can get away with asymptotically\ninefficient algorithms!\n\n</p><p>Help Farmer John determine the largest positive integer $K$ such that the roads\ncan be partitioned into paths of length at least $K$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>In test cases 2-4 the tree forms a star; at most one vertex has degree\ngreater than two.</li><li>Test cases 5-8 satisfy $N\\le 10^3$.</li><li>Test cases 9-15 satisfy no additional constraints..</li></ul>\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file deleg.in):</h4>\nThe first line contains a single integer $N$. \n\n<p>The next $N-1$ lines each contain two space-separated integers $a$ and $b$\ndescribing an edge between vertices $a$ and $b$.  Both $a$ and $b$ are in the\nrange $1 \\ldots N$. \n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file deleg.out):</h4>\nPrint $K$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8\n1 2\n1 3\n1 4\n4 5\n1 6\n6 7\n7 8\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>One possible set of paths is as follows:\n</p><div class=\"math\">$$2-1-6-7-8, 3-1-4-5$$</div>\n\n<p>\n</p><p>Problem credits: Mark Gordon and Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1020"
    },
    {
      "title": "Problem 2. Equilateral Triangles",
      "subtitle": "USACO 2020 February Contest, Platinum",
      "id": 1021,
      "year": "2020",
      "division": "platinum",
      "number": "2",
      "problem": "Farmer John's pasture can be represented by a $N\\times N$  square grid\n$(1\\le N\\le 300)$ consisting of positions $(i,j)$ for all $1\\le i,j\\le N$. For\neach square of the grid, the corresponding character in the input is equal to\n'*' if there exists a single cow at that position and '.' if there does not\nexist a cow at that position.\n\n<p>FJ believes that the beauty of his pasture is directly proportional to the\nnumber of triples of cows such that their positions are equidistant from each\nother. In other words, they form an equilateral triangle. Unfortunately, it was\nonly quite recently that FJ realized that since all of his cows are located at\ninteger coordinates, no beautiful triples can possibly exist if Euclidean\ndistance is used! Thus, FJ has decided to switch to use \"Manhattan\" distance\ninstead. Formally, the Manhattan distance between two positions $(x_0,y_0)$ and\n$(x_1,y_1)$ is equal to $|x_0-x_1|+|y_0-y_1|$.\n\n</p><p>Given the grid representing the positions of the cows, compute the number of\nequilateral triples.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\nThere will be fourteen test cases aside from the sample, one for each of\n$N\\in \\{50,75,100,125,150,175,200,225,250,275,300,300,300,300\\}.$\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file triangles.in):</h4>\nThe first line contains a single integer $N.$\n\n<p>For each $1\\le i\\le N,$ line $i+1$ of the input contains a string of length $N$\nconsisting solely of the characters '*' and '.'. The $j$th character \ndescribes whether there exists a cow at position $(i,j)$ or not.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file triangles.out):</h4>\nOutput a single integer containing the answer. It can be shown that it fits into\na signed 32-bit integer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n*..\n.*.\n*..\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>There are three cows, and they form an equilateral triple because the Manhattan\ndistance between each pair of cows is equal to two.\n\n</p><p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1021"
    },
    {
      "title": "Problem 3. Help Yourself",
      "subtitle": "USACO 2020 February Contest, Platinum",
      "id": 1022,
      "year": "2020",
      "division": "platinum",
      "number": "3",
      "problem": "Bessie has been given $N$ ($1\\le N\\le 10^5$) segments on a 1D number line. The\n$i$th segment contains all reals $x$ such that $l_i\\le x\\le r_i$.\n\n<p>Define the <strong>union</strong> of a set of segments to be the set of all $x$ that are \ncontained within at least one segment. Define the <strong>complexity</strong> of a set of \nsegments to be the number of connected regions represented in its union,  raised\nto the power of $K$ ($2\\le K\\le 10$).\n\n</p><p>Bessie wants to compute the sum of the complexities over all $2^N$ subsets of\nthe given set of $N$ segments, modulo $10^9+7$.\n\n</p><p>Normally, your job is to help Bessie. But this time, you are Bessie, and there\nis no one to help you. Help yourself!\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING</h4>\n<ul><li>Test case 2 satisfies $N\\le 16$.</li><li>Test cases 3-5 satisfy $N\\le 1000$, $K=2$.</li><li>Test cases 6-8 satisfy $N\\le 1000$.</li><li>For each $T\\in [9,16],$ test case $T$ satisfies $K=3+(T-9)$.</li></ul>\n</div>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file help.in):</h4>\nThe first line contains $N$ and $K$.\n\n<p>Each of the next $N$ lines contains two integers $l_i$ and $r_i$. It is\nguaranteed that $l_i&lt; r_i$ and all $l_i,r_i$ are distinct integers in the range\n$1 \\ldots 2N.$\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file help.out):</h4>\nOutput the answer, modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\n1 6\n2 3\n4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>The complexity of each nonempty subset is written below.\n\n</p><p></p><div class=\"math\">$$\\{[1,6]\\} \\implies 1, \\{[2,3]\\} \\implies 1, \\{[4,5]\\} \\implies 1$$</div>\n\n<p></p><div class=\"math\">$$\\{[1,6],[2,3]\\} \\implies 1, \\{[1,6],[4,5]\\} \\implies 1, \\{[2,3],[4,5]\\} \\implies 4$$</div>\n\n<p></p><div class=\"math\">$$\\{[1,6],[2,3],[4,5]\\} \\implies 1$$</div>\n\n<p>The answer is $1+1+1+1+1+4+1=10$.\n\n</p><p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1022"
    },
    {
      "title": "Problem 1. Sprinklers 2: Return of the Alfalfa",
      "subtitle": "USACO 2020 US Open Contest, Platinum",
      "id": 1044,
      "year": "2020",
      "division": "platinum",
      "number": "1",
      "problem": "Farmer John has a small field in the shape of an $N$ by $N$ grid\n($1 \\le N \\le 2000$) where the $j$-th square from the left of the $i$-th row\nfrom the top is denoted by $(i,j)$ for all $1 \\le i,j \\le N$. He is interested\nin planting sweet corn and alfalfa in his field. To do so, he needs to install\nsome special sprinklers.\n\n<p>A sweet corn sprinkler in square $(I,J)$ will sprinkle all squares to the\nbottom-left: i.e. $(i,j)$ with $I \\le i$ and $j \\le J$.\n\n</p><p>An alfalfa sprinkler in square $(I,J)$ will sprinkle all squares to the\ntop-right: i.e. $(i,j)$ with $i \\le I$ and $J \\le j$.\n\n</p><p>A square sprinkled by one or multiple sweet corn sprinklers can grow sweet corn;\na square sprinkled by one or multiple alfalfa sprinklers can grow alfalfa. But a\nsquare sprinkled by both types of sprinklers (or neither type) can grow nothing.\n\n</p><p>Help FJ determine the number of ways (modulo $10^9 + 7$) to install sprinklers\nin his field, at most one per square, so that every square is fertile (i.e.,\nsprinkled by exactly one type of sprinkler).\n\n</p><p>Some of the squares are already occupied by woolly cows; this doesn't prevent\nthese squares from being fertile, but no sprinklers can be installed in such\nsquares.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file sprinklers2.in):</h4>\nThe first line contains a single integer $N.$\n\n<p>For each $1\\le i\\le N,$ the $i+1$-st line contains a string of length $N$\ndenoting the $i$-th row of the grid. Each character of the string is one of 'W'\n(indicating a square occupied by a woolly cow), or '.' (unoccupied).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file sprinklers2.out):</h4>\nOutput the remainder when the number of ways to install sprinklers is divided by\n$10^9+7.$\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n..\n..\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">28\n</pre>\n\n<p>Here are all fourteen possibilities when sweet corn can grow at $(1,1)$.\n\n</p><p></p><pre>CC  .C  CA  CC  .C  CA  CA  C.  CA  C.  CC  .C  CC  .C  \nCC, CC, CC, .C, .C, .C, CA, CA, .A, .A, C., C., .., ..\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n..W.\n..WW\nWW..\n...W\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2304\n</pre>\n\n<p>This satisfies the constraints for the first subtask described below.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 3-4 satisfy $N\\le 10$ and there are at most ten unoccupied\nsquares.</li><li>Test cases 5-9 satisfy $N\\le 200$.</li><li>Test cases 10-16 satisfy no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1044"
    },
    {
      "title": "Problem 2. Exercise",
      "subtitle": "USACO 2020 US Open Contest, Platinum",
      "id": 1045,
      "year": "2020",
      "division": "platinum",
      "number": "2",
      "problem": "Farmer John has come up with a new morning exercise routine for the cows\n(again)!\n\n<p>As before, Farmer John's $N$ cows ($1\\le N\\le 7500$) are standing in a line. \nThe $i$-th cow from the left has label $i$ for each $1\\le i\\le N$. He tells them\nto repeat the following step until the cows are in the same order as when they\nstarted.\n\n</p><p></p><ul><li>Given a permutation $A$ of length $N$, the cows change their order such that\nthe $i$-th cow from the left before the change is $A_i$-th from the left after\nthe change. </li></ul>\n\n<p>For example, if $A=(1,2,3,4,5)$ then the cows perform one step and immediately\nreturn to the same order. If $A=(2,3,1,5,4)$, then the cows perform six steps \nbefore returning to the original order. The order of the cows from left to right\nafter each step is as follows:\n\n</p><p></p><ul><li>0 steps: $(1,2,3,4,5)$</li><li>1 step: $(3,1,2,5,4)$</li><li>2 steps: $(2,3,1,4,5)$</li><li>3 steps: $(1,2,3,5,4)$</li><li>4 steps: $(3,1,2,4,5)$</li><li>5 steps: $(2,3,1,5,4)$</li><li>6 steps:\n$(1,2,3,4,5)$</li></ul>\n\n<p>Compute the product of the numbers of steps needed over all $N!$ possible\npermutations $A$ of length $N$.\n\n</p><p>As this number may be very large, output the answer modulo $M$\n($10^8\\le M\\le 10^9+7$, $M$ is prime). \n\n</p><p>Contestants using C++ may find the following code from \n<a href=\"https://github.com/kth-competitive-programming/kactl/blob/master/content/various/FastMod.h\">KACTL</a>\nhelpful. Known as the <a href=\"https://en.wikipedia.org/wiki/Barrett_reduction\">Barrett\nreduction</a>, it allows you to compute $a \\% b$ several times faster than\nusual, where $b&gt;1$ is constant but not known at compile time. (we are not aware of\nsuch an optimization for Java, unfortunately).\n\n</p><p></p><pre class=\"prettyprint\">#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\ntypedef unsigned long long ull;\ntypedef __uint128_t L;\nstruct FastMod {\n\tull b, m;\n\tFastMod(ull b) : b(b), m(ull((L(1) &lt;&lt; 64) / b)) {}\n\tull reduce(ull a) {\n\t\tull q = (ull)((L(m) * a) &gt;&gt; 64);\n\t\tull r = a - q * b; // can be proven that 0 &lt;= r &lt; 2*b\n\t\treturn r &gt;= b ? r - b : r;\n\t}\n};\nFastMod F(2);\n\nint main() {\n\tint M = 1000000007; F = FastMod(M);\n\tull x = 10ULL*M+3; \n\tcout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; F.reduce(x) &lt;&lt; \"\\n\"; // 10000000073 3\n}\n</pre>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file exercise.in):</h4>\nThe first line contains $N$ and $M$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file exercise.out):</h4>\nA single integer.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 1000000007\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">369329541\n</pre>\n\n<p>For each $1\\le i\\le N$, the $i$-th element of the following array is the number\nof  permutations that cause the cows to take $i$ steps: $[1,25,20,30,24,20].$\nThe answer  is\n$1^1\\cdot 2^{25}\\cdot 3^{20}\\cdot 4^{30}\\cdot 5^{24}\\cdot 6^{20}\\equiv 369329541\\pmod{10^9+7}$.\n\n</p><p><strong>Note: This problem has an expanded memory limit of 512 MB.</strong>\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test case 2 satisfies $N=8$.</li><li>Test cases 3-5 satisfy $N\\le 50$.</li><li>Test cases 6-8 satisfy $N\\le 500$.</li><li>Test cases 9-12 satisfy $N\\le 3000$.</li><li>Test cases 13-16 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1045"
    },
    {
      "title": "Problem 3. Circus",
      "subtitle": "USACO 2020 US Open Contest, Platinum",
      "id": 1046,
      "year": "2020",
      "division": "platinum",
      "number": "3",
      "problem": "The $N$ cows of Farmer John's Circus ($1 \\leq N \\leq 10^5$) are preparing their\nupcoming acts. The acts all take place on a tree with vertices labeled\n$1\\ldots N$. The \"starting state\" of an act is defined by a number\n$1 \\leq K \\leq N$ and an assignment of cows $1\\dots K$ to the vertices of the\ntree, so that no two cows are located at the same vertex.\n\n<p>In an act, the cows make an arbitrarily large number of \"moves.\" In a move, a\nsingle cow moves from her current vertex to an unoccupied adjacent vertex. Two\nstarting states are said to be equivalent if one may be reached from the other\nby some sequence of moves.\n\n</p><p>For each $1 \\leq K \\leq N$, help the cows determine the number of equivalence\nclasses of starting states: that is, the maximum number of starting states they\ncan pick such that no two are equivalent. Since these numbers may be very large,\noutput their remainders modulo $10^9 + 7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (file circus.in):</h4>\nLine $1$ contains $N$.\n\n<p>Lines $2\\le i\\le N$ each contain two integers $a_i$ and $b_i$ denoting an edge\nbetween $a_i$ and $b_i$ in the tree.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (file circus.out):</h4>\nFor each $1\\le i\\le N,$ the $i$-th line of output should contain the answer for\n$K=i$ modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1 2\n2 3\n3 4\n3 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n1\n3\n24\n120\n</pre>\nFor $K=1$ and $K=2,$ any two states can be transformed into one another.\n\n<p>Now consider $K=3$, and let $c_i$ denote the location of cow $i$. The state\n$(c_1,c_2,c_3)=(1,2,3)$ is equivalent to the states $(1,2,5)$ and $(1,3,2).$\nHowever, it is not equivalent to the state $(2,1,3).$\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8\n1 3\n2 3\n3 4\n4 5\n5 6\n6 7\n6 8\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n1\n1\n6\n30\n180\n5040\n40320\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 3-4 satisfy $N\\le 8.$</li><li>Test cases 5-7 satisfy $N\\le 16.$</li><li>Test cases 8-10 satisfy $N\\le 100$ and the tree forms a \"star;\" at most one\nvertex has degree greater than two.</li><li>Test cases 11-15 satisfy $N\\le 100$.</li><li>Test cases 16-20 satisfy no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1046"
    },
    {
      "title": "Problem 1. Sleeping Cows",
      "subtitle": "USACO 2020 December Contest, Platinum",
      "id": 1068,
      "year": "2020",
      "division": "platinum",
      "number": "1",
      "problem": "Farmer John has $N$ $(1 \\le N \\le 3000)$ cows of various sizes. He originally\nbuilt each cow a personalized barn, but now some of the cows have outgrown their\nbarns. Specifically, FJ originally built $N$ barns of sizes\n$t_1,t_2,\\ldots,t_N$, while the cows are now of sizes $s_1,s_2,\\ldots,s_N$\n($1\\le s_i,t_i\\le 10^9$).\n\n<p>Every night, the cows go through a ritual of finding a barn to sleep in. A cow\n$i$ can sleep in a barn $j$ if and only if they fit within the barn\n($s_i\\le t_j$). Each barn can house at most one cow.\n\n</p><p>We say that a matching of cows to barns is <em>maximal</em> if and only if every\ncow assigned to a barn can fit in the barn, and every unassigned cow is\nincapable of fitting in any of the empty barns left out of the matching.\n\n</p><p>Compute the number of maximal matchings mod $10^9 + 7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The second line contains $N$ space-separated integers $s_1,s_2,\\ldots,s_N$.\n\n</p><p>The third line contains $N$ space-separated integers $t_1,t_2,\\ldots,t_N$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of maximal matchings mod $10^9 + 7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 2 3 4\n1 2 2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>Here is a list of all nine maximal matchings. An ordered pair $(i,j)$ means that\ncow $i$ is assigned to barn $j$.\n\n</p><p></p><pre>(1, 1), (2, 2), (3, 4)\n(1, 1), (2, 3), (3, 4)\n(1, 1), (2, 4)\n(1, 2), (2, 3), (3, 4)\n(1, 2), (2, 4)\n(1, 3), (2, 2), (3, 4)\n(1, 3), (2, 4)\n(1, 4), (2, 2)\n(1, 4), (2, 3)\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 2-3, $N\\le 8$.</li><li>In test cases 4-12, $N\\le 50$.</li><li>In test cases 13-20, there are no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1068"
    },
    {
      "title": "Problem 2. Spaceship",
      "subtitle": "USACO 2020 December Contest, Platinum",
      "id": 1069,
      "year": "2020",
      "division": "platinum",
      "number": "2",
      "problem": "Bessie the cow has been abducted by aliens and is now trapped inside an alien\nspaceship! The spaceship has $N$ $(1\\le N\\le 60)$ rooms labeled $1\\ldots N$, with\none-way doors connecting between some pairs of rooms (due to the strange alien\ntechnology at play, it is even possible for a door to lead from a room back to\nitself!). However, no two doors share the same starting and end room.\nAdditionally, Bessie has a remote with buttons numbered $1\\ldots K$\n$(1 \\le K \\le 60)$.\n\n<p>The aliens will release Bessie if she can complete a strange task. First, they\nwill choose two rooms, $s$ and $t$ $(1 \\le s, t \\le N)$, and two numbers, $b_s$\nand $b_t$ $(1 \\le b_s, b_t \\le K)$. They will start Bessie in room $s$ and\nimmediately have her press button $b_s$. Bessie will then proceed to navigate\nthe ship while pressing buttons. There are a few rules for what Bessie can do:\n\n</p><p></p><ul><li>In each room, after pressing exactly one button, she must choose to either\nexit through a door to another (possibly the same) room or stop.</li><li>Once\nBessie presses a button, it is invalid for her to press the same button again\nunless, in the time between uses, she has pressed a button with a higher number.\nIn other words, pressing button number $x$ will make it unavailable for use, \nwhile all buttons with numbers $&lt;x$ will be reset and again available for\nuse.</li><li>If Bessie presses an invalid button, she automatically fails and the aliens\nwill keep her.\n</li></ul>\n\n<p>Bessie is released only if she stops in room $t$, the last button she pressed\nwas $b_t$, and no invalid buttons were ever pressed.\n\n</p><p>Bessie is worried that she may not be able to complete the task. For $Q$\n$(1\\le Q\\le 60)$ queries, each consisting of what Bessie considers a likely\nchoice of $s, t, b_s$, and $b_t$, Bessie wants to know the number of sequences\nof rooms and button presses that would lead to her release. Report your answers\nmodulo $10^9 + 7$ as they may be very large.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N,K,Q$.\n\n<p>The next $N$ lines each contain $N$ bits (each 0 or 1). The $j$-th entry of the\n$i$-th line is 1 if there exists a door from room $i$ to room $j$, and 0 if no\nsuch door exists.\n\n</p><p>This is followed by $Q$ lines, each containing four integers $b_s$, $s$, $b_t$,\n$t$, denoting the starting button, starting room, final button, and final room\nrespectively.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of sequences for each of the $Q$ queries modulo $10^9+7$ on separate\nlines.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 3 8\n010000\n001000\n000100\n000010\n000000\n000001\n1 1 1 1\n3 3 1 1\n1 1 3 3\n1 1 1 5\n2 1 1 5\n1 1 2 5\n3 1 3 5\n2 6 2 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n0\n1\n3\n2\n2\n0\n5\n</pre>\n\n<p>The doors connect rooms $1\\to 2$, $2 \\to 3$, $3\\to 4$, $4\\to 5$, and $6\\to 6$.\n\n</p><p>For the first query, Bessie must stop immediately after pressing the first\nbutton.\n\n</p><p>For the second query, the answer is clearly zero because there is no way to get\nto room 1 from room 3.\n\n</p><p>For the third query, Bessie's only option is to move from room 1 to room 2 to\nroom 3 while pressing buttons 1, 2, and 3.\n\n</p><p>For the fourth query, Bessie's pattern of movement is fixed, and she has three\npossible sequences of button presses:\n\n</p><p></p><ul><li>$(1,2,3,2,1)$</li><li>$(1,2,1,3,1)$</li><li>$(1,3,1,2,1)$</li></ul>\n\n<p>For the last query, Bessie has five possible sequences of button presses:\n\n</p><p></p><ul><li>$(2)$</li><li>$(2,3,2)$</li><li>$(2,3,1,2)$</li><li>$(2,1,3,2)$</li><li>$(2,1,3,1,2)$</li></ul>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 4 6\n001100\n001110\n101101\n010111\n110111\n000111\n3 2 4 3\n3 1 4 4\n3 4 4 1\n3 3 4 3\n3 6 4 3\n3 1 4 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">26\n49\n29\n27\n18\n22\n</pre>\n\n<p>This test case satisfies the constraints for all subtasks aside from the first.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 10 5\n110101\n011001\n001111\n101111\n111010\n000001\n2 5 2 5\n6 1 5 2\n3 4 8 3\n9 3 3 5\n5 1 3 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">713313311\n716721076\n782223918\n335511486\n539247783\n</pre>\n\n<p>Make sure to output the answers modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 4-7, $K\\le 5$ and $(b_s,s)$ is the same for all queries.</li><li>In test cases 8-11, $b_s=K-1$ and $b_t=K$ for each query.</li><li>In test cases 12-15, $N,K,Q\\le 20$.</li><li>In test cases 16-23, there are no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1069"
    },
    {
      "title": "Problem 3. Cowmistry",
      "subtitle": "USACO 2020 December Contest, Platinum",
      "id": 1070,
      "year": "2020",
      "division": "platinum",
      "number": "3",
      "problem": "Bessie has been procrastinating on her cow-mistry homework and now needs your\nhelp! She needs to create a mixture of three different cow-michals. As all good\ncows know though, some cow-michals cannot be mixed with each other or else they\nwill cause an explosion. In particular, two cow-michals with labels $a$ and $b$\ncan only be present in the same mixture if $a \\oplus b \\le K$\n($1 \\le K \\le 10^9$).\n\n<p>NOTE: Here, $a\\oplus b$ denotes the \"bitwise exclusive or'' of non-negative\nintegers $a$ and $b$. This operation is equivalent to adding each corresponding\npair of bits in base 2 and discarding the carry. For example, \n</p><div class=\"math\">$$0\\oplus 0=1\\oplus 1=0,$$</div>\n<div class=\"math\">$$1\\oplus 0=0\\oplus 1=1,$$</div>\n<div class=\"math\">$$5\\oplus 7=101_2\\oplus 111_2=010_2=2.$$</div>\n\n<p>Bessie has $N$ ($1\\le N\\le 2\\cdot 10^4$) boxes of cow-michals and the $i$-th box contains cow-michals\nlabeled $l_i$ through $r_i$ inclusive $(0\\le l_i \\le r_i \\le 10^9)$. No two\nboxes have any cow-michals in common. She wants to know how many unique mixtures\nof three different cow-michals she can create. Two mixtures are considered\ndifferent if there is at least one cow-michal present in one but not the other.\nSince the answer may be very large, report it modulo $10^9 + 7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains two integers $N$ and $K$.\n\n<p>Each of the next $N$ lines contains two space-separated integers $l_i$ and\n$r_i$. It is guaranteed that the boxes of cow-michals are provided in increasing\norder of their contents; namely, $r_i&lt;l_{i+1}$ for each $1\\le i&lt;N$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of mixtures of three different cow-michals Bessie can create, modulo\n$10^9 + 7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 13\n0 199\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4280\n</pre>\n\n<p>We can split the chemicals into 13 groups that cannot cross-mix: $(0\\ldots 15)$,\n$(16\\ldots 31)$,  $\\ldots$ $(192\\ldots 199)$. Each of the first twelve groups\ncontributes $352$ unique mixtures and the last contributes $56$ (since all\n$\\binom{8}{3}$ combinations of three different cow-michals from\n$(192\\ldots 199)$ are okay), for a total of\n$352\\cdot 12+56=4280$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6 147\n1 35\n48 103\n125 127\n154 190\n195 235\n240 250\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">267188\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING</h4>\n\n<p></p><ul><li>Test cases 3-4 satisfy $\\max(K,r_N)\\le 10^4$. </li><li>Test cases 5-6 satisfy $K=2^k-1$ for some integer $k\\ge 1$.</li><li>Test cases 7-11 satisfy $\\max(K,r_N)\\le 10^6$.</li><li>Test cases 12-16 satisfy $N\\le 20$.</li><li>Test cases 17-21 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1070"
    },
    {
      "title": "Problem 1. Sum of Distances",
      "subtitle": "USACO 2021 January Contest, Platinum",
      "id": 1092,
      "year": "2021",
      "division": "platinum",
      "number": "1",
      "problem": "Bessie has a collection of connected, undirected graphs $G_1,G_2,\\ldots,G_K$\n($2\\le K\\le 5\\cdot 10^4$). For each  $1\\le i\\le K$, $G_i$ has exactly $N_i$\n($N_i\\ge 2$) vertices labeled $1\\ldots N_i$ and $M_i$ ($M_i\\ge N_i-1$) edges.\nEach $G_i$ may contain self-loops, but not multiple edges between the same pair\nof vertices.\n\n<p>Now Elsie creates a new undirected graph $G$ with $N_1\\cdot N_2\\cdots N_K$\nvertices, each labeled by a $K$-tuple $(j_1,j_2,\\ldots,j_K)$ where\n$1\\le j_i\\le N_i$. In $G$, two vertices $(j_1,j_2,\\ldots,j_K)$ and\n$(k_1,k_2,\\ldots,k_K)$ are connected by an edge if for all $1\\le i\\le K$, $j_i$\nand $k_i$ are connected by an edge in\n$G_i$.\n\n</p><p>Define the <em>distance</em> between two vertices in $G$ that lie in the same\nconnected  component to be the minimum number of edges along a path from one\nvertex to the other. Compute the sum of the distances between vertex\n$(1,1,\\ldots,1)$ and every vertex in the same component as it in $G$, modulo\n$10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $K$, the number of graphs.\n\n<p>Each graph description starts with $N_i$ and $M_i$ on a single line, followed by\n$M_i$ edges.\n\n</p><p>Consecutive graphs are separated by newlines for readability. It is guaranteed\nthat $\\sum N_i\\le 10^5$ and $\\sum M_i\\le 2\\cdot 10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe sum of the distances between vertex $(1,1,\\ldots,1)$ and every vertex that\nis reachable from it, modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n\n2 1\n1 2\n\n4 4\n1 2\n2 3\n3 4\n4 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>$G$ contains $2\\cdot 4=8$ vertices, $4$ of which are not connected to vertex\n$(1,1)$.  There are $2$ vertices that are distance $1$ away from $(1,1)$ and $1$\nthat is distance $2$ away. So the answer is $2\\cdot 1+1\\cdot 2=4$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n\n4 4\n1 2\n2 3\n3 1\n3 4\n\n6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n\n7 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">706\n</pre>\n\n<p>$G$ contains $4\\cdot 6\\cdot 7=168$ vertices, all of which are connected to\nvertex $(1,1,1)$.  The number of vertices that are distance $i$ away from\n$(1,1,1)$ for each $i\\in [1,7]$ is given by the $i$-th element of the following\narray:\n$[4,23,28,36,40,24,12]$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 3-4 satisfy $\\prod N_i\\le 300$.</li><li>Test cases 5-10 satisfy $\\sum N_i\\le 300$.</li><li>Test cases 11-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1092"
    },
    {
      "title": "Problem 2. Minimum Cost Paths",
      "subtitle": "USACO 2021 January Contest, Platinum",
      "id": 1093,
      "year": "2021",
      "division": "platinum",
      "number": "2",
      "problem": "Farmer John's pasture can be regarded as an $N\\times M$ ($2\\le N\\le 10^9$,\n$2\\le M\\le 2\\cdot 10^5$) 2D grid of square \"cells\" (picture a huge chessboard).\nThe cell at the $x$-th row from the top and $y$-th column from the right is\ndenoted by $(x,y)$ for each $x\\in [1,N], y\\in [1,M]$. Furthermore, for each\n$y\\in [1,M]$, the $y$-th column is associated with the cost $c_y$\n($1\\le c_y\\le 10^9$).\n\n<p>Bessie starts at the cell $(1,1)$. If she is currently located at the cell\n$(x,y)$, then she may perform one of the following actions:\n\n</p><p></p><ul><li>If $y&lt;M$, Bessie may move to the next column (increasing $y$ by one) for a\ncost of $x^2$.</li><li>If $x&lt;N$, Bessie may move to the next row (increasing $x$ by one) for a cost\nof\n$c_y$.</li></ul>\n\n<p>Given $Q$ ($1\\le Q\\le 2\\cdot 10^5$) independent queries each of the form\n$(x_i,y_i)$ ($x_i\\in [1,N], y_i\\in [1,M]$), compute the minimum possible total\ncost for Bessie to move from $(1,1)$ to $(x_i,y_i)$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $M$.\n\n<p>The second line contains $M$ space-separated integers $c_1,c_2,\\ldots,c_M$.\n\n</p><p>The third line contains $Q$.\n\n</p><p>The last $Q$ lines each contain two space-separated integers $x_i$ and $y_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n$Q$ lines, containing the answers for each query.\n\n<p>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 4\n1 100 100 20\n20\n1 1\n2 1\n3 1\n4 1\n5 1\n1 2\n2 2\n3 2\n4 2\n5 2\n1 3\n2 3\n3 3\n4 3\n5 3\n1 4\n2 4\n3 4\n4 4\n5 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n1\n2\n3\n4\n1\n5\n11\n19\n29\n2\n9\n20\n35\n54\n3\n13\n29\n49\n69\n</pre>\n\n<p>The output in grid format:\n\n</p><p></p><pre>    1  2  3  4\n  *--*--*--*--*\n1 | 0| 1| 2| 3|\n  *--*--*--*--*\n2 | 1| 5| 9|13|\n  *--*--*--*--*\n3 | 2|11|20|29|\n  *--*--*--*--*\n4 | 3|19|35|49|\n  *--*--*--*--*\n5 | 4|29|54|69|\n  *--*--*--*--*\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-3 satisfy $N,M\\le 2000$.</li><li>Test cases 4-8 satisfy $c_2&gt;c_3&gt;\\cdots&gt;c_M$.</li><li>Test cases 9-15 satisfy $N\\le 2\\cdot 10^5$.</li><li>Test cases 16-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1093"
    },
    {
      "title": "Problem 3. Paint by Letters",
      "subtitle": "USACO 2021 January Contest, Platinum",
      "id": 1094,
      "year": "2021",
      "division": "platinum",
      "number": "3",
      "problem": "Bessie has recently received a painting set. The canvas can be represented as an\n$N \\times M$ rectangle of cells where the rows are labeled $1\\ldots N$ from top\nto bottom and the columns are labeled $1\\ldots M$ from left to right\n($1\\le N,M\\le 1000$). Once painted, the color of a cell can be represented by an\nuppercase letter from 'A' to 'Z.'  Initially, all cells are uncolored, and a\ncell cannot be painted more than once.\n\n<p>Bessie has specified the color that she desires for each cell. She can paint a\nset of cells with a single color in one stroke if the set forms a connected\ncomponent, meaning that any cell in the set can reach any other via a sequence\nof adjacent cells. Two cells are considered to be adjacent if they share an\nedge.\n\n</p><p>For example, the $3\\times 3$ canvas \n\n</p><p></p><pre>AAB\nBBA\nBBB\n</pre>\n\n<p>can be colored in four strokes as follows:\n\n</p><p></p><pre>...    ..B    AAB    AAB    AAB\n... -&gt; ... -&gt; ... -&gt; BB. -&gt; BBA\n...    ...    ...    BBB    BBB\n</pre>\n\n<p>It is not possible to produce the end result using less than four strokes.\n\n</p><p>Being an avant-garde artist, Bessie will end up painting only a subrectangle of\nthe canvas. Currently, she is considering $Q$ candidates ($1\\le Q\\le 1000$),\neach of which can be represented by four integers $x_1$, $y_1$, $x_2$, and\n$y_2.$ This means that the subrectangle consists of all cells with row in the\nrange $x_1$ to $x_2$ inclusive and column in the range $y_1$ to $y_2$ inclusive.\n\n</p><p>For each candidate subrectangle, what is the minimum number of strokes needed to\npaint each cell in the subrectangle with its desired color while leaving all \ncells outside the subrectangle uncolored? Note that Bessie does not actually do\nany painting during this process, so the answers for each candidate are\nindependent. \n\n</p><p>Note: The time limit for this problem is 50 percent higher than the default,\nand the memory limit is 512MB, twice the default.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$, $M$, and $Q$.\n\n<p>The next $N$ lines each contain a string of $M$ uppercase characters\nrepresenting the desired colors for each row of the canvas.\n\n</p><p>The next $Q$ lines each contain four space-separated integers $x_1,y_1,x_2,y_2$\nrepresenting a candidate subrectangle ($1\\le x_1\\le x_2\\le N$,\n$1\\le y_1\\le y_2\\le M$).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each of the $Q$ candidates, output the answer on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 8 9\nABBAAAAA\nABAAAABA\nCAADABBA\nAAAAAAAA\n1 1 4 8\n3 5 3 8\n1 3 2 4\n1 4 2 5\n1 1 3 3\n4 4 4 4\n2 6 4 8\n3 5 4 6\n1 6 3 8\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n3\n2\n1\n4\n1\n3\n2\n2\n</pre>\n\n<p>The first candidate consists of the entire canvas, which can be painted in six\nstrokes.\n\n</p><p>The second candidate consists of the subrectangle with desired colors\n\n</p><p></p><pre>ABBA\n</pre>\n\n<p>and can be colored in three strokes. Note that although the cells at $(3,5)$ and\n$(3,8)$ can be colored with $A$ in a single stroke if you consider the entire\ncanvas, this is not the case when considering only the cells within the\nsubrectangle.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-2 satisfy $N,M\\le 50$.</li><li>In test cases 3-5, the canvas contains no cycles of a single color. That is,\nthere does not exist a sequence of distinct cells $c_1,c_2,c_3,\\ldots,c_k$  such\nthat all of the following conditions are satisfied:\n\n<p></p><ul><li>$k&gt;2$</li><li>All of $c_1,\\ldots,c_k$ have the same desired color.</li><li>$c_i$ is adjacent to $c_{i+1}$ for each $1\\le i&lt;k$.</li><li>$c_k$ is adjacent to $c_1$.</li></ul>\n\n<p>Note that the $3\\times 3$ canvas above contains a cycle of a single color (the\nfour Bs in the bottom-left corner).</p></li><li>In test cases 6-8, every connected component consisting of cells with the\nsame desired color can be contained within a two by two square with sides\nparallel to the coordinate axes. The $3\\times 3$ canvas above does not satisfy\nthis property (the connected component with five Bs cannot be contained within a\ntwo by two square).</li><li>In test cases 9-11, every connected component consisting of cells with the\nsame desired color can be contained within a three by three square with sides\nparallel to the coordinate axes. The $3\\times 3$ canvas above satisfies this\nproperty.</li><li>Test cases 12-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Andi Qu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1094"
    },
    {
      "title": "Problem 1. No Time to Dry",
      "subtitle": "USACO 2021 February Contest, Platinum",
      "id": 1116,
      "year": "2021",
      "division": "platinum",
      "number": "1",
      "problem": "Bessie has recently received a painting set, and she wants to paint the long\nfence at one end of her pasture.  The fence consists of $N$ consecutive 1-meter \nsegments ($1\\le N\\le 2\\cdot 10^5$).  Bessie has $N$ different colors available,\nwhich she labels with the letters $1$ through $N$ in increasing order of\ndarkness ($1$ is a very light color, and $N$ is very dark).  She can therefore\ndescribe the desired color she wants to paint each fence segment as an array of\n$N$ integers.\n\n<p>Initially, all fence segments are uncolored.  Bessie can color any  contiguous\nrange of segments with a single color in a single brush stroke as long as she\nnever paints a lighter color over a darker color (she can only paint darker\ncolors over lighter colors).  \n\n</p><p>For example, an initially uncolored segment of length four can be colored as\nfollows:\n\n</p><p></p><pre>0000 -&gt; 1110 -&gt; 1122 -&gt; 1332\n</pre>\n\n<p>Unfortunately, Bessie doesn't have time to waste watching paint dry. Thus, Bessie thinks she may need to leave some fence segments\nunpainted! Currently, she is considering $Q$  candidate ranges\n($1\\le Q\\le 2\\cdot 10^5$), each described by two integers $(a,b)$ with\n$1 \\leq a \\leq b \\leq N$ giving the indices of  endpoints of the range\n$a \\ldots b$ of segments to be painted.\n\n</p><p>For each candidate range, what is the minimum number of strokes needed to paint\nevery fence segment inside the range with its desired color while  leaving all\nfence segments outside the range uncolored?  Note that Bessie does not actually\ndo any painting during this process, so the answers for each candidate range are\nindependent. \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $Q$.\n\n<p>The next line contains an array of $N$ integers representing the desired color \nfor each fence segment.\n\n</p><p>The next $Q$ lines each contain two space-separated integers $a$ and $b$\nrepresenting a candidate range to possibly paint.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each of the $Q$ candidates, output the answer on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8 4\n1 2 2 1 1 2 3 2\n4 6\n3 6\n1 6\n5 8\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n3\n3\n3\n</pre>\n\n<p>In this example, the sub-range corresponding to the desired pattern  \n</p><pre>1 1 2 </pre>\n\n<p>requires two strokes to paint. The sub-range corresponding to the desired\npattern  \n\n</p><p></p><pre>2 1 1 2</pre>\n\n<p>requires three strokes to paint.  The sub-range corresponding to the desired\npattern\n\n</p><p></p><pre>1 2 2 1 1 2</pre>\n\n<p>requires three strokes to paint. The sub-range corresponding to the desired\npattern\n\n</p><p></p><pre>1 2 3 2</pre>\n\n<p>requires three strokes to paint.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 1-2 satisfy $N,Q\\le 100$.</li><li>Test cases 3-5 satisfy $N,Q\\le 5000$.</li><li>In test cases 6-10, the input array contains no integer greater than $10$.\n</li><li>Test cases 11-20 satisfy no additional constraints.</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Andi Qu, Brian Dean, and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1116"
    },
    {
      "title": "Problem 2. Minimizing Edges",
      "subtitle": "USACO 2021 February Contest, Platinum",
      "id": 1117,
      "year": "2021",
      "division": "platinum",
      "number": "2",
      "problem": "Bessie has a connected, undirected graph $G$ with $N$ vertices labeled\n$1\\ldots N$ and $M$ edges ($2\\le N\\le 10^5, N-1\\le M\\le \\frac{N^2+N}{2}$). $G$\nmay contain self-loops (edges from nodes back to themselves), but no parallel\nedges (multiple edges connecting the same endpoints).\n\n<p>Let $f_G(a,b)$ be a boolean function that evaluates to true if there exists a\npath from vertex $1$ to vertex $a$ that traverses exactly $b$ edges for each\n$1\\le a\\le N$ and $0\\le b$, and false otherwise. If an edge is traversed\nmultiple times, it is included that many times in the count.\n\n</p><p>Elsie wants to copy Bessie. In particular, she wants to construct an undirected\ngraph $G'$ such that $f_{G'}(a,b)=f_G(a,b)$ for all $a$ and $b$. \n\n</p><p>Elsie wants to do the least possible amount of work, so she wants to construct\nthe smallest possible graph. Therefore, your job is to compute the minimum\npossible number of edges in $G'$.\n\n</p><p>Each input contains $T$ ($1\\le T\\le 5\\cdot 10^4$) test cases that should be\nsolved independently. It is guaranteed that the sum of $N$ over all test cases\ndoes not exceed $10^5$, and the sum of $M$ over all test cases does not exceed\n$2\\cdot 10^5$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of the input contains $T$, the number of test cases.\n\n<p>The first line of each test case contains two integers $N$ and $M$.\n\n</p><p>The next $M$ lines of each test case each contain two integers $x$ and $y$\n($1\\le x\\le y\\le N$), denoting that there exists an edge between $x$ and $y$ in\n$G$.\n\n</p><p>Consecutive test cases are separated by newlines for readability. \n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, the minimum possible number of edges in $G'$ on a new line.\n\n<p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n\n5 5\n1 2\n2 3\n2 5\n1 4\n4 5\n\n5 5\n1 2\n2 3\n3 4\n4 5\n1 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n5\n</pre>\n\n<p>In the first test case, Elsie can construct $G'$ by starting with $G$ and\nremoving  $(2,5)$. Or she could construct a graph with the following edges,\nsince she isn't restricted to just removing edges from $G$:\n\n</p><p></p><pre>1 2\n1 4\n4 3\n4 5\n</pre>\n\n<p>Elsie definitely cannot do better than $N-1$ since $G'$ must also be connected.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n\n8 10\n1 2\n1 3\n1 4\n1 5\n2 6\n3 7\n4 8\n5 8\n6 7\n8 8\n\n10 11\n1 2\n1 5\n1 6\n2 3\n3 4\n4 5\n4 10\n6 7\n7 8\n8 9\n9 9\n\n13 15\n1 2\n1 5\n1 6\n2 3\n3 4\n4 5\n6 7\n7 8\n7 11\n8 9\n9 10\n10 11\n11 12\n11 13\n12 13\n\n16 18\n1 2\n1 7\n1 8\n2 3\n3 4\n4 5\n5 6\n6 7\n8 9\n9 10\n9 15\n9 16\n10 11\n11 12\n12 13\n13 14\n14 15\n14 16\n\n21 22\n1 2\n1 9\n1 12\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n7 11\n8 9\n8 10\n12 13\n13 14\n13 21\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n\n20 26\n1 2\n1 5\n1 6\n2 3\n3 4\n4 5\n4 7\n6 8\n8 9\n8 11\n8 12\n8 13\n8 14\n8 15\n8 16\n8 17\n9 10\n10 18\n11 18\n12 19\n13 20\n14 20\n15 20\n16 20\n17 20\n19 20\n\n24 31\n1 2\n1 7\n1 8\n2 3\n3 4\n4 5\n5 6\n6 7\n6 9\n8 10\n10 11\n10 16\n10 17\n10 18\n10 19\n10 20\n11 12\n12 13\n13 14\n14 15\n15 16\n15 17\n15 18\n15 19\n15 20\n15 21\n15 22\n15 23\n15 24\n21 22\n23 24\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n11\n15\n18\n22\n26\n31\n</pre>\n\n<p>In each of these test cases, Elsie cannot do better than Bessie.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>All test cases in input 3 satisfy $N\\le 5$.</li><li>All test cases in inputs 4-5 satisfy $M=N$.</li><li>For all test cases in inputs 6-9, if it is not the case that\n$f_G(x,b)=f_G(y,b)$ for all $b$, then there exists $b$ such that $f_G(x,b)$ is\ntrue and $f_G(y,b)$ is false.</li><li>All test cases in inputs 10-15 satisfy $N\\le 10^2$.</li><li>Test cases in inputs 16-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1117"
    },
    {
      "title": "Problem 3. Counting Graphs",
      "subtitle": "USACO 2021 February Contest, Platinum",
      "id": 1118,
      "year": "2021",
      "division": "platinum",
      "number": "3",
      "problem": "Bessie has a connected, undirected graph $G$ with $N$ vertices labeled\n$1\\ldots N$ and $M$ edges  ($2\\le N\\le 10^2, N-1\\le M\\le \\frac{N^2+N}{2}$). $G$\nmay contain self-loops (edges from nodes back to themselves), but no parallel\nedges (multiple edges connecting the same endpoints).\n\n<p>Let $f_G(a,b)$ be a boolean function that evaluates to true if there exists a\npath from vertex $1$ to vertex $a$ that traverses exactly $b$ edges for each\n$1\\le a\\le N$ and $0\\le b$, and false otherwise. If an edge is traversed\nmultiple times, it is included that many times in the count.\n\n</p><p>Elsie wants to copy Bessie. In particular, she wants to construct an undirected\ngraph $G'$ such that $f_{G'}(a,b)=f_G(a,b)$ for all $a$ and $b$.\n\n</p><p>Your job is to count the number of distinct graphs $G'$ that Elsie may create,\nmodulo $10^9+7$. As with $G$, $G'$ may contain self-loops but no parallel edges\n(meaning that there are $2^{\\frac{N^2+N}{2}}$ distinct graphs on $N$ labeled\nvertices in total).\n\n</p><p>Each input contains $T$ ($1\\le T\\le \\frac{10^5}{4}$) test cases that should be\nsolved independently. It is guaranteed that the sum of $N^2$ over all test cases\ndoes not exceed $10^5$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of the input contains $T$, the number of test cases.\n\n<p>The first line of each test case contains the integers $N$ and $M$. \n\n</p><p>The next $M$ lines of each test case each contain two integers $x$ and $y$\n($1\\le x\\le y\\le N$), denoting that there exists an edge between $x$ and $y$ in\n$G$.\n\n</p><p>Consecutive test cases are separated by newlines for readability. \n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, the number of distinct $G'$ modulo $10^9+7$ on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1\n\n5 4\n1 2\n2 3\n1 4\n3 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>In the first test case, $G'$ could equal $G$ or one of the two following graphs:\n\n</p><p></p><pre>5 4\n1 2\n1 4\n3 4\n3 5\n</pre>\n\n<p></p><pre>5 5\n1 2\n2 3\n1 4\n3 4\n3 5\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n\n4 6\n1 2\n2 3\n3 4\n1 3\n2 4\n1 4\n\n5 5\n1 2\n2 3\n3 4\n4 5\n1 5\n\n5 7\n1 2\n1 3\n1 5\n2 4\n3 3\n3 4\n4 5\n\n6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 6\n\n6 7\n1 2\n2 3\n1 3\n1 4\n4 5\n5 6\n1 6\n\n10 10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n22 28\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n1 7\n1 8\n3 9\n8 10\n10 11\n10 12\n10 13\n10 14\n11 15\n12 16\n13 17\n14 18\n9 15\n9 16\n9 17\n9 18\n15 19\n19 20\n15 20\n16 21\n21 22\n16 22\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">45\n35\n11\n1\n15\n371842544\n256838540\n</pre>\n\n<p>These are some larger test cases. Make sure to output the answer modulo\n$10^9+7$. Note that the answer for the second-to-last test case is\n$2^{45}\\pmod{10^9+7}$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>All test cases in input 3 satisfy $N\\le 5$.</li><li>All test cases in inputs 4-5 satisfy $M=N-1$.</li><li>For all test cases in inputs 6-11, if it is not the case that\n$f_G(x,b)=f_G(y,b)$ for all $b$, then there exists $b$ such that $f_G(x,b)$ is\ntrue and $f_G(y,b)$ is false.\n</li><li>Test cases in inputs 12-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1118"
    },
    {
      "title": "Problem 1. United Cows of Farmer John",
      "subtitle": "USACO 2021 US Open, Platinum",
      "id": 1140,
      "year": "2021",
      "division": "platinum",
      "number": "1",
      "problem": "The United Cows of Farmer John (UCFJ) are sending a delegation to the\nInternational bOvine olympIad (IOI).\n\n<p>There are $N$ cows participating in delegation selection\n($1 \\leq N \\leq 2 \\cdot 10^5$). They are standing in a line, and cow $i$ has\nbreed $b_i$.\n\n</p><p>The delegation will consist of a contiguous interval of at least three cows -\nthat is, cows  $l\\ldots r$ for integers $l$ and $r$ satisfying $1\\le l&lt;r\\le N$\nand $r-l\\ge 2$. Three of the cows in the chosen interval are marked as\ndelegation leaders. For legal reasons, the two outermost cows of the chosen\ninterval must be leaders. Moreover, to avoid intra-breed conflict, every leader\nmust be of a different breed from the rest of the delegation (leaders or not).\n\n</p><p>Help the UCFJ determine (for tax reasons) the number of ways they might choose a\ndelegation to send to the IOI. Two delegations are considered different if they\nhave different members or different leaders.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The second line contains $N$ integers $b_1,b_2,\\ldots,b_N$, each in the range\n$[1,N]$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of possible delegations, on a single line.\n\n<p><strong>Note that the large size of integers involved in this problem may require the\nuse of 64-bit integer data types (e.g., a \"long long\" in C/C++).</strong>\n</p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n1 2 3 4 3 2 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>Each delegation corresponds to one of the following triples of leaders:\n\n</p><p></p><div class=\"math\">$$(1,2,3),(1,2,4),(1,3,4),(1,4,7),(2,3,4),(4,5,6),(4,5,7),(4,6,7),(5,6,7).$$</div>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-2 satisfy $N\\le 50$.</li><li>Test cases 3-4 satisfy $N\\le 500$.</li><li>Test cases 5-8 satisfy $N\\le 5000$.</li><li>Test cases 9-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1140"
    },
    {
      "title": "Problem 2. Routing Schemes",
      "subtitle": "USACO 2021 US Open, Platinum",
      "id": 1141,
      "year": "2021",
      "division": "platinum",
      "number": "2",
      "problem": "Consider a network of $N$ ($2\\le N\\le 100$) nodes labeled $1\\ldots N$. Each node\nis designated as a sender, a receiver, or neither. The number of senders, $S$,\nis equal to the number of receivers ($S\\ge 1$). \n\n<p>The connections between the nodes in this network can be described by a list of\ndirected edges each of the form $i\\to j$, meaning that node $i$ may route to\nnode $j$. Interestingly, all of these edges satisfy the property that $i&lt;j$,\naside from $K$ that satisfy $i&gt;j$ ($0\\le K\\le 2$). There are no self-loops\n(edges of the form $i\\to i$).\n\n</p><p>The description of a \"routing scheme\" consists of a set of $S$ directed paths\nfrom senders to receivers such that no two of these paths share an endpoint.\nThat is, the paths connect distinct senders to distinct receivers. A path from a\nsender $s$ to a receiver $r$ can be described as a sequence of nodes\n</p><div class=\"math\">$$s=v_0\\to v_1 \\to v_2\\to \\cdots \\to v_e=r$$</div>\nsuch that the directed edges $v_i\\to v_{i+1}$ exist for all $0\\le i&lt;e$. A node\nmay appear more than once within the same path.\n\n<p>Count the number of distinct routing schemes such that every directed edge is\ntraversed exactly once. Since the answer may be very large, report it modulo\n$10^9+7$. It is guaranteed that there is at least\none routing scheme satisfying these constraints.\n\n</p><p>Each input contains $T$ ($1\\le T\\le 20$) test cases that should be solved\nindependently. It is guaranteed that the sum of $N^2$ over all test cases does\nnot exceed $2\\cdot 10^4$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of the input contains $T$, the number of test cases.\n\n<p>The first line of each test case contains the integers $N$ and $K$. Note that\n$S$  is not explicitly given within the input.\n\n</p><p>The second line of each test case contains a string of length $N$. The $i$-th\ncharacter of the string  is equal to S if the $i$-th node is a sender, R if the\n$i$-th node is a receiver, or . if the $i$-th node is neither. The number of Rs\nin this string is equal to the number of Ss, and there is at least one S.\n\n</p><p>The next $N$ lines of each test case each contain a bit string of $N$ zeros and\nones. The $j$-th bit of the $i$-th line is equal to $1$ if there exists a\ndirected edge from node $i$  to node $j$, and $0$ otherwise. As there are no\nself-loops, the main diagonal of the matrix consists solely of zeros.\nFurthermore, there are exactly $K$ ones below the main diagonal. \n\n</p><p>Consecutive test cases are separated by newlines for readability.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, the number of routing schemes such that every edge is\ntraversed exactly once, modulo $10^9+7$. It is guaranteed that there is at least\none valid routing scheme for each test case.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n\n8 0\nSS....RR\n00100000\n00100000\n00011000\n00000100\n00000100\n00000011\n00000000\n00000000\n\n13 0\nSSS.RRRSS.RR.\n0001000000000\n0001000000000\n0001000000000\n0000111000000\n0000000000000\n0000000000000\n0000000000000\n0000000001000\n0000000001000\n0000000000110\n0000000000000\n0000000000000\n0000000000000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n12\n</pre>\n\n<p>For the first test case, the edges are\n$1\\to 3, 2\\to 3, 3\\to 4, 3\\to 5, 4\\to 6, 5\\to 6, 6\\to 7, 6\\to 8$.\n\n</p><p>There are four possible routing schemes:\n\n</p><p></p><ul><li>$1\\to 3\\to 4\\to 6\\to 7, 2\\to 3\\to 5\\to 6\\to 8$</li><li>$1\\to 3\\to 5\\to 6\\to 7, 2\\to 3\\to 4\\to 6\\to 8$</li><li>$1\\to 3\\to 4\\to 6\\to 8, 2\\to 3\\to 5\\to 6\\to 7$</li><li>$1\\to 3\\to 5\\to 6\\to 8, 2\\to 3\\to 4\\to 6\\to 7$</li></ul>\n\n<p>For the second test case, the edges are\n$1\\to 4, 2\\to 4, 3\\to 4, 4\\to 5,4\\to 6,4\\to 7, 8\\to 10, 9\\to 10, 10\\to 11, 10\\to 12$.\n\n</p><p>One possible routing scheme consists of the following paths:\n\n</p><p></p><ul><li>$1\\to 4\\to 5$</li><li>$2\\to 4\\to 7$</li><li>$3\\to 4\\to 6$</li><li>$8\\to 10\\to 12$</li><li>$9\\to 10\\to 11$</li></ul>\n\n<p>In general, senders $\\{1,2,3\\}$ can route to some permutation of receivers\n$\\{5,6,7\\}$ and senders $\\{8,9\\}$ can route to some permutation of receivers\n$\\{11,12\\}$, giving an answer of $6\\cdot 2=12$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n\n5 1\nSS.RR\n00101\n00100\n10010\n00000\n00000\n\n6 2\nS....R\n001000\n000100\n010001\n000010\n001000\n000000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n1\n</pre>\n\n<p>For the first test case, the edges are $1\\to 3, 1\\to 5, 2\\to 3, 3\\to 1, 3\\to 4$.\n\n</p><p>There are three possible routing schemes:\n\n</p><p></p><ul><li>$1\\to 3\\to 1\\to 5$, $2\\to 3\\to 4$</li><li>$1\\to 3\\to 4$,\n$2\\to 3\\to 1\\to 5$</li><li>$1\\to 5$, $2\\to 3\\to 1\\to 3\\to 4$</li></ul>\n\n<p>For the second test case, the edges are\n$1\\to 3, 2\\to 4, 3\\to 2,3\\to 6, 4\\to 5, 5\\to 3$.\n\n</p><p>There is only one possible routing scheme:\n$1\\to 3\\to 2\\to 4\\to 5\\to 3\\to 6$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n\n3 2\nRS.\n010\n101\n100\n\n4 2\n.R.S\n0100\n0010\n1000\n0100\n\n4 2\n.SR.\n0000\n0011\n0100\n0010\n\n5 2\n.SSRR\n01000\n10101\n01010\n00000\n00000\n\n6 2\nSS..RR\n001010\n000010\n000010\n000010\n100101\n000000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n1\n2\n6\n24\n</pre>\n\n<p>Some additional small test cases.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 4-5 satisfy $N\\le 6$.</li><li>Test cases 6-7 satisfy $K=0$.</li><li>Test cases 8-12 satisfy $K=1$.</li><li>Test cases 13-24 satisfy $K=2$.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1141"
    },
    {
      "title": "Problem 3. Balanced Subsets",
      "subtitle": "USACO 2021 US Open, Platinum",
      "id": 1142,
      "year": "2021",
      "division": "platinum",
      "number": "3",
      "problem": "Farmer John's pasture can be regarded as a large 2D grid of square \"cells\"\n(picture a huge chessboard) labeled by the ordered pairs $(i,j)$ for each\n$1\\le i\\le N$, $1\\le j\\le N$ ($1\\le N\\le 150$). Some of the cells contain grass.\n\n<p>A nonempty subset of grid cells is called \"balanced\" if the following conditions\nhold:\n\n</p><p></p><ol><li>All cells in the subset contain grass.</li><li>The subset is 4-connected. In other words, there exists a path from any cell\nin the subset to any other cell in the subset such that every two consecutive\ncells of the path are horizontally or vertically adjacent.</li><li>If cells  $(x_1,y)$ and $(x_2,y)$ ($x_1\\le x_2$) are part of the subset,\nthen all cells $(x,y)$ with $x_1\\le x\\le x_2$ are also part of the subset.</li><li>If cells $(x,y_1)$ and $(x,y_2)$ ($y_1\\le y_2$) are part of the subset, then\nall cells $(x,y)$ with $y_1\\le y\\le y_2$ are also part of the subset.</li></ol>\n\n<p>Count the number of balanced subsets modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The next $N$ lines each contain a string of $N$ characters. The $j$-th character\nof the $i$-th line from the top is equal to G if the cell at $(i,j)$ contains\ngrass, or . otherwise.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of balanced subsets modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\nGG\nGG\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">13\n</pre>\n\n<p>For this test case, all 4-connected subsets are balanced.\n\n</p><p></p><pre>G.  .G  ..  ..  GG  .G  ..  G.  GG  .G  G.  GG  GG\n.., .., G., .G, .., .G, GG, G., G., GG, GG, .G, GG\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\nGGGG\nGGGG\nGG.G\nGGGG\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">642\n</pre>\n\n<p>Here is an example of a subset that satisfies the second condition (it is\n4-connected) but does not satisfy the third condition:\n\n</p><p></p><pre>GG..\n.G..\nGG..\n....\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-4 satisfy $N\\le 4$.</li><li>Test cases 5-10 satisfy $N\\le 20$.</li><li>Test cases 11-20 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1142"
    },
    {
      "title": "Problem 1. Tickets",
      "subtitle": "USACO 2021 December Contest, Platinum",
      "id": 1164,
      "year": "2021",
      "division": "platinum",
      "number": "1",
      "problem": "Bessie is going on a hiking excursion! The trail that she is currently\ntraversing  consists of $N$ checkpoints labeled $1\\ldots N$\n($1\\le N\\le 10^5$).\n\n<p>There are $K$ ($1\\le K\\le 10^5$) tickets available for purchase. The $i$-th\nticket can be purchased at checkpoint $c_i$ ($1\\le c_i\\le N$) for price $p_i$\n($1\\le p_i\\le 10^9$) and provides access to all of checkpoints $[a_i,b_i]$\n($1\\le a_i\\le b_i\\le N$).  Before entering any checkpoint, Bessie must have\npurchased a ticket that allows access to that checkpoint. Once Bessie has access\nto a checkpoint, she may return to it at any point in the future.  She may\ntravel between two checkpoints to which she has access, regardless of whether\ntheir labels differ by 1 or not.\n\n</p><p>For each of $i\\in [1,N]$, output the minimum total price required to purchase\naccess to both checkpoints $1$ and $N$ if Bessie initially has access to only\ncheckpoint $i$. If it is impossible to do so, print $-1$ instead.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $K$.\n\n<p>Each of the next $K$ lines contains four integers $c_i$, $p_i$, $a_i$, and $b_i$\nfor each $1\\le i\\le K$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n$N$ lines, one for each checkpoint.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 6\n4 1 2 3\n4 10 5 6\n2 100 7 7\n6 1000 1 1\n5 10000 1 4\n6 100000 5 6\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">-1\n-1\n-1\n1111\n10100\n110100\n-1\n</pre>\n\n<p>If Bessie starts at checkpoint $i=4$, then one way for Bessie to purchase access\nto checkpoints $1$ and $N$ is as follows:\n\n</p><p></p><ol><li>Purchase the first ticket at checkpoint $4$, giving Bessie access to\ncheckpoints $2$ and $3$.</li><li>Purchase the third ticket at checkpoint $2$, giving Bessie access to\ncheckpoint $7$.</li><li>Return to checkpoint $4$ and purchase the second ticket, giving Bessie\naccess to checkpoints $5$ and $6$.</li><li>Purchase the fourth ticket at checkpoint $6$, giving Bessie access to\ncheckpoint $1$.</li></ol>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 1-7 satisfy $N,K\\le 1000$.</li><li>Test cases 8-19 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1164"
    },
    {
      "title": "Problem 2. Paired Up",
      "subtitle": "USACO 2021 December Contest, Platinum",
      "id": 1165,
      "year": "2021",
      "division": "platinum",
      "number": "2",
      "problem": "There are a total of $N$ ($1\\le N\\le 5000$) cows on the number line, each of\nwhich is a  Holstein or a Guernsey. The breed of the $i$-th cow is given by\n$b_i\\in \\{H,G\\}$, the location of the $i$-th cow is given by $x_i$\n($0 \\leq x_i \\leq 10^9$), and the weight of the  $i$-th cow is given by\n$y_i$ ($1 \\leq y_i \\leq 10^5$).\n\n<p>At Farmer John's signal, some of the cows will form pairs such that \n\n</p><p></p><ul><li>Every pair consists of a Holstein $h$ and a Guernsey $g$ whose locations are\nwithin $K$ of each other ($1\\le K\\le 10^9$); that is, $|x_h-x_g|\\le K$.</li><li>Every cow is either part of a single pair or not part of a pair.</li><li>The pairing is <em>maximal;</em> that is, no two unpaired cows can form a\npair.</li></ul>\n\n<p>It's up to you to determine the range of possible sums of weights of the\nunpaired cows. Specifically,\n\n</p><p></p><ul><li>If $T=1$, compute the minimum possible sum of weights of the unpaired\ncows.</li><li>If $T=2$, compute the maximum possible sum of weights of the\nunpaired cows.</li></ul>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first input line contains $T$, $N$, and $K$.\n\n<p>Following this are $N$ lines, the $i$-th of which contains $b_i,x_i,y_i$. It is\nguaranteed that $0\\le x_1&lt; x_2&lt; \\cdots&lt; x_N\\le 10^9$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe minimum or maximum possible sum of weights of the unpaired cows.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 5 4\nG 1 1\nH 3 4\nG 4 2\nH 6 6\nH 8 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">16\n</pre>\n\n<p>Cows $2$ and $3$ can pair up because they are at distance $1$, which is at most\n$K = 4$. This pairing is maximal, because cow $1$, the only remaining Guernsey,\nis at distance $5$ from cow $4$ and distance $7$ from cow $5$, which are more\nthan $K = 4$. The sum of weights of unpaired cows is\n$1 + 6 + 9 = 16$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 5 4\nG 1 1\nH 3 4\nG 4 2\nH 6 6\nH 8 9\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\n\n<p>Cows $1$ and $2$ can pair up because they are at distance $2 \\leq K = 4$, and\ncows $3$ and $5$ can pair up because they are at distance $4 \\leq K = 4$. This\npairing is maximal because only cow $4$ remains. The sum of weights of\nunpaired cows is the weight of the only unpaired cow, which is simply $6$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 10 76\nH 1 18\nH 18 465\nH 25 278\nH 30 291\nH 36 202\nG 45 96\nG 60 375\nG 93 941\nG 96 870\nG 98 540\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1893\n</pre>\n\n<p>The answer to this example is $18+465+870+540=1893$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Test cases 4-7 satisfy $T=1$.</li><li>Test cases 8-14 satisfy $T=2$ and $N\\le 300$.</li><li>Test cases 15-22 satisfy $T=2$.</li></ul>\n</div>\n\n<p><strong>**Note: the memory limit for this problem is 512MB, twice the default.**</strong>\n\n</p><p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1165"
    },
    {
      "title": "Problem 3. HILO",
      "subtitle": "USACO 2021 December Contest, Platinum",
      "id": 1166,
      "year": "2021",
      "division": "platinum",
      "number": "3",
      "problem": "Bessie knows a number $x+0.5$ where $x$ is some integer between $0$ to $N,$\ninclusive ($1\\le N\\le 5000$).  \n\n<p>Elsie is trying to guess this number. She can ask questions of the form  \"is $i$\nhigh or low?\" for some integer $i$ between $1$ and $N,$ inclusive.  Bessie\nresponds by saying \"HI!\" if $i$ is greater than $x+0.5$, or \"LO!\" if $i$ is less\nthan $x+0.5$.\n\n</p><p>Elsie comes up with the following strategy for guessing Bessie's number. Before\nmaking any guesses, she creates a list of $N$ numbers, where every number from\n$1$ to $N$ occurs exactly once (in other words, the list is a permutation of\nsize $N$.) Then, she goes through the list, guessing numbers that appear in the\nlist in order. However, Elsie skips any unnecessary guesses. That is, if Elsie\nis about to guess some number $i$ and Elsie previously guessed some $j &lt; i$ such\nthat Bessie responded with \"HI!,\" Elsie will not guess $i$ and will move on to\nthe next number in the list. Similarly, if she is about to guess some number $i$\nand she previously guessed some $j &gt; i$ such that Bessie responded with \"LO!,\"\nElsie will not guess $i$ and will move on to the next number in the list. It can\nbe proven that using this strategy, Elsie always uniquely determines $x$\nregardless of the permutation she creates. \n\n</p><p>If we concatenate all of Bessie's responses of either \"HI\" or \"LO\" into a single\nstring $S,$ the number of times Bessie says \"HILO\" is the number of length $4$\nsubstrings of $S$ that are equal to \"HILO.\"\n\n</p><p>Bessie knows that Elsie will use this strategy and has already chosen the value\nof $x$, but she does not know what permutation Elsie will use. Your goal is to\ncompute the sum of the number of times Bessie says \"HILO\" over all permutations\nthat Elsie could possibly choose, modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe only line of input contains $N$ and $x$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe total number of HILOs modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">17\n</pre>\n\n<p>In this test case, Bessie's number is $2.5$.\n\n</p><p>For example, if Elsie's permutation is $(4,1,3,2)$, then Bessie will say\n\"HILOHILO,\"  for a total of two \"HILO\"s. As another example, if Elsie's\npermutation is $(3,1,2,4)$, then Bessie will say \"HILOLO,\" for a total of one\n\"HILO.\"\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">60 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">508859913\n</pre>\n\n<p>Make sure to output the sum modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 3-10 satisfy $N\\le 50$.</li><li>Test cases 11-18 satisfy $N\\le 500$.</li><li>Test cases 19-26 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Richard Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1166"
    },
    {
      "title": "Problem 1. Minimizing Haybales",
      "subtitle": "USACO 2022 January Contest, Platinum",
      "id": 1188,
      "year": "2022",
      "division": "platinum",
      "number": "1",
      "problem": "Bessie is bored and yet again causing trouble in Farmer John's barn. FJ has $N$\n($1\\leq N \\leq 10^5$) stacks of haybales. For each $i\\in [1,N]$, the $i$th stack\nhas $h_i$ ($1\\le h_i\\le 10^9$) haybales. Bessie does not want any haybales to\nfall, so the only operation she can perform is as follows:\n\n<p></p><ul><li>If two adjacent stacks' heights differ by at most $K$ ($1\\le K\\le 10^9$),\nshe can swap the two stacks.\n</li></ul>\n\n<p>What is the lexicographically minimum sequence of heights that Bessie can obtain\nafter some sequence of these operations?\n\n</p><p><strong>**Note: the time and memory limits for this problem are 4s and 512MB, twice\nthe defaults.**</strong>\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $N$ and $K$. The $i+1$-st line contains the\nheight of the $i$-th haybale.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease print out $N$ lines, the $i$-th containing the height of the $i$-th\nhaybale in the solution.\n\n<p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 3\n7\n7\n3\n6\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n7\n7\n2\n3\n</pre>\n\n<p>One way that Bessie can swap the stacks is as follows:\n\n</p><p></p><pre>   7 7 3 6 2\n-&gt; 7 7 6 3 2\n-&gt; 7 7 6 2 3\n-&gt; 7 6 7 2 3\n-&gt; 6 7 7 2 3\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In 10% of all input cases, $N\\le 100$</li><li>In another 20% of all input cases, $N\\le 5000$</li><li>In the remaining 70% of input cases, there are no additional\nconstraints</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Daniel Zhang and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1188"
    },
    {
      "title": "Problem 2. Counting Haybales",
      "subtitle": "USACO 2022 January Contest, Platinum",
      "id": 1189,
      "year": "2022",
      "division": "platinum",
      "number": "2",
      "problem": "As usual, Bessie the cow is causing trouble in Farmer John's barn. FJ has $N$\n($1\\leq N \\leq 5000$) stacks of haybales. For each $i\\in [1,N]$, the $i$th stack\nhas $h_i$ ($1\\le h_i\\le 10^9$) haybales. Bessie does not want any haybales to\nfall, so the only operation she can perform is as follows:\n\n<p></p><ul><li>If two adjacent stacks' heights differ by exactly one, she can move the top\nhaybale of the taller stack to the shorter stack.\n</li></ul>\n\n<p>How many configurations are obtainable after performing the above operation\nfinitely many times, modulo $10^9+7$? Two configurations are considered the same\nif, for all $i$, the $i$th stack has the same number of haybales in both.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$ ($1\\le T\\le 10$), the number of independent test\ncases, all of which must be solved to solve one input correctly.\n\n<p>Each test case consists of $N$, and then a sequence of $N$ heights. It is\nguaranteed that the sum of $N$ over all test cases does not exceed $5000$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPlease output $T$ lines, one for each test case.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n4\n2 2 2 3\n4\n3 3 1 2\n4\n5 3 4 2\n6\n3 3 1 1 2 2\n6\n1 3 3 4 1 2\n6\n4 1 2 3 5 4\n10\n1 5 6 6 6 4 2 3 2 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n4\n5\n15\n9\n8\n19\n</pre>\n\n<p>For the first test case, the four possible configurations are:\n\n</p><p></p><div class=\"math\">$$(2,2,2,3), (2,2,3,2), (2,3,2,2), (3,2,2,2).$$</div>\n\n<p>For the second test case, the four possible configurations are:\n\n</p><p></p><div class=\"math\">$$(2,3,3,1),(3,2,3,1),(3,3,2,1), (3,3,1,2).$$</div>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 1-3 satisfy $N\\le 10$.</li><li>Input 4 satisfies $1\\le h_i\\le 3$ for all $i$.</li><li>Inputs 5-7 satisfy $|h_i-i|\\le 1$ for all $i$.</li><li>Inputs 8-10 satisfy $1\\le h_i\\le 4$ for all $i$ and $N\\le 100$.</li><li>Inputs 11-13 satisfy $N\\le 100$.</li><li>Inputs 14-17 satisfy $N\\le 1000$.</li><li>Inputs 18-21 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Daniel Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1189"
    },
    {
      "title": "Problem 3. Multiple Choice Test",
      "subtitle": "USACO 2022 January Contest, Platinum",
      "id": 1190,
      "year": "2022",
      "division": "platinum",
      "number": "3",
      "problem": "The cows are taking a multiple choice test. But instead of a standard test where your\nselected choices are scored for each question individually and then summed, in\nthis test your selected choices are summed before being scored.\n\n<p>Specifically, you are given $N$ ($2\\le N\\le 10^5$) groups of integer vectors  on\nthe 2D plane, where each vector is denoted by an ordered pair $(x,y)$. Choose\none vector from each group such that the sum of the vectors is as far away from\nthe origin as possible.\n\n</p><p>It is guaranteed that the total number of vectors is at most $2\\cdot 10^5$. \nEach group has size at least $2$, and within a group, all vectors are distinct. \nIt is also guaranteed that every $x$ and $y$ coordinate has absolute value at\nmost $\\frac{10^9}{N}$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$, the number of groups.\n\n<p>Each group starts with $G$, the number of vectors in the group, followed by $G$\nlines containing the vectors in that group. Consecutive groups are separated by\nnewlines.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe maximum possible squared Euclidean distance.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n\n2\n-2 0\n1 0\n\n2\n0 -2\n0 1\n\n3\n-5 -5\n5 1\n10 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">242\n</pre>\n\n<p>It is optimal to select $(1,0)$ from the first group, $(0,1)$ from the second\ngroup, and $(10,10)$ from the third group. The sum of these vectors is\n$(11,11)$, which is squared distance $11^2+11^2=242$ from the origin.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 1-5, the total number of vectors is at most $10^3$.</li><li>In test cases 6-9, every group has size exactly two.</li><li>Test cases 10-17 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1190"
    },
    {
      "title": "Problem 1. Paint by Rectangles",
      "subtitle": "USACO 2022 February Contest, Platinum",
      "id": 1212,
      "year": "2022",
      "division": "platinum",
      "number": "1",
      "problem": "After <a href=\"https://usaco.org/index.php?page=viewproblem2&amp;cpid=1094\">her previous\nartwork</a> was met with critical acclaim, Bessie was offered a job designing\npainting sets. She designs these paintings by choosing $1\\le N\\le 10^5$\naxis-aligned rectangles in the plane such that no two edges are collinear. The\nboundaries of these rectangles define the boundaries of the painting's colored\nregions.\n\n<p>Still being an avant-garde artist, Bessie decides that the painting should\nresemble a Holstein cow. More specifically, each region formed by the rectangles\nis colored either black or white, no two adjacent regions have the same color,\nand the region outside of all the rectangles is colored white.\n\n</p><p>After choosing the rectangles, Bessie would like you to output one of two things\nbased on a parameter $T$:\n</p><ul><li>If $T=1$, output the total number of regions.</li><li>If $T=2$, output the number of white regions followed by the number of black\nregions.</li></ul>\n\n<p><strong>**Note: the time limit for this problem is 4s, twice the default.**</strong>\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $T$.\n\n<p>The next $N$ lines each contain the description of a rectangle in the form\n$(x_1,y_1), (x_2,y_2)$ where $1\\le x_1&lt;x_2\\le 2N$ and $1\\le y_1&lt;y_2\\le 2N$.\n$(x_1, y_1)$ and $(x_2, y_2)$ are the bottom left and top right corners of the\nrectangle respectively.\n\n</p><p>It is guaranteed that all the $x_i$ form a permutation of $1\\ldots 2N$, and the\nsame holds for all the $y_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nA single integer if $T=1$, otherwise two separated by spaces.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 1\n1 1 3 3\n2 2 4 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>There are two white regions and two black regions, for a total of four regions.\nThe boundaries of all rectangles are connected, so this input would satisfy the\nconditions of subtask 3.\n\n</p><p></p><figure><img src=\"http://www.usaco.org/current/data/fig1_paint_platinum_feb22.png\"></figure>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 2\n1 5 3 6\n5 4 7 9\n4 1 8 3\n9 8 10 10\n2 2 6 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4 5\n</pre>\n\n<p>The boundary of the rectangle in the upper-right is not connected to the rest of\nthe boundaries, so this input would not satisfy the conditions of subtask 4.\n\n</p><p></p><figure><img src=\"http://www.usaco.org/current/data/fig2_paint_platinum_feb22.png\"></figure>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ol><li>Test cases 3-4 satisfy $N\\le 10^3$.</li><li>In test cases 5-7, no two rectangle boundaries intersect.</li><li>In test cases 8-10, $T=1$ and the boundaries of all rectangles are\nconnected.</li><li>In test cases 11-13, $T=2$ and the boundaries of all rectangles are\nconnected.</li><li>In test cases 14-18, $T=1$.</li><li>In test cases 19-23, $T=2$.</li></ol>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Andi Qu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1212"
    },
    {
      "title": "Problem 2. Sleeping in Class",
      "subtitle": "USACO 2022 February Contest, Platinum",
      "id": 1213,
      "year": "2022",
      "division": "platinum",
      "number": "2",
      "problem": "Bessie the cow was excited to recently return to in-person learning!\nUnfortunately, her instructor, Farmer John, is a very boring lecturer, and so\nshe ends up falling asleep in class often.\n\n<p>Farmer John has noticed that Bessie has not been paying attention in class. He\nhas asked another student in class, Elsie, to keep track of the number of times\nBessie falls asleep in a given class. There are $N$ class periods\n($2\\le N\\le 10^5$), and Elsie logs that Bessie fell asleep $a_i$ times\n($1\\le a_i\\le 10^{18}$) in the $i$-th class period. The total number of times\nBessie fell asleep across all class periods is at most $10^{18}$.\n\n</p><p>Elsie, feeling very competitive with Bessie, wants to make Farmer John feel like\nBessie is consistently falling asleep the same number of times in every class --\nmaking it appear that the issue is entirely Bessie's fault, with no dependence\non Farmer John's sometimes-boring lectures. \n\n</p><p>The only ways Elsie may modify the log are by combining two adjacent class\nperiods or splitting a class period into two. For example, if $a=[1,2,3,4,5],$\nthen if Elsie combines the second and third class periods the log will become\n$[1,5,4,5]$. If Elsie then chooses to split the third class period into two, the\nlog can become any of $[1,5,0,4,5]$, $[1,5,1,3,5]$, $[1,5,2,2,5]$,\n$[1,5,3,1,5]$, or $[1,5,4,0,5]$.\n\n</p><p>Given $Q$ ($1\\le Q\\le 10^5$) candidates $q_1,\\ldots,q_Q$ for Bessie's least\nfavorite number  ($1\\le q_i\\le 10^{18}$), for each of them help Elsie compute\nthe minimum number of modifications to the log that she needs to perform so that\nall the numbers in the log become the same.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of each test case contains $N$, and the second contains\n$a_1,a_2,\\ldots,a_N$. The third contains $Q$, followed by $Q$ lines each\ncontaining an integer $q_i$, a candidate for Bessie's least favorite number.  \n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each $q_i$, compute the minimum number of modifications required for Elsie\nto convert every entry of the log into $q_i$, or $-1$ if it is impossible.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n1 2 3 1 1 4\n7\n1\n2\n3\n4\n5\n6\n12\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n6\n4\n5\n-1\n4\n5\n</pre>\n\n<p>Elsie needs at least four modifications to convert the log into all 3s.\n\n</p><p></p><pre>   1 2 3 1 1 4\n-&gt; 3 3 1 1 4\n-&gt; 3 3 1 5\n-&gt; 3 3 6\n-&gt; 3 3 3 3\n</pre>\n\n<p>It is impossible for Elsie to convert the log into all 5s, which is why the \ncorrect output for that candidate is $-1$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In test cases 2-4, $N,Q\\le 5000$</li><li>In test cases 5-7, all $a_i$ are at most $10^9$.</li><li>Test cases 8-26 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Jesse Choe and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1213"
    },
    {
      "title": "Problem 3. Phone Numbers",
      "subtitle": "USACO 2022 February Contest, Platinum",
      "id": 1214,
      "year": "2022",
      "division": "platinum",
      "number": "3",
      "problem": "Bessie has a new cell phone with nine buttons, laid out as follows:\n\n<p></p><pre>123\n456\n789\n</pre>\n\n<p>Bessie is trying to type out a given phone number in a hurry, so she decides to\nsave time by pressing multiple buttons at the same time with one of her hooves.\nSpecifically, Bessie's hoof might press a single digit, two digits that share a\nside (for twelve possible pairs in total), or four digits that form a square \n(1245, 2356, 4578, or 5689). \n\n</p><p>For example, if the phone number Bessie is trying to type is 123659874, she\nmight attempt to save time by\n\n</p><p></p><ol><li>Pressing 1 and 2 at the same time.</li><li>Pressing 3.</li><li>Pressing 6, 5, 9, and 8 at the same time.</li><li>Pressing 7 and 4 at the same time.</li></ol>\n\n<p>Unfortunately, Bessie drastically overestimated her skill at performing this\ntask - if Bessie's hoof pressess multiple buttons at the same time, then  all of\nthe digits will be typed in arbitrary order. So if Bessie attempts the above\nsequence of presses, she may end up typing 123596847 or 213659874 instead (or\none of many other possibilities).\n\n</p><p>Given a sequence of digits that Bessie has typed, count the number of phone\nnumbers that she could have been trying to type modulo $10^9+7$.\n\n</p><p><strong>**Note: the time limit for this problem is 4s, twice the default.**</strong>\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$ ($1\\le T\\le 10$), the number of independent test\ncases to solve.\n\n<p>The next $T$ lines each contain a nonempty string of the digits 1 through 9. It\nis guaranteed that the total length of these strings does not exceed $10^5$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, the number of phone numbers Bessie might have been trying to\ntype modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1478\n4455\n5968\n31313211\n123659874\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n2\n24\n3\n255\n</pre>\n\n<p>For the first case, Bessie might be trying to type any of the following five\nphone numbers:\n\n</p><p></p><pre>1478\n1487\n4178\n4187\n1748\n</pre>\n\n<p>For example, if Bessie was trying to type 4187, she might have tried pressing 1\nand 4 at the same time and then tried pressing 7 and 8 at the same time.\n\n</p><p>For the third case, as the numbers form a square, Bessie might have been trying\nto type any permutation of the input sequence.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>In inputs 2-3, all phone numbers have length at most $8$.</li><li>In inputs 4-5, the phone number only contains 1, 2, and 3.</li><li>In inputs 6-7, the phone number doesn't contain the digit 5.</li><li>In inputs 8-9, the phone number only contains 5, 6, 8, and 9.</li><li>In inputs 10-12, the sum of the string lengths does not exceed $10^2$.</li><li>In inputs 13-15, the sum of the string lengths does not exceed $10^3$.</li><li>In inputs 16-18, the sum of the string lengths does not exceed $10^4$.</li><li>In inputs 19-21, no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Nick Wu\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1214"
    },
    {
      "title": "Problem 1. 262144 Revisited",
      "subtitle": "USACO 2022 US Open Contest, Platinum",
      "id": 1236,
      "year": "2022",
      "division": "platinum",
      "number": "1",
      "problem": "<p>Bessie likes downloading games to play on her cell phone, even though she does\nfind the small touch screen rather cumbersome to use with her large hooves.\n\n</p><p>She is particularly intrigued by the current game she is playing. The game\nstarts with a sequence of $N$ positive integers $a_1,a_2,\\ldots,a_N$\n($2\\le N\\le 262,144$),  each in the range $1\\ldots 10^6$. In one move, Bessie\ncan take two adjacent numbers  and replace them with a single number equal to one\ngreater than the maximum of the two (e.g., she  might replace an adjacent pair\n$(5,7)$ with an $8$). The game ends after $N-1$  moves, at which point only a\nsingle number remains. The goal is to <em>minimize</em> this final number.\n\n</p><p>Bessie knows that this game is too easy for you. So your job is not just to play\nthe game optimally on $a$, but for every contiguous subsequence of $a$. \n\n</p><p>Output the sum of the minimum possible final numbers over all $\\frac{N(N+1)}{2}$\ncontiguous subsequences of $a$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nFirst line contains $N$.\n\n<p>The next line contains $N$ space-separated integers denoting the input sequence.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nA single line containing the sum.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n1 3 1 2 1 10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">115\n</pre>\n\n<p>There are $\\frac{6\\cdot 7}{2}=21$ contiguous subsequences in total. For example,\nthe minimum possible final number for the contiguous subsequence $[1,3,1,2,1]$\nis $5$, which can be obtained via the following sequence of operations:\n\n</p><p></p><pre>original    -&gt; [1,3,1,2,1]\ncombine 1&amp;3 -&gt; [4,1,2,1]\ncombine 2&amp;1 -&gt; [4,1,3]\ncombine 1&amp;3 -&gt; [4,4]\ncombine 4&amp;4 -&gt; [5]\n</pre>\n\n<p>Here are the minimum possible final numbers for each contiguous subsequence:\n\n</p><p></p><pre>final(1:1) = 1\nfinal(1:2) = 4\nfinal(1:3) = 5\nfinal(1:4) = 5\nfinal(1:5) = 5\nfinal(1:6) = 11\nfinal(2:2) = 3\nfinal(2:3) = 4\nfinal(2:4) = 4\nfinal(2:5) = 5\nfinal(2:6) = 11\nfinal(3:3) = 1\nfinal(3:4) = 3\nfinal(3:5) = 4\nfinal(3:6) = 11\nfinal(4:4) = 2\nfinal(4:5) = 3\nfinal(4:6) = 11\nfinal(5:5) = 1\nfinal(5:6) = 11\nfinal(6:6) = 10\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $N\\le 300$.</li><li>Test cases 4-5 satisfy $N\\le 3000$.</li><li>In test cases 6-8, all values are at most $40$.</li><li>In test cases 9-11, the input sequence is non-decreasing.</li><li>Test cases 12-23 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1236"
    },
    {
      "title": "Problem 2. Hoof and Brain",
      "subtitle": "USACO 2022 US Open Contest, Platinum",
      "id": 1237,
      "year": "2022",
      "division": "platinum",
      "number": "2",
      "problem": "<p>Given a directed graph with $N$ vertices and $M$ edges ($2 \\leq N \\leq 10^5$,\n$1 \\leq M \\leq 2 \\cdot 10^5$), Farmer John's cows like to play the following\ngame with two players.\n\n</p><p>Place two tokens on distinct nodes in\nthe graph. Each turn, one player, the brain, will choose a token that must be\nmoved along an outgoing edge. The other player, the hoof, will choose which edge\nto move the token along. The two tokens can never be on the same node. If at\nsome point the hoof can't make a valid move, the brain wins. If the game\ncontinues indefinitely, the hoof wins.\n\n</p><p>You are given $Q$ queries ($1 \\leq Q \\leq 10^5$) indicating the starting nodes\nof the two tokens. For each query, output which player will win.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $M$.\n\n<p>The next $M$ lines each contain two integers $a$ and $b$, denoting an edge from\n$a$ to $b$.\n\n</p><p>The graph does not contain self-loops or multiple edges.\n\n</p><p>The next line contains $Q$.\n\n</p><p>The final $Q$ lines each contain two integers $x$ and $y$ satisfying\n$1\\le x,y\\le N$ and $x\\neq y$, indicating the starting nodes of the tokens.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nA string of length $Q$, where each character is B for the brain winning and H\nfor the hoof winning.\n</div>\n\n<p><strong>**Note: the time limit for this problem is 4s, twice the default.**</strong>\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">9 10\n1 2\n2 3\n3 4\n4 7\n3 5\n1 6\n6 8\n8 9\n9 6\n7 2\n4\n1 5\n1 2\n1 6\n2 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">BHHB\n</pre>\n\n<p>The brain can win the first game by selecting node 5; then the hoof has no valid\nmove.\n\n</p><p>The brain can win the last game by selecting node 4 and then node 7; then the\nhoof has no valid move.\n\n</p><p>The hoof wins the other games.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $N\\le 100$, $M\\le 200$.</li><li>Test cases 4-9 satisfy $N\\le 5000$.</li><li>Test cases 10-21 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Danny Mittal\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1237"
    },
    {
      "title": "Problem 3. Up Down Subsequence",
      "subtitle": "USACO 2022 US Open Contest, Platinum",
      "id": 1238,
      "year": "2022",
      "division": "platinum",
      "number": "3",
      "problem": "<p>Farmer John's $N$ cows ($2 \\leq N \\leq 3\\cdot 10^5$), conveniently numbered $1 \\ldots N$ as usual, have ordered themselves according to a  permutation\n$p_1,p_2,\\ldots,p_N$ of $1\\ldots N$.  You are also\ngiven a string of length $N-1$ consisting of the letters U and D. Please find the\nmaximum $K\\le N-1$ such that there  exists a subsequence $a_0,a_1,\\ldots,a_{K}$\nof $p$ such that for all $1\\le j\\le K$, $a_{j - 1} &lt; a_j$ if the $j$th letter in\nthe string is U, and $a_{j - 1} &gt; a_j$ if the $j$th letter in the string is D.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The second line contains $p_1,p_2,\\ldots,p_N$.\n\n</p><p>The last line contains the string.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nWrite out maximum possible value of $K$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1 5 3 4 2\nUDUD\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n</pre>\n\n<p>We can choose $[a_0,a_1,a_2,a_3,a_4]=[p_1,p_2,p_3,p_4,p_5]$; the entire\npermutation is consistent with the string.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n1 5 3 4 2\nUUDD\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n</pre>\n\n<p>We can choose $[a_0,a_1,a_2,a_3]=[p_1,p_3,p_4,p_5]$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 3-4 satisfy $N\\le 500$.</li><li>Test cases 5-8 satisfy $N\\le 5000$.</li><li>In test cases 9-12, the string consists of Us followed by Ds. </li><li>Test cases 13-22 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Danny Mittal\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1238"
    },
    {
      "title": "Problem 1. Breakdown",
      "subtitle": "USACO 2022 December Contest, Platinum",
      "id": 1260,
      "year": "2022",
      "division": "platinum",
      "number": "1",
      "problem": "<strong>**Note: the time limit for this problem is 3s, 50% larger than the\ndefault.**</strong>\n\n<p>Farmer John's farm can be represented as a directed weighted graph, with roads\n(edges) connecting different nodes, and the weight of each edge being the time\nrequired to travel along the road. Every day, Bessie likes to travel from the\nbarn (located at node $1$) to the fields (located at node $N$) traveling along\nexactly $K$ roads, and wants to reach the fields as quickly as possible under\nthis constraint. However, at some point, the roads stop being maintained, and\none by one, they start breaking down, becoming impassable. Help Bessie find the\nshortest path from the barn to the fields at all moments in time!\n\n</p><p>Formally, we start with a complete weighted directed graph on $N$ vertices\n($1\\le N\\le 300$) with $N^2$ edges: one edge for every pair $(i, j)$ for\n$1 \\le i, j \\le N$ (note that there are $N$ self loops). After each removal,\noutput the minimum weight of any path from $1$ to $N$ that passes through\nexactly $K$ (not necessarily distinct) edges ($2\\le K\\le 8$). Note that after\nthe $i$-th removal, the graph has $N^2-i$ edges left.\n\n</p><p>The weight of a path is defined as the sum of the weights of all of the edges on\nthe path. Note that a path can contain multiple of the same edge and multiple of\nthe same vertex, including vertices $1$ and $N$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $K$.\n\n<p>The next $N$ lines contain $N$ integers each. The $j$-th integer of $i$-th line\nis $w_{ij}$ ($1\\le w_{ij}\\le 10^8$).\n\n</p><p>Then $N^2$ additional lines follow, each containing two integers $i$ and $j$\n($1\\le i,j\\le N$). Every pair of integers appears exactly once.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nExactly $N^2$ lines, the minimum weight $K$-path after each removal.  If no $K$-path\nexists then output $-1$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 4\n10 4 4\n9 5 3\n2 1 6\n3 1\n2 3\n2 1\n3 2\n2 2\n1 3\n3 3\n1 1\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">11\n18\n22\n22\n22\n-1\n-1\n-1\n-1\n</pre>\n\n<p>After the first removal, the shortest $4$-path is:\n\n</p><p></p><pre>1 -&gt; 2 -&gt; 3 -&gt; 2 -&gt; 3\n</pre>\n\n<p>After the second removal, the shortest $4$-path is:\n\n</p><p></p><pre>1 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; 3\n</pre>\n\n<p>After the third removal, the shortest $4$-path is:\n\n</p><p></p><pre>1 -&gt; 3 -&gt; 3 -&gt; 3 -&gt; 3\n</pre>\n\n<p>After six removals, there is no longer a $4$-path.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>For $2\\le T\\le 14$, test case $T$ satisfies $K=\\lfloor (T+3)/2\\rfloor$. \n</li></ul>\n</div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1260"
    },
    {
      "title": "Problem 2. Making Friends",
      "subtitle": "USACO 2022 December Contest, Platinum",
      "id": 1261,
      "year": "2022",
      "division": "platinum",
      "number": "2",
      "problem": "<strong>**Note: the time limit for this problem is 3s, 50% larger than the default.\nThe memory limit is twice the default.**</strong>\n\n<p>There are initially $M$ ($1\\le M\\le 2\\cdot 10^5$) pairs of friends among FJ's\n$N$ ($2\\le N\\le 2\\cdot 10^5$) cows labeled $1\\dots N$. The cows are leaving the\nfarm for vacation one by one. On day $i$, the $i$-th cow leaves the farm, and\nall pairs of the $i$-th cow's friends still present on the farm become friends.\nHow many new friendships are formed in total?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $M$.\n\n<p>The next $M$ lines contain two integers $u_i$ and $v_i$ denoting that cows $u_i$\nand $v_i$ are friends ($1\\le u_i,v_i\\le N$, $u_i\\neq v_i$). No unordered  pair\nof cows appears more than once.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOne line containing the total number of new friendships formed. Do not include pairs of cows that\nwere already friends at the beginning.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7 6\n1 3\n1 4\n7 1\n2 3\n2 4\n3 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n</pre>\n\n<p>On day $1$, three new friendships are formed: $(3,4)$, $(3,7)$, and $(4,7)$.\n\n</p><p>On day $3$, two new friendships are formed: $(4,5)$ and $(5,7)$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Test cases 2-3 satisfy $N\\le 500$.</li><li>Test cases 4-7 satisfy $N\\le 10^4$.</li><li>Test cases 8-17 satisfy no additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1261"
    },
    {
      "title": "Problem 3. Palindromes",
      "subtitle": "USACO 2022 December Contest, Platinum",
      "id": 1262,
      "year": "2022",
      "division": "platinum",
      "number": "3",
      "problem": "<p>The United Cows of Farmer John (UCFJ) are at the annual hoofball championships! UCFJ's team\nof $N$ $(1 \\le N \\le 7500)$ cows won a gold medal in hoofball,  narrowly beating\nout Farmer Nhoj's team. </p>\n\n<p>The cows have already lined up for the awards ceremony. They want FJ to take \n$\\frac{N(N+1)}{2}$ group photos, one for each contiguous subsequence of the\nlineup.\n\n</p><p>However, FJ, as the coach of the team, is very particular about how the cows\nshould be lined up. Specifically, he refuses to take a picture of a subsequence\nunless it forms a *palindrome,* meaning that the breed of the $i$th cow from the\nleft end of the subsequence must be the same as the breed of the $i$th cow from \nthe right end of the subsequence for all positive integers $i$ less than or\nequal to the length of the subsequence. Each cow's breed is either Guernsey or\nHolstein.\n\n</p><p>For each of the $\\frac{N(N+1)}{2}$ contiguous subsequences of the lineup, count \nthe minimum number of transpositions necessary to rearrange that subsequence\ninto a palindrome (or $-1$ if it is impossible to do so). A single transposition\nconsists of taking two adjacent cows in the subsequence and swapping them. \nOutput the sum of all these counts.\n\n</p><p>Note that the number of transpositions needed is calculated independently for\neach contiguous subsequence (the cows return to their initial positions between\nphotos).\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe lineup, represented by a string of Gs and Hs of length $N$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe sum of the aforementioned quantity over all $\\frac{N(N+1)}{2}$ contiguous \nsubsequences of the lineup.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">GHHGGHHGH\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12\n</pre>\n\n<p>The first four contiguous subsequences are G, GH, GHH, and GHHG. Both G and GHHG\nare already palindromes, so they contribute $0$ to the sum. GHH can be\nrearranged into a palindrome using a single transposition, so it contributes $1$\nto the sum. GH cannot be rearranged into a palindrome using any number of \ntranspositions, so it contributes $-1$ to the sum.\n\n</p><p>Another contiguous subsequence that contributes to the sum is HHGG. This can be\nrearranged into a palindrome using two transpositions.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p>There are fifteen test cases aside from the sample, one for each of \n$N \\in [100, 200, 500, 1000, 2000, 5000, 5000, 5000, 5000, 5000, 7500, 7500, 7500, 7500, 7500]$.\n\n</p><p></p></div>\n\n<p>\n</p><p>Problem credits: Mythreya Dharani and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1262"
    },
    {
      "title": "Problem 1. Tractor Paths",
      "subtitle": "USACO 2023 January Contest, Platinum",
      "id": 1284,
      "year": "2023",
      "division": "platinum",
      "number": "1",
      "problem": "\n<p>**Note: The time limit for this problem is 4s, twice the default. The memory\nlimit for this problem is 512MB, twice the default.**\n\n</p><p>Farmer John has $N$ ($2\\le N\\le 2\\cdot 10^5$) tractors, where the $i$th tractor\ncan only be used within the inclusive interval $[\\ell_i,r_i]$. The tractor intervals\nhave left endpoints $\\ell_1&lt;\\ell_2&lt;\\dots&lt;\\ell_N$ and right endpoints $r_1&lt;r_2&lt;\\dots&lt;r_N$. \nSome of the tractors are special.\n\n</p><p>Two tractors $i$ and $j$ are said to be <em>adjacent</em> if $[\\ell_i,r_i]$ and\n$[\\ell_j,r_j]$ intersect. Farmer John can transfer from one tractor to any adjacent tractor.\nA <em>path</em> between two tractors $a$ and $b$ \nconsists of a sequence of transfers such that the first tractor in the sequence\nis $a$, the last tractor in the sequence is $b$, and every two consecutive \ntractors in the sequence are adjacent. It is guaranteed that there is a path \nbetween tractor $1$ and tractor $N$. The length of a path is the number of\ntransfers (or equivalently, the number of tractors within it minus one).\n\n</p><p>You are given $Q$ ($1\\le Q\\le 2\\cdot 10^5$) queries, each specifying a pair of\ntractors $a$ and $b$ ($1\\le a&lt;b\\le N$). For each query, output two integers:\n\n</p><p></p><ul><li>The length of any shortest path between tractor $a$ to tractor $b$.</li><li>The number of special tractors such that there exists at least one shortest\npath from tractor $a$ to tractor $b$ containing it.\n</li></ul>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $Q$.\n\n<p>The next line contains a string of length $2N$ consisting of Ls and Rs,\nrepresenting the left and right endpoints in sorted order. It is guaranteed that\nfor each proper prefix of this string, the number of Ls exceeds the number of\nRs.\n\n</p><p>The next line contains a bit string of length $N$, representing for each\ntractor whether it is special or not.\n\n</p><p>The next $Q$ lines each contain two integers $a$ and $b$, specifying a query.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each query, the two quantities separated by spaces.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8 10\nLLLLRLLLLRRRRRRR\n11011010\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n2 3\n2 4\n2 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1 2\n1 1\n1 2\n2 4\n2 3\n2 4\n2 3\n1 1\n1 2\n1 2\n</pre>\nThe $8$ tractor intervals, in order, are\n$[1, 5], [2, 10], [3, 11], [4, 12], [6, 13], [7, 14], [8, 15], [9, 16]$. \n\n<p>For the $4$th query, there are three shortest paths between the $1$st and $5$th\ntractor:  $1$ to $2$ to $5$, $1$ to $3$ to $5$, and $1$ to $4$ to $5$. These\nshortest paths all have length $2$.\n\n</p><p>Additionally, every tractor $1,2,3,4,5$ is part of one of the three shortest\npaths mentioned earlier, and since $1,2,4,5$ are special, there are $4$ special\ntractors such that there exists at least one shortest path from tractor $1$ to\n$5$ containing it.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-3: $N,Q\\le 5000$</li><li>Inputs 4-7: There are at most 10 special tractors.</li><li>Inputs 8-16: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1284"
    },
    {
      "title": "Problem 2. Mana Collection",
      "subtitle": "USACO 2023 January Contest, Platinum",
      "id": 1285,
      "year": "2023",
      "division": "platinum",
      "number": "2",
      "problem": "\n<p>**Note: The time limit for this problem is 5s, 2.5 times the default. The memory limit for this problem is 512MB, twice the default.**\n\n</p><p>Bessie has recently taken an interest in magic and needs to collect mana for a\nvery important spell. Bessie has $N$ ($1\\le N\\le 18$) mana pools, the $i$th of\nwhich accumulates $m_i$ mana per second ($1\\le m_i\\le 10^8$). The pools are\nlinked by a collection of $M$  ($0\\le M\\le N(N-1)$) directed edges\n$(a_i,b_i,t_i)$, meaning that she can travel from $a_i$ to $b_i$ in $t_i$\nseconds ($1\\le a_i, b_i\\le N$, $a_i\\neq b_i$, $1\\le t_i\\le 10^9$). Whenever\nBessie is present at a pool, she can collect all the mana stored at that\nlocation, emptying it. At time $0$, all mana pools are empty, and Bessie can\nselect any pool to start at.\n\n</p><p>Answer $Q$ ($1\\le Q\\le 2\\cdot 10^5$) queries, each specified by two integers $s$\nand $e$ ($1\\le s\\le 10^9$, $1\\le e\\le N$). For each query, determine the maximum\namount of mana Bessie can collect in $s$ seconds if she must be at mana pool $e$\nat the end of the $s$th second.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nFirst line contains $N$ and $M$.\n\n<p>Next line contains $m_1,m_2,\\dots, m_N$.\n\n</p><p>Next $M$ lines contain $a_i,b_i,t_i$. No ordered pair $(a_i,b_i)$ appears more\nthan once in the input.\n\n</p><p>Next line contains $Q$.\n\n</p><p>Next $Q$ lines contain two integers $s$ and $e$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n$Q$ lines, one for each query.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2 1\n1 10\n1 2 10\n4\n5 1\n5 2\n100 1\n100 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n50\n100\n1090\n</pre>\n\n<p>First query: Bessie takes 5 mana from pool 1 after 5 seconds.\n\n</p><p>Second query: Bessie takes 50 mana from pool 2 after 5 seconds.\n\n</p><p>Third query: Bessie takes 100 mana from pool 1 after 100 seconds.\n\n</p><p>Fourth query: Bessie takes 90 mana from pool 1 after 90 seconds and 1000 mana\nfrom pool 2 after 100 seconds.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 8\n50000000 100000000 20000000 70000000\n1 2 20\n2 1 50\n2 3 90\n1 3 40\n3 1 10\n4 1 25\n1 4 5\n4 3 70\n3\n8 3\n1000000000 1\n500000 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">160000000\n239999988050000000\n119992550000000\n</pre>\n\n<p>An example where Bessie is able to collect much larger amounts of mana.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-4: $N\\le 10, Q\\le 100$</li><li>Inputs 5-9: $N\\le 10$</li><li>Inputs 10-14: $Q\\le 100$</li><li>Inputs 15-17: $N = 16$</li><li>Inputs 18-20: $N = 17$</li><li>Inputs 21-24: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1285"
    },
    {
      "title": "Problem 3. Subtree Activation",
      "subtitle": "USACO 2023 January Contest, Platinum",
      "id": 1286,
      "year": "2023",
      "division": "platinum",
      "number": "3",
      "problem": "\n<p>For the New Year celebration, Bessie and her friends have constructed a giant\ntree with many glowing ornaments. Bessie has the ability to turn the ornaments\non and off through remote control. Before the sun rises, she wants to toggle\nsome of the ornaments in some order (possibly toggling an ornament more than\nonce) such that the tree starts and ends with no ornaments on. Bessie thinks the\ntree looks cool if the set of activated ornaments is exactly a subtree rooted at\nsome vertex. She wants the order of ornaments she toggles to satisfy the\nproperty that, for every subtree, at some point in time it was exactly the set\nof all turned on ornaments. Additionally, it takes energy to switch on and off\nornaments, and Bessie does not want to waste energy, so she wants to find the\nminimum number of toggles she can perform.\n\n</p><p>Formally, you have a tree with vertices labeled $1\\dots N$\n($2\\le N\\le 2\\cdot 10^5$) rooted at $1$.  Each vertex is initially inactive. In\none operation, you can toggle the state of a single vertex from inactive to\nactive or vice versa. Output the minimum possible length of a sequence of\noperations satisfying both of the following conditions:\n\n</p><p></p><ul><li>Define the subtree rooted at a vertex $r$ to consist of all vertices $v$\nsuch that $r$ lies on the path from $1$ to $v$ inclusive. For every one of the\n$N$ subtrees of the tree, there is a moment in time when the set of active\nvertices is precisely those in that subtree. </li><li>Every vertex is inactive after the entire sequence of operations.</li></ul>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The second line contains $p_2 \\dots p_N$ ($1\\le p_i&lt;i$), where $p_i$ denotes the\nparent of vertex $i$ in the tree.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the minimum possible length.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n</pre>\n\n<p>There are three subtrees, corresponding to $\\{1,2,3\\}$, $\\{2\\}$, and $\\{3\\}$.\nHere is one sequence of operations of the minimum possible length:\n\n</p><p></p><pre>activate 2\n(activated vertices form the subtree rooted at 2)\nactivate 1\nactivate 3\n(activated vertices form the subtree rooted at 1)\ndeactivate 1\ndeactivate 2\n(activated vertices form the subtree rooted at 3)\ndeactivate 3\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 2-3: $N \\le 8$</li><li>Inputs 4-9: $N \\le 40$</li><li>Inputs 10-15: $N \\le 5000$</li><li>Inputs 16-21: No  additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1286"
    },
    {
      "title": "Problem 1. Hungry Cow",
      "subtitle": "USACO 2023 February Contest, Platinum",
      "id": 1308,
      "year": "2023",
      "division": "platinum",
      "number": "1",
      "problem": "\n<p><strong>**Note: The time limit for this problem is 6s, three times the default. The\nmemory limit for this problem is 512MB, twice the default.**</strong>\n\n</p><p>Bessie is a hungry cow. Each day, for dinner, if there is a haybale in the barn,\nshe will eat one haybale. Farmer John does not want Bessie to starve, so some\ndays he sends a delivery of haybales, which arrive in the morning (before\ndinner). In particular, on day $d_i$, Farmer John sends a delivery of $b_i$\nhaybales ($1\\leq d_i \\leq 10^{14}$, $0\\leq b_i \\leq 10^9$).\n\n</p><p>Process $U$ ($1\\le U\\le 10^5$) updates as follows: Given a pair  $(d, b)$, \nupdate the number of haybales arriving on day $d$ to $b$.  After each update,\noutput the sum of all days on which Bessie eats haybales modulo\n$10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\n$U$, followed by $U$ lines containing the updates.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe sum after each update modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n4 3\n1 5\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">15\n36\n18\n</pre>\n\n<p>Answers after each update:\n\n</p><p></p><pre>4+5+6=15\n1+2+3+4+5+6+7+8=36\n1+2+4+5+6=18\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">9\n1 89\n30 7\n101 26\n1 24\n5 1\n60 4\n5 10\n101 0\n1 200\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4005\n4656\n7607\n3482\n3507\n3753\n4058\n1107\n24531\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 3: $U\\le 5000$</li><li>Inputs 4-10: Updates only increase the number of haybales arriving on day\n$d$.</li><li>Inputs 11-22: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1308"
    },
    {
      "title": "Problem 2. Problem Setting",
      "subtitle": "USACO 2023 February Contest, Platinum",
      "id": 1309,
      "year": "2023",
      "division": "platinum",
      "number": "2",
      "problem": "\n<p><strong>**Note: The memory limit for this problem is 512MB, twice the default.**</strong>\n\n</p><p>Farmer John created $N$ ($1\\le N\\le 10^5$) problems. He then recruited $M$\n($1\\le M\\le 20$) test-solvers, each of which rated every problem as \"easy\" or\n\"hard.\" \n\n</p><p>His goal is now to create a problemset arranged in increasing order of\ndifficulty, consisting of some subset of his $N$ problems arranged in some\norder. There must exist no pair of problems such that some test-solver thinks\nthe problem later in the order is easy but the problem earlier in the order is\nhard. \n\n</p><p>Count the number of distinct nonempty problemsets he can form, modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $M$.\n\n<p>The next $M$ lines each contain a string of length $N$. The $i$th character of\nthis  string is E if the test-solver thinks the $i$th problem is easy, or H\notherwise.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe number of distinct problemsets FJ can form, modulo $10^9+7$.\n\n<p></p></div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 1\nEHE\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p>The nine possible problemsets are as follows:\n\n</p><p></p><pre>[1]\n[1,2]\n[1,3]\n[1,3,2]\n[2]\n[3]\n[3,1]\n[3,2]\n[3,1,2]\n</pre>\n\n<p>Note that the order of the problems within the problemset matters.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10 6\nEHEEEHHEEH\nEHHHEEHHHE\nEHEHEHEEHH\nHEHEEEHEEE\nHHEEHEEEHE\nEHHEEEEEHE\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">33\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-4: $M=1$</li><li>Inputs 5-14: $M\\le 16$</li><li>Inputs 15-22: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1309"
    },
    {
      "title": "Problem 3. Watching Cowflix",
      "subtitle": "USACO 2023 February Contest, Platinum",
      "id": 1310,
      "year": "2023",
      "division": "platinum",
      "number": "3",
      "problem": "\n<p><strong>**Note: The time limit for this problem is 3s, 1.5x the default.**</strong>\n\n</p><p>Bessie likes to watch shows on Cowflix, and she watches them in different\nplaces. Farmer John's farm can be represented as a tree with $N$\n($2 \\leq N \\leq 2\\cdot 10^5$) nodes, and for each node, either Bessie watches\nCowflix there or she doesn't. It is guaranteed that Bessie watches Cowflix  in\nat least one node.\n\n</p><p>Unfortunately, Cowflix is introducing a new subscription model to combat\npassword sharing. In their new model, you can choose a connected component of\nsize $d$ in the farm, and then you need to pay $d + k$ moonies for an account\nthat you can use in that connected component. Formally, you need to choose a set\nof disjoint connected components $c_1, c_2, \\dots, c_C$ so that every node where\nBessie watches Cowflix must be contained within some $c_i$.  The cost of the set\nof components is $\\sum_{i=1}^{C} (|c_i|+k)$, where $|c_i|$ is the number of\nnodes in component $c_i$. Nodes where Bessie does not watch Cowflix do not have\nto be in any $c_i$.\n\n</p><p>Bessie is worried that the new subscription model may be too expensive for her\ngiven all the places she visits and is thinking of switching to Mooloo. To aid\nher decision-making, calculate the minimum amount she would need to pay to\nCowflix to maintain her viewing habits. Because Cowflix has not announced the\nvalue of $k$, calculate it for all integer values of $k$ from $1$ to $N$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$. \n\n<p>The second line contains a bit string $s_1s_2s_3 \\dots s_N$ where $s_i = 1$ if\nBessie watches Cowflix at node $i$. \n\n</p><p>Then $N-1$ lines follow, each containing two integers $a$ and $b$\n($1 \\leq a, b \\leq N$), which denotes an edge between $a$ and $b$ in the tree.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe answers for each $k$ from $1$ to $N$ on separate lines.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n10001\n1 2\n2 3\n3 4\n4 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n6\n8\n9\n10\n</pre>\n\n<p>For $k\\le 3$, it's optimal to have two accounts: $c_1 = \\{1\\}, c_2 = \\{5\\}$. For\n$k\\ge 3$, it's optimal to have one account: $c_1 = \\{1, 2, 3, 4, 5\\}$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">7\n0001010\n7 4\n5 6\n7 2\n5 1\n6 3\n2 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">4\n6\n8\n9\n10\n11\n12\n</pre>\n\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 3-5: $N\\le 5000$</li><li>Inputs 6-8: $i$ is connected to $i+1$ for all $i\\in [1,N)$.</li><li>Inputs 9-19: $N\\le 10^5$</li><li>Inputs 20-24: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Danny Mittal\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1310"
    },
    {
      "title": "Problem 1. Pareidolia",
      "subtitle": "USACO 2023 US Open Contest, Platinum",
      "id": 1332,
      "year": "2023",
      "division": "platinum",
      "number": "1",
      "problem": "\n<p><strong>**Note: The time limit for this problem is 4s, twice the default. The memory\nlimit for this problem is 512MB, twice the default.**</strong>\n\n</p><p>Pareidolia is the phenomenon where your eyes tend to see familiar patterns in\nimages where none really exist -- for example seeing a face in a cloud.  As you\nmight imagine, with Farmer John's constant proximity to cows, he often sees\ncow-related patterns in everyday objects.  For example, if he looks at the\nstring \"bqessiyexbesszieb\", Farmer John's  eyes ignore some of the letters and\nall he sees is \"bessiebessie\".  \n\n</p><p>Given a string $s$, let $B(s)$ represent the maximum number of repeated copies\nof  \"bessie\" one can form by deleting zero or more of the characters from $s$. \nIn the example above, $B($\"bqessiyexbesszieb\"$) = 2$.  Furthermore, given a \nstring $t$, let $A(t)$ represent the sum of $B(s)$ over all contiguous \nsubstrings $s$ of $t$.\n\n</p><p>Farmer John has a string $t$ of length at most $2\\cdot 10^5$ consisting only of\ncharacters a-z.  Please compute $A(t)$, and how $A(t)$ would change after $U$\n($1\\le U\\le 2\\cdot 10^5$) updates, each changing a character of $t$.  Updates\nare cumulative.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains $t$.\n\n<p>The next line contains $U$, followed by $U$ lines each containing a position $p$\n($1\\le p\\le N$) and a character $c$ in the range a-z, meaning that the $p$th\ncharacter of $t$ is changed to $c$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $U+1$ lines, the total number of bessies that can be made across all\nsubstrings of $t$ before any updates and after each update.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">bessiebessie\n3\n3 l\n7 s\n3 s\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">14\n7\n1\n7\n</pre>\n\n<p>Before any updates, twelve substrings contain exactly 1 \"bessie\" and 1 string\ncontains exactly 2 \"bessie\"s, so the total number of bessies is\n$12\\cdot 1 + 1 \\cdot 2 = 14$.\n\n</p><p>After one update, $t$ is \"belsiebessie.\" Seven substrings contain exactly one\n\"bessie.\"\n\n</p><p>After two updates, $t$ is \"belsiesessie.\" Only the entire string contains\n\"bessie.\"\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 2: $|t|, U\\le 300$</li><li>Inputs 3-5: $U\\le 10$</li><li>Inputs 6-13: $|t|, U\\le 10^5$</li><li>Inputs 14-21: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang and Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1332"
    },
    {
      "title": "Problem 2. Good Bitstrings",
      "subtitle": "USACO 2023 US Open Contest, Platinum",
      "id": 1333,
      "year": "2023",
      "division": "platinum",
      "number": "2",
      "problem": "\n<p>For any two positive integers $a$ and $b$, define the function\n$\\texttt{gen_string}(a,b)$ by the following Python code:\n\n</p><p></p><pre class=\"prettyprint\">def gen_string(a: int, b: int):\n\tres = \"\"\n\tia, ib = 0, 0\n\twhile ia + ib &lt; a + b:\n\t\tif ia * b &lt;= ib * a:\n\t\t\tres += '0'\n\t\t\tia += 1\n\t\telse:\n\t\t\tres += '1'\n\t\t\tib += 1\n\treturn res\n</pre>\n\n<p>Equivalent C++ code:\n\n</p><p></p><pre class=\"prettyprint\">string gen_string(int64_t a, int64_t b) {\n\tstring res;\n\tint ia = 0, ib = 0;\n\twhile (ia + ib &lt; a + b) {\n\t\tif ((__int128)ia * b &lt;= (__int128)ib * a) {\n\t\t\tres += '0';\n\t\t\tia++;\n\t\t} else {\n\t\t\tres += '1';\n\t\t\tib++;\n\t\t}\n\t}\n\treturn res;\n}\n</pre>\n\n<p>$ia$ will equal $a$ and $ib$ will equal $b$ when the loop terminates, so this\nfunction returns a  bitstring of length $a+b$ with exactly $a$ zeroes and $b$\nones. For example, $\\texttt{gen_string}(4,10)=01110110111011$.\n\n</p><p>Call a bitstring $s$ $\\textbf{good}$ if there exist positive integers $x$ and\n$y$  such that $s=\\texttt{gen_string}(x,y)$. Given two positive integers $A$ and\n$B$  ($1\\le A,B\\le 10^{18}$), your job is to compute the number of good prefixes\nof  $\\texttt{gen_string}(A,B)$. For example, there are $6$ good prefixes of \n$\\texttt{gen_string}(4,10)$:\n\n</p><p></p><pre>x = 1 | y = 1 | gen_string(x, y) = 01\nx = 1 | y = 2 | gen_string(x, y) = 011\nx = 1 | y = 3 | gen_string(x, y) = 0111\nx = 2 | y = 5 | gen_string(x, y) = 0111011\nx = 3 | y = 7 | gen_string(x, y) = 0111011011\nx = 4 | y = 10 | gen_string(x, y) = 01110110111011\n</pre>\n\n<p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $T$ ($1\\le T\\le 10$), the number of independent test\ncases.\n\n<p>Each of the next $T$ lines contains two integers $A$ and $B$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe answer for each test case on a new line.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">6\n1 1\n3 5\n4 7\n8 20\n4 10\n27 21\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n5\n7\n10\n6\n13\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 2: $A,B\\le 100$</li><li>Input 3: $A,B\\le 1000$</li><li>Inputs 4-7: $A,B\\le 10^6$</li><li>Inputs 8-13: All answers are at most $10^5$.</li><li>Inputs 14-21: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1333"
    },
    {
      "title": "Problem 3. Triples of Cows",
      "subtitle": "USACO 2023 US Open Contest, Platinum",
      "id": 1334,
      "year": "2023",
      "division": "platinum",
      "number": "3",
      "problem": "\n<p>There are initially $N-1$ pairs of friends among FJ's $N$\n($2\\le N\\le 2\\cdot 10^5$) cows labeled $1\\dots N$, forming a tree. The cows are\nleaving the farm for vacation one by one. On day $i$, the $i$th cow leaves the\nfarm, and then all pairs of the $i$th cow's friends still present on the farm\nbecome friends. \n\n</p><p>For each $i$ from $1$ to $N$, just before the $i$th cow leaves,  how many\nordered triples of distinct cows $(a,b,c)$ are there such that none of $a,b,c$\nare on vacation, $a$ is friends with $b$, and $b$ is friends with $c$?\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The next $N-1$ lines contain two integers $u_i$ and $v_i$ denoting that cows\n$u_i$ and $v_i$ are initially friends ($1\\le u_i,v_i\\le N$).\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe answers for $i$ from $1$ to $N$ on separate lines.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 2\n2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n0\n0\n</pre>\n\n<p>$(1,2,3)$ and $(3,2,1)$ are the triples just before cow $1$ leaves.\n\n</p><p>After cow\n$1$ leaves, there are less than $3$ cows left, so no triples are possible.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n1 2\n1 3\n1 4\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">6\n6\n0\n0\n</pre>\n\n<p>At the beginning, cow $1$ is friends with all other cows, and no other pairs of\ncows are friends, so the triples are $(a, 1, c)$ where $a, c$ are different cows\nfrom $\\{2, 3, 4\\}$, which gives $3 \\cdot 2 = 6$ triples.\n\n</p><p>After cow $1$ leaves, the remaining three cows are all friends, so the triples\nare just those three cows in any of the $3! = 6$ possible orders.\n\n</p><p>After cow $2$ leaves, there are less than $3$ cows left, so no triples are\npossible.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n3 5\n5 1\n1 4\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">8\n10\n2\n0\n0\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 4-5: $N\\le 500$</li><li>Inputs 6-10: $N\\le 5000$</li><li>Inputs 11-20: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Aryansh Shrivastava, Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1334"
    },
    {
      "title": "Problem 1. Cowntact Tracing",
      "subtitle": "USACO 2023 December Contest, Platinum",
      "id": 1356,
      "year": "2023",
      "division": "platinum",
      "number": "1",
      "problem": "\n<p>Farmer John has $N$ ($2\\le N\\le 10^5$) cows labeled $1\\dots N$, where the \nconnections between cows are described by a tree. Unfortunately, there is a\nsickness spreading throughout. \n\n</p><p>Initially, some cows start off infected. Every night, an infected cow spreads\nthe sickness to their neighbors. Once a cow is infected, she stays infected.\nAfter some amount of nights, Farmer John realizes that there is an issue so he\ntests his cows to determine who has the sickness.  \n\n</p><p>You are given $Q$ ($1\\le Q\\le 20$) different values for the number of nights, \neach an integer in the range $[0,N]$.  For each number of nights, determine the\nminimum number of cows that could have  started with the illness, or that the\nnumber of nights is inconsistent with the given information.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The next line contains a bit string of length $N$, where the $i$th bit is 1  if\nthe $i$th cow is infected and 0 otherwise. At least one cow is infected.\n\n</p><p>The next $N-1$ lines contain the edges of the tree.\n\n</p><p>Then $Q$, followed by the $Q$ values for the number of nights.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\n$Q$ lines, the answers for each number of nights, or $-1$ if impossible.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n11111\n1 2\n2 3\n3 4\n4 5\n6\n5\n4\n3\n2\n1\n0\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n1\n1\n1\n2\n5\n</pre>\n\n<p>For the first four queries, one possibility is that just cow 3 started with the\nillness. For the fifth query (1 night), one possibility is that cows 2 and 4\nstarted with the illness. For the sixth query (0 nights), one possibility is\nthat all five cows started with the illness.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">10\n1111111111\n1 2\n2 3\n2 4\n2 5\n2 6\n6 7\n7 8\n8 9\n9 10\n11\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n3\n2\n1\n1\n1\n1\n1\n1\n1\n1\n</pre>\n\n<p>For the first query (0 nights), one possibility is that all ten cows started\nwith the illness. For the second query (1 night), one possibility is that cows\n2, 7, and 9 started with the illness. For the third query (2 nights), one\npossibility is that cows 2 and 9 started with the illness. For the fourth to\neleventh queries, one possibility is that just cow 7 started with the illness.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5\n11100\n1 2\n2 3\n3 4\n4 5\n6\n0\n1\n2\n3\n4\n5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">3\n1\n1\n-1\n-1\n-1\n</pre>\n\n<p>For the first query (0 nights), one possibility is that cows 1, 2, and 3 started\nwith the illness. For the second query (1 night), one possibility is that just\ncow 2 started with the illness. For the third query (2 nights), one possibility\nis that just cow 1 started with the illness. For the fourth through sixth\nqueries, there is no consistent possibility.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 4-5: $N \\le 10$</li><li>Inputs 6-8: All cows are infected.</li><li>Inputs 9-11: $N \\le 400$</li><li>Inputs 12-23: No additional restrictions.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Suhas Nagar and Brandon Wang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1356"
    },
    {
      "title": "Problem 2. A Graph Problem",
      "subtitle": "USACO 2023 December Contest, Platinum",
      "id": 1357,
      "year": "2023",
      "division": "platinum",
      "number": "2",
      "problem": "\n<p>To improve her mathematical knowledge, Bessie has been taking a graph theory\ncourse and finds herself stumped by the following problem.  Please help her!\n\n</p><p>You are given a connected, undirected graph with vertices labeled $1\\dots N$ and\nedges labeled $1\\dots M$ ($2\\le N\\le 2\\cdot 10^5$, $N-1\\le M\\le 4\\cdot 10^5$).\nFor each vertex $v$ in the graph, the following process is conducted:\n​\n</p><ol><li>Let $S=\\{v\\}$ and $h=0$.</li><li>While $|S|&lt;N$, \n​\n<ol><li>Out of all edges with exactly one endpoint in $S$, let $e$ be the edge with\nthe minimum label.</li><li>Add the endpoint of $e$ not in $S$ to $S$.</li><li>Set $h=10h+e$.</li></ol>\n​\n</li><li>Return $h\\pmod{10^9+7}$.</li></ol>\n​\nDetermine all the return values of this process.\n​\n<div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $M$.\n​\nThen follow $M$ lines, the $e$th containing the endpoints $(a_e,b_e)$ of the \n$e$th edge ($1\\le a_e&lt;b_e\\le N$). It is guaranteed that these edges form a\nconnected graph, and at most one edge connects each pair of vertices.\n</div>\n​\n<div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $N$ lines, where the $i$th line should contain the return value of the\nprocess starting at vertex $i$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 2\n1 2\n2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12\n12\n21\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 6\n1 2\n3 4\n2 4\n2 3\n2 5\n1 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1325\n1325\n2315\n2315\n5132\n</pre>\n\n<p>Consider starting at $i=3$. First, we choose edge $2$, after which\n$S = \\{3, 4\\}$ and $h = 2$. Second, we choose edge $3$, after which\n$S = \\{2, 3, 4\\}$ and $h = 23$. Third, we choose edge $1$, after which\n$S = \\{1, 2, 3, 4\\}$ and $h = 231$. Finally, we choose edge $5$, after which\n$S = \\{1, 2, 3, 4, 5\\}$ and $h = 2315$. The answer for $i=3$ is therefore\n$2315$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">15 14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">678925929\n678925929\n678862929\n678787329\n678709839\n678632097\n178554320\n218476543\n321398766\n431520989\n542453212\n653475435\n764507558\n875540761\n986574081\n</pre>\n\n<p>Make sure to output the answers modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n<ul><li>Input 4: $N,M\\le 2000$</li><li>Inputs 5-6: $N\\le 2000$</li><li>Inputs 7-10: $N\\le 10000$</li><li>Inputs 11-14: $a_e+1=b_e$ for all $e$</li><li>Inputs 15-23: No additional constraints.</li></ul>\n</div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1357"
    },
    {
      "title": "Problem 3. Train Scheduling",
      "subtitle": "USACO 2023 December Contest, Platinum",
      "id": 1358,
      "year": "2023",
      "division": "platinum",
      "number": "3",
      "problem": "\n<p><strong>**Note: The memory limit for this problem is 512MB, twice the default.**</strong>\n\n</p><p>Bessie has taken on a new job as a train dispatcher! There are two train\nstations: $A$ and $B$. Due to budget constraints, there is only a single track\nconnecting the stations. If a train departs a station at time $t$, then it will\narrive at the other station at time $t+T$ ($1\\le T\\le 10^{12}$).\n\n</p><p>There are $N$ ($1\\le N\\le 5000$) trains whose departure times need to be\nscheduled. The $i$th train must leave station $s_i$ at time $t_i$ or later\n($s_i\\in \\{A, B\\}, 0\\le t_i\\le 10^{12}$).  It is not permitted to have trains\ngoing in opposite directions along the track at the same time (since they would\ncrash).  However, it is permitted to have many trains on the track going in the\nsame direction at the same time (assume trains  have negligible size).\n\n</p><p>Help Bessie schedule the departure times of all trains such that there are no\ncrashes and the total delay is minimized. If train $i$ is scheduled to leave at\ntime $a_i\\ge t_i$, the total delay is defined as $\\sum_{i=1}^N(a_i-t_i)$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $T$.\n\n<p>Then $N$ lines follow, where the $i$th line  contains the station $s_i$  and\ntime $t_i$ corresponding to the $i$th train.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe minimum possible total delay over all valid schedules.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1 95\nB 63\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n</pre>\nThe only train leaves on time.\n<h4>SAMPLE INPUT:</h4><pre class=\"in\">4 1\nB 3\nB 2\nA 1\nA 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">1\n</pre>\n\n<p>There are two optimal schedules. One option is to have trains $2,3,4$ leave on\ntime and train $1$ leave after a one-minute delay. Another is to have trains\n$1,2,3$ leave on time and train $4$ leave after a one-minute delay.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 10\nA 1\nB 2\nA 3\nA 21\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">13\n</pre>\n\n<p>The optimal schedule is to have trains $1$ and $3$ leave on time, train $2$\nleave at time $13$, and train $4$ leave at time $23$.  The total delay is\n$0+11+0+2=13$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">8 125000000000\nB 17108575619\nB 57117098303\nA 42515717584\nB 26473500855\nA 108514697534\nB 110763448122\nB 117731666682\nA 29117227954\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">548047356974\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 5-6: $N \\le 15$</li><li>Inputs 7-10: $N \\le 100$</li><li>Inputs 11-14: $N \\le 500$</li><li>Inputs 15-18: $N\\le 2000$</li><li>Inputs 19-24: No additional constraints</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1358"
    },
    {
      "title": "Problem 1. Island Vacation",
      "subtitle": "USACO 2024 January Contest, Platinum",
      "id": 1380,
      "year": "2024",
      "division": "platinum",
      "number": "1",
      "problem": "\n<p>Bessie is taking a vacation in a network of $N$ ($2\\le N\\le 10^4$) islands\nlabeled $1\\dots N$ connected by $M$ bidirectional bridges, each of which\nconnects two islands ($N-1\\le M\\le 3/2(N-1)$). It is guaranteed that the bridges\nform a connected simple graph (in particular, no two bridges connect the same\npair of islands, and no bridge connects an island to itself).\n\n</p><p>It is also guaranteed that no bridge lies on more than one simple cycle. A\nsimple cycle is a cycle that does not contain repeated islands.\n\n</p><p>Bessie starts at island $1$, and travels according to the following procedure.\nSupposing she is currently at island $i$,\n\n</p><p></p><ol><li>If there are no bridges adjacent to island $i$ that she has not yet crossed,\nshe ends her vacation.</li><li>Otherwise, with probability $p_i\\pmod{10^9+7}$, she ends her vacation.</li><li>Otherwise, out of all bridges adjacent to island $i$ that she has not yet\ncrossed, she chooses one uniformly at random and crosses it.</li></ol>\n\n<p>For each island, output the probability that she ends her vacation at that\nisland, modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains the number of independent test cases $T$\n($1\\le T\\le 10$). Consecutive test cases are separated by an empty line.\n\n<p>The first line of each test contains $N$ and $M$, where $N$ is the number of\nislands and $M$ is the number of bridges. It is guaranteed that the sum of $N$\nover all test cases does not exceed $10^4$.\n\n</p><p>The second line of each test contains $p_1, p_2,\\dots, p_N$ ($0\\le p_i&lt;10^9+7$).\n\n</p><p>The next $M$ lines of each test describe the bridges. The $i$th line contains\nintegers $u_i$ and $v_i$ ($1\\le u_i&lt;v_i\\le N$), meaning that the $i$th  bridge\nconnects islands $u_i$ and $v_i$. It is guaranteed that the bridges satisfy the\nconstraints mentioned above.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nFor each test case, output the probability of ending at each island from $1$ to\n$N$ modulo $10^9+7$ on a single line, separated by spaces.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n\n3 2\n0 10 111111112\n1 3\n2 3\n\n6 5\n500000004 0 0 0 0 0\n1 5\n1 3\n4 5\n5 6\n1 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0 888888896 111111112\n500000004 166666668 166666668 83333334 0 83333334\n</pre>\n\n<p>For the first test case, $p_3\\equiv 1/9 \\pmod{10^9+7}$. Bessie has  probability\n$1/9$ of ending at $3$ (taking the path $1\\to 3$) and $8/9$  of ending at $2$\n(taking the path $1\\to 3\\to 2$).\n\n</p><p>For the second test case, $p_1\\equiv 1/2\\pmod{10^9+7}$. Bessie has probability \n$1/2$ of ending at $1$,  $1/6$ of ending at each of $2$ or $3$, and $1/12$  of\nending at each of $4$ or $6$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n\n5 5\n333333336 333333336 0 0 0\n1 2\n2 3\n3 4\n4 5\n1 5\n\n5 5\n0 0 0 0 0\n1 2\n2 3\n2 4\n1 4\n1 5\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">777777784 222222224 0 0 0\n0 0 333333336 0 666666672\n</pre>\n\n<p>For the first test case, $p_1\\equiv p_2\\equiv 1/3\\pmod{10^9+7}$.  Bessie has\nprobability $7/9$ of ending at $1$ (taking one of the paths $1$,\n$1\\to 2\\to 3\\to 4\\to 5\\to 1$, or $1\\to 5\\to 4\\to 3\\to 2\\to 1$) and $2/9$ of\nending at $2$.\n\n</p><p>For the second test case, Bessie has probability $1/3$ of ending at $3$, and\n$2/3$ of ending at $5$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">1\n\n11 13\n2 3 4 5 6 7 8 9 10 11 12\n1 2\n1 3\n2 3\n2 4\n4 5\n2 5\n4 8\n5 9\n2 6\n6 7\n2 7\n6 10\n5 11\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">133332478 200000394 577778352 999999971 399999938 933333282 355555536 800000020 18 600000029 18\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 4-5: $N\\le 11$</li><li>Inputs 6-7: There are no simple cycles.</li><li>Inputs 8-11: No island lies on more than one simple cycle.</li><li>Inputs 12-15: No island lies on more than $5$ simple cycles.</li><li>Inputs 16-19: No island lies on more than $50$ simple cycles.</li><li>Inputs 20-23: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1380"
    },
    {
      "title": "Problem 2. Merging Cells",
      "subtitle": "USACO 2024 January Contest, Platinum",
      "id": 1381,
      "year": "2024",
      "division": "platinum",
      "number": "2",
      "problem": "\n<p><strong>**Note: The memory limit for this problem is 512MB, twice the default.**</strong>\n\n</p><p>Bessie is having fun playing a famous online game, where there are a bunch of\ncells of different labels and sizes. Cells get eaten by other cells until only\none winner remains.\n\n</p><p>There are $N$ ($2\\le N\\le 5000$) cells in a row labeled $1\\dots N$ from left to\nright, with initial sizes $s_1,s_2,\\dots,s_N$ ($1\\le s_i\\le 10^5$). While there\nis more than one cell, a pair of adjacent cells is selected uniformly at random\nand merged into a single new cell according to the following rule: \n\n</p><p>If a cell with label $a$ and current size $c_a$ is merged with a cell with label\n$b$ and current size $c_b$, the resulting cell has size $c_a+c_b$ and label\nequal to that of the larger cell, breaking ties by larger label. Formally, the\nlabel of the resulting cell is\n$\\begin{cases}\na &amp; c_a &gt; c_b \\\\\nb &amp; c_a &lt; c_b \\\\\n\\max(a,b) &amp; c_a = c_b\n\\end{cases}.$\n\n</p><p>For each label $i$ in the range $1\\dots N$, the probability that the final cell\nhas label $i$ can be expressed in the form $\\frac{a_i}{b_i}$ where\n$b_i\\not\\equiv 0\\pmod{10^9+7}$. Output $a_ib_i^{-1}\\pmod{10^9+7}$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$.\n\n<p>The next line contains $s_1,s_2,\\dots, s_N$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nThe probability of the final cell having label $i$ modulo $10^9+7$ for each $i$ in $1\\dots N$ on\nseparate lines.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">0\n500000004\n500000004\n</pre>\n\n<p>There are two possibilities, where $(a,b)\\to c$ means that the cells with labels\n$a$ and $b$ merge into a new cell with label $c$.\n\n</p><p></p><pre>(1, 2) -&gt; 2, (2, 3) -&gt; 2\n(2, 3) -&gt; 3, (1, 3) -&gt; 3\n</pre>\n\n<p>So with probability $1/2$ the final cell has label 2 or 3.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n3 1 1 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">666666672\n0\n166666668\n166666668\n</pre>\n\n<p>The six possibilities are as follows:\n\n</p><p></p><pre>(1, 2) -&gt; 1, (1, 3) -&gt; 1, (1, 4) -&gt; 1\n(1, 2) -&gt; 1, (3, 4) -&gt; 4, (1, 4) -&gt; 1\n(2, 3) -&gt; 3, (1, 3) -&gt; 1, (1, 4) -&gt; 1\n(2, 3) -&gt; 3, (3, 4) -&gt; 3, (1, 3) -&gt; 3\n(3, 4) -&gt; 4, (2, 4) -&gt; 4, (1, 4) -&gt; 4\n(3, 4) -&gt; 4, (1, 2) -&gt; 1, (1, 4) -&gt; 1\n</pre>\n\n<p>So with probability $2/3$ the final cell has label 1, and with probability $1/6$\nthe final cell has label 3 or 4.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 3: $N\\le 8$</li><li>Inputs 4-8: $N\\le 100$</li><li>Inputs 9-14: $N\\le 500$</li><li>Inputs 15-22: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1381"
    },
    {
      "title": "Problem 3. Mooball Teams III",
      "subtitle": "USACO 2024 January Contest, Platinum",
      "id": 1382,
      "year": "2024",
      "division": "platinum",
      "number": "3",
      "problem": "\n<p>Farmer John has $N$ cows on his farm ($2 \\leq N \\leq 2\\cdot 10^5$), conveniently\nnumbered $1 \\dots N$. Cow $i$ is located at integer coordinates $(x_i, y_i)$ \n($1\\le x_i,y_i\\le N$). Farmer John wants to pick two teams for a game of\nmooball!\n\n</p><p>One of the teams will be the \"red\" team; the other team will be the \"blue\" team.\nThere are only a few requirements for the teams. Neither team can be empty, and\neach of the $N$ cows must be on at most one team (possibly neither). The only\nother requirement is due to a unique feature of mooball: an infinitely long net,\nwhich must be placed as either a horizontal or vertical line in the plane at a\nnon-integer coordinate, such as $x = 0.5$. FJ must pick teams so that it is\npossible to separate the teams by a net. The cows are unwilling to move to make\nthis true.\n\n</p><p>Help a farmer out! Compute for Farmer John the number of ways to pick a red team\nand a blue team satisfying the above requirements, modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line of input contains a single integer $N.$\n\n<p>The next $N$ lines of input each contain two space-separated integers $x_i$ and\n$y_i$. It is guaranteed that the $x_i$ form a permutation of $1\\dots N$, and\nsame for the $y_i$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nA single integer denoting the number of ways to pick a red team and a blue team\nsatisfying the above requirements, modulo $10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n1 2\n2 1\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n</pre>\n\n<p>We can either choose the red team to be cow 1 and the blue team to be cow 2, or\nthe other way around. In either case, we can separate the two teams by a net\n(for example, $x=1.5$).\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 1\n2 2\n3 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">10\n</pre>\n\n<p>Here are all ten possible ways to place the cows on teams; the $i$th character\ndenotes the team of the $i$th cow, or . if the $i$th cow is not on a team.\n\n</p><p></p><pre>RRB\nR.B\nRB.\nRBB\n.RB\n.BR\nBRR\nBR.\nB.R\nBBR\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3\n1 1\n2 3\n3 2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">12\n</pre>\n\n<p>Here are all twelve possible ways to place the cows on teams:\n\n</p><p></p><pre>RRB\nR.B\nRBR\nRB.\nRBB\n.RB\n.BR\nBRR\nBR.\nBRB\nB.R\nBBR\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">40\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13\n14 14\n15 15\n16 16\n17 17\n18 18\n19 19\n20 20\n21 21\n22 22\n23 23\n24 24\n25 25\n26 26\n27 27\n28 28\n29 29\n30 30\n31 31\n32 32\n33 33\n34 34\n35 35\n36 36\n37 37\n38 38\n39 39\n40 40\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">441563023\n</pre>\n\n<p>Make sure to output the answer modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 5: $N\\le 10$</li><li>Inputs 6-9: $N\\le 200$</li><li>Inputs 10-13: $N\\le 3000$</li><li>Inputs 14-24: No additional constraints.</li></ul>\n</div>\n\n<p>\n\n</p><p>Problem credits: Dhruv Rohatgi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1382"
    },
    {
      "title": "Problem 1. Lazy Cow",
      "subtitle": "USACO 2024 February Contest, Platinum",
      "id": 1404,
      "year": "2024",
      "division": "platinum",
      "number": "1",
      "problem": "\n<p>Bessie is hard at work preparing test cases for the USA Cowmputing Olympiad\nFebruary contest. Each minute, she can choose to not prepare any tests,\nexpending no energy; or expend $3^{a-1}$ energy preparing $a$ test cases, for\nsome positive integer $a$.\n\n</p><p>Farmer John has $D$ ($1\\le D\\le 2\\cdot 10^5$) demands. For the $i$th demand, he\ntells Bessie that within the first $m_i$ minutes, she needs to have prepared  at\nleast $b_i$ test cases in total ($1\\le m_i\\le 10^6, 1 \\leq b_i \\leq 10^{12}$).\n\n</p><p>Let $e_i$ be the smallest amount of energy Bessie needs to spend to satisfy the\nfirst $i$ demands. Print $e_1,\\dots,e_D$ modulo $10^9+7$.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $D$. The $i$th of the next $D$ lines contains two\nspace-separated integers $m_i$ and $b_i$.\n</div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput $D$ lines, the $i$th containing $e_i \\text{ mod } 10^9+7$.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4\n5 11\n6 10\n10 15\n10 30\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">21\n21\n25\n90\n</pre>\n\n<p>For the first test case, \n</p><ul><li> $i=1$: If Bessie creates $[2, 3, 2, 2, 2]$ test cases on the first $5$\ndays, respectively, she would have expended $3^1 + 3^2 + 3^1 + 3^1 + 3^1 = 21$\nunits of energy and created $11$ test cases by the end of day $5$. </li><li>\n$i=2$: Bessie can follow the above strategy to ensure $11$ test cases are\ncreated by the end of day $5$, and this will automatically satisfy the second\ndemand.</li><li> $i=3$: If Bessie creates $[2, 3, 2, 2, 2, 0, 1, 1, 1, 1]$ test\ncases on the first $10$ days, respectively, she would have expended $25$ units\nof energy and satisfied all demands. It can be shown that she cannot expend less\nenergy. </li><li>$i=4$: If Bessie creates 3 test cases on each of the first\n$10$ days she would have expended $3^{2}\\cdot 10 = 90$ units of energy and\nsatisfied all demands. </li></ul>\nFor each $i$, it can be shown that Bessie cannot satisfy the first $i$ demands using\nless energy.\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">2\n100 5\n100 1000000000000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">5\n627323485\n</pre>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">20\n303590 482848034083\n180190 112716918480\n312298 258438719980\n671877 605558355401\n662137 440411075067\n257593 261569032231\n766172 268433874550\n8114 905639446594\n209577 11155741818\n227183 874665904430\n896141 55422874585\n728247 456681845046\n193800 632739601224\n443005 623200306681\n330325 955479269245\n377303 177279745225\n880246 22559233849\n58084 155169139314\n813702 758370488574\n929760 785245728062\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">108753959\n108753959\n108753959\n148189797\n148189797\n148189797\n148189797\n32884410\n32884410\n32884410\n32884410\n32884410\n32884410\n32884410\n3883759\n3883759\n3883759\n3883759\n3883759\n3883759\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Inputs 4-5: $D\\le 100$ and $m_i \\le 100$ for all $i$ </li><li>Inputs 6-8: $D\\le 3000$</li><li>Inputs 9-20: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang and Claire Zhang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1404"
    },
    {
      "title": "Problem 2. Minimum Sum of Maximums",
      "subtitle": "USACO 2024 February Contest, Platinum",
      "id": 1405,
      "year": "2024",
      "division": "platinum",
      "number": "2",
      "problem": "\n<p>Bessie has $N$ ($2\\le N\\le 300$) tiles in a line with ugliness values \n$a_1, a_2, \\dots, a_N$ in that order ($1\\le a_i\\le 10^6$). $K$\n($0\\le K\\le \\min(N,6)$) of the tiles are stuck in place; specifically, those at\nindices $x_1,\\dots, x_K$ ($1\\le x_1 &lt; x_2&lt;\\dots&lt; x_K\\le N$). \n\n</p><p>Bessie wants to minimize the total ugliness of the tiles, which is defined as\nthe sum of the maximum ugliness over every consecutive pair of tiles; that is,\n$\\sum_{i=1}^{N-1}\\max(a_i,a_{i+1})$. She is allowed to perform the following\noperation any number of times: choose two tiles, neither of which are stuck in\nplace, and swap them. \n\n</p><p>Determine the minimum possible total ugliness Bessie can achieve if she performs\noperations optimally.\n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains $N$ and $K$.\n\n<p>The next line contains $a_1,\\dots,a_N$.\n\n</p><p>The next line contains the $K$ indices $x_1,\\dots,x_K$.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nOutput the minimum possible total ugliness.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 0\n1 100 10\n\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">110\n</pre>\n\n<p>Bessie can swap the second and third tiles so that $a=[1,10,100]$, achieving\ntotal ugliness $\\max(1,10)+\\max(10,100)=110$. Alternatively, she could swap the\nfirst and second tiles so that $a=[100,1,10]$, also achieving  total ugliness\n$\\max(100,1)+\\max(1,10)=110$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 1\n1 100 10\n3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">110\n</pre>\n\n<p>Bessie could swap the first and second tiles so that $a=[100,1,10]$, achieving \ntotal ugliness $\\max(100,1)+\\max(1,10)=110$.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">3 1\n1 100 10\n2\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">200\n</pre>\n\n<p>The initial total ugliness of the tiles is $\\max(1,100)+\\max(100,10)=200$.\nBessie is only allowed to swap the first and third tiles, which does not allow\nher to reduce the total ugliness.\n\n</p><p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">4 2\n1 3 2 4\n2 3\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">9\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 5: $K=0$</li><li>Inputs 6-7: $K=1$</li><li>Inputs 8-12: $N\\le 50$</li><li>Inputs 13-24: No additional constraints</li></ul>\n\n<p></p></div>\n\n<p>Problem credits: Benjamin Qi\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1405"
    },
    {
      "title": "Problem 3. Infinite Adventure",
      "subtitle": "USACO 2024 February Contest, Platinum",
      "id": 1406,
      "year": "2024",
      "division": "platinum",
      "number": "3",
      "problem": "\n<p><strong>**Note: The memory limit for this problem is 512MB, twice the default.**</strong>\n\n</p><p>Bessie is planning an infinite adventure in a land with $N$\n($1\\leq N \\leq 10^5$) cities. In each city $i$, there is a portal, as well as a\ncycling time $T_i$.  All $T_i$'s are powers of $2$, and\n$T_1 + \\cdots + T_N \\leq 10^5$. If you enter city $i$'s portal on day $t$, then\nyou instantly exit the portal in city\n$c_{i, t\\bmod{T_i}}$.\n\n</p><p>Bessie has $Q$ ($1\\leq Q \\leq 5\\cdot 10^4$) plans for her trip, each of which\nconsists of a tuple $(v, t, \\Delta)$. In each plan, she will start in city $v$\non day $t$. She will then do the following $\\Delta$ times: She will follow the\nportal in her current city, then wait one day. For each of her plans, she wants\nto know what city she will end up in.  \n\n</p><p></p><div class=\"prob-in-spec\"><h4>INPUT FORMAT (input arrives from the terminal / stdin):</h4>\nThe first line contains two space-separated integers: $N$, the number of nodes,\nand $Q$, the number of queries.\n\n<p>The second line contains $N$ space-separated integers: $T_1, T_2, \\ldots, T_N$\n($1\\leq T_i$, $T_i$ is a power of $2$, and $T_1 + \\cdots + T_N \\leq 10^5$).\n\n</p><p>For $i = 1, 2, \\ldots, N$, line $i+2$ contains $T_i$ space-separated positive\nintegers, namely $c_{i, 0}, \\ldots, c_{i, T_i-1}$ ($1\\leq c_{i, t} \\leq N$).\n\n</p><p>For $j = 1, 2, \\ldots, Q$, line $j+N+2$ contains three space-separated positive\nintegers, $v_j, t_j, \\Delta_j$ ($1\\leq v_j \\leq N$, $1\\leq t_j \\leq 10^{18}$,\nand $1\\leq \\Delta_j \\leq 10^{18}$) representing the $j$th query.\n</p></div>\n\n<p></p><div class=\"prob-out-spec\"><h4>OUTPUT FORMAT (print output to the terminal / stdout):</h4>\nPrint $Q$ lines. The $j$th line must contain the answer to the $j$th query.\n</div>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 4\n1 2 1 2 8\n2\n3 4\n4\n2 3\n5 5 5 5 5 1 5 5\n2 4 3\n3 3 6\n5 3 2\n5 3 7\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n2\n5\n4\n</pre>\n\n<p>Bessie's first three adventures proceed as follows:\n</p><ul><li>\nIn the first adventure, she goes from city $2$ at time $4$ to city $3$ at time $5$, to city $4$ at time $6$, to city $2$ at time $7$.\n</li><li>\nIn the second adventure, she goes from city $3$ at time $3$ to city $4$ at time $4$, to city $2$ at time $5$, to city $4 $ at time $6$, to city $2$ at time $7$, to city $4$ at time $8$, to city $2$ at time $9$.\n</li><li>\nIn the third adventure, she goes from city $5$ at time $3$ to city $5$ at time $4$, to city $5$ at time $5$.\n</li></ul>\n\n<p></p><h4>SAMPLE INPUT:</h4><pre class=\"in\">5 5\n1 2 1 2 8\n2\n3 4\n4\n2 3\n5 5 5 5 5 1 5 5\n2 4 3\n3 2 6\n5 3 2\n5 3 7\n5 3 1000000000000000000\n</pre><h4>SAMPLE OUTPUT:</h4> <pre class=\"out\">2\n3\n5\n4\n2\n</pre>\n\n<p></p><div class=\"prob-section\"><h4>SCORING:</h4>\n\n<p></p><ul><li>Input 3: $\\Delta_j \\leq 2\\cdot 10^2$.</li><li>Inputs 4-5: $N, \\sum T_j\\leq 2\\cdot 10^3$.</li><li>Inputs 6-8: $N, \\sum T_j\\leq 10^4$.</li><li>Inputs 9-18: No additional constraints.</li></ul>\n\n<p></p></div>\n\n<p>\n\n</p><p>Problem credits: Brandon Wang\n\n</p>",
      "url": "http://usaco.org/index.php?page=viewproblem2&cpid=1406"
    }
  ]
}
